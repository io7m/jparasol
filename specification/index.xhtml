<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>Parasol Language 0.11.3 Specification</title><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-layout.css"/><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-colour.css"/><link rel="stylesheet" type="text/css" href="specification.css"/></head><body><div class="st200_body"><div class="brand">
  <div class="brand_left">
    <a href="http://io7m.com/">io7m</a>
  </div>
  <div class="brand_right">
    <a href="http://io7m.github.io/jparasol/">io7m-jparasol</a> 0.11.3
  </div>
</div><div class="st200_document_title">Parasol Language 0.11.3 Specification</div><ul class="st200_contents st200_document_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_part"><a href="#st200_p1">1. Notational Conventions</a><ul class="st200_contents st200_part_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s1">1.1. Unicode</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s2">1.2. EBNF</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s3">1.3. Logic</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s4">1.4. Sets</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s5">1.5. Tuples</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s6">1.6. Types</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s7">1.7. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s8">1.8. Operational Semantics</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s9">1.9. OpenGL</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_part"><a href="#st200_p2">2. Lexical Conventions</a><ul class="st200_contents st200_part_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p2s1">2.1. Units</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p2s2">2.2. Character set</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p2s3">2.3. Whitespace</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p2s4">2.4. Comments</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p2s5">2.5. Tokens</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_part"><a href="#st200_p3">3. Declarations</a><ul class="st200_contents st200_part_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p3s1">3.1. Overview</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p3s2">3.2. Terms</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p3s3">3.3. Types</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p3s4">3.4. Shaders</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p3s5">3.5. Vertex shaders</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p3s6">3.6. Fragment shaders</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p3s7">3.7. Programs</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p3s8">3.8. Modules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p3s9">3.9. Packages</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_part"><a href="#st200_p4">4. Expressions</a><ul class="st200_contents st200_part_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p4s1">4.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p4s2">4.2. Syntax</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p4s3">4.3. Integer literal</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p4s4">4.4. Real literal</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p4s5">4.5. Boolean literal</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p4s6">4.6. Variable</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p4s7">4.7. Function application</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p4s8">4.8. Conditional</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p4s9">4.9. Let</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p4s10">4.10. Record Projection</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p4s11">4.11. Record</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p4s12">4.12. Swizzle</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p4s13">4.13. Matrix Column Access</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p4s14">4.14. New</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_part"><a href="#st200_p5">5. Types</a><ul class="st200_contents st200_part_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p5s1">5.1. Overview</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p5s2">5.2. Constructors</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p5s3">5.3. Integer</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p5s4">5.4. Float</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p5s5">5.5. Boolean</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p5s6">5.6. Vectors</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p5s7">5.7. Matrices</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p5s8">5.8. Samplers</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p5s9">5.9. Records</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_part"><a href="#st200_p6">6. Compilation and Execution</a><ul class="st200_contents st200_part_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p6s1">6.1. Overview</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p6s2">6.2. Lifecycle</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_part"><a href="#st200_p7">7. Standard Library Reference</a><ul class="st200_contents st200_part_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p7s1">7.1. Module com.io7m.parasol.Boolean</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p7s2">7.2. Module com.io7m.parasol.Float</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p7s3">7.3. Module com.io7m.parasol.Integer</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p7s4">7.4. Module com.io7m.parasol.Matrix3x3f</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p7s5">7.5. Module com.io7m.parasol.Matrix4x4f</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p7s6">7.6. Module com.io7m.parasol.Sampler2D</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p7s7">7.7. Module com.io7m.parasol.Vector2f</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p7s8">7.8. Module com.io7m.parasol.Vector2i</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p7s9">7.9. Module com.io7m.parasol.Vector3f</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p7s10">7.10. Module com.io7m.parasol.Vector3i</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p7s11">7.11. Module com.io7m.parasol.Vector4f</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p7s12">7.12. Module com.io7m.parasol.Vector4i</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_part"><a href="#st200_p8">8. Appendices</a><ul class="st200_contents st200_part_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p8s1">8.1. EBNF Grammar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p8s2">8.2. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p8s3">8.3. Operational semantics</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p8s4">8.4. GLSL identifiers</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p8s5">8.5. Lists</a></li></ul></li></ul><div class="st200_part_container"><div class="st200_part_title_number"><a id="st200_p1" href="#st200_p1">1</a></div><div class="st200_part_title">Notational Conventions</div><ul class="st200_contents st200_part_contents_outer st200_part_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s1">1.1. Unicode</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s2">1.2. EBNF</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s3">1.3. Logic</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s4">1.4. Sets</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s5">1.5. Tuples</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s6">1.6. Types</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s7">1.7. Type rules</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s8">1.8. Operational Semantics</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s9">1.9. OpenGL</a></li></ul><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s1" href="#st200_p1s1">1.1</a></div><div class="st200_section_title">Unicode</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1pg1" href="#st200_p1s1pg1">1</a></div><div class="st200_paragraph">
        The specification makes reference to the
        <a class="st200_link_external" href="http://unicode.org">Unicode</a>
        character set which, at the time of writing, is at version
        <span class="st200_term constant">6.2.0</span>. The specification
        often references specific Unicode characters, and does so using
        the standard notation <span class="st200_term expression">U+NNNN</span>,
        where <span class="st200_term variable">N</span> represents a hexadecimal
        digit. For example, <span class="st200_term constant">U+03BB</span>
        corresponds to the lowercase lambda symbol <span class="st200_term constant">λ</span>.
      </div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s2" href="#st200_p1s2">1.2</a></div><div class="st200_section_title">EBNF</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s2pg1" href="#st200_p1s2pg1">1</a></div><div class="st200_paragraph">
        The specification gives grammar definitions in
        <span class="st200_term package">ISO/IEC 14977:1996</span> Extended Backus-Naur
        form.
      </div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s3" href="#st200_p1s3">1.3</a></div><div class="st200_section_title">Logic</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s3pg1" href="#st200_p1s3pg1">1</a></div><div class="st200_paragraph">
        The specification uses the following notation from
        propositional logic <span class="st200_footnote_reference"><a id="st200_fn_0_ref" href="#st200_fn_0">[0]</a></span>.
        A summary of the notation used is as follows:
      </div></div><div class="st200_formal_item notations"><div class="st200_formal_item_title notations"><a id="st200_p1s3fo1" href="#st200_p1s3fo1">1.3.1. Set notations</a></div><table class="st200_table" summary="Set notations"><thead class="st200_table_head"><tr><th class="st200_table_column_name">Notation</th><th class="st200_table_column_name">Description</th></tr></thead><tbody class="st200_table_body"><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">∀x. P x</span></td><td class="st200_table_cell">Universal quantification; for all <span class="st200_term expression">x</span> the proposition <span class="st200_term expression">P</span> holds for <span class="st200_term expression">x</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">∃x. P x</span></td><td class="st200_table_cell">Existential quantification; there exists some <span class="st200_term expression">x</span> such that the proposition <span class="st200_term expression">P</span> holds for <span class="st200_term expression">x</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">P ⇒ Q</span></td><td class="st200_table_cell">Implication; <span class="st200_term expression">P</span> implies <span class="st200_term expression">Q</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">P ⋀ Q</span></td><td class="st200_table_cell">Conjunction; <span class="st200_term expression">P</span> and <span class="st200_term expression">Q</span></td></tr></tbody></table></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s4" href="#st200_p1s4">1.4</a></div><div class="st200_section_title">Sets</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s4pg1" href="#st200_p1s4pg1">1</a></div><div class="st200_paragraph">
        Where the specification refers to <span class="st200_term term">sets</span>, it
        is referring to sets as defined in ZFC<span class="st200_footnote_reference"><a id="st200_fn_1_ref" href="#st200_fn_1">[1]</a></span>.
      </div></div><div class="st200_formal_item notations"><div class="st200_formal_item_title notations"><a id="st200_p1s4fo1" href="#st200_p1s4fo1">1.4.1. Set notations</a></div><table class="st200_table" summary="Set notations"><thead class="st200_table_head"><tr><th class="st200_table_column_name">Notation</th><th class="st200_table_column_name">Description</th></tr></thead><tbody class="st200_table_body"><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">e ∈ A</span></td><td class="st200_table_cell"><span class="st200_term expression">e</span> is an element of the set <span class="st200_term expression">A</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">e ∉ A</span></td><td class="st200_table_cell"><span class="st200_term expression">e</span> is not an element of the set <span class="st200_term expression">A</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">{ x₀, x₁, ... xₙ }</span></td><td class="st200_table_cell">A set consisting of values from <span class="st200_term expression">x₀</span> to <span class="st200_term expression">xₙ</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">{ e ∈ A | p(e) }</span></td><td class="st200_table_cell">A set consisting of the elements of <span class="st200_term expression">A</span> for which the proposition <span class="st200_term expression">p</span> holds</td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">|A|</span></td><td class="st200_table_cell">The cardinality of the set <span class="st200_term expression">A</span>; a measure of the number of elements in <span class="st200_term expression">A</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">∅</span></td><td class="st200_table_cell">The empty set</td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">𝔹</span></td><td class="st200_table_cell">The booleans</td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">ℕ</span></td><td class="st200_table_cell">The natural numbers</td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">ℝ</span></td><td class="st200_table_cell">The real numbers</td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">ℤ</span></td><td class="st200_table_cell">The integers</td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">[a, b]</span></td><td class="st200_table_cell">A closed interval in a set (given separately or implicit from the types of <span class="st200_term expression">a</span> and <span class="st200_term expression">b</span>), from <span class="st200_term expression">a</span> to <span class="st200_term expression">b</span>, including <span class="st200_term expression">a</span> and <span class="st200_term expression">b</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">(a, b]</span></td><td class="st200_table_cell">A closed interval in a set (given separately or implicit from the types of <span class="st200_term expression">a</span> and <span class="st200_term expression">b</span>), from <span class="st200_term expression">a</span> to <span class="st200_term expression">b</span>, excluding <span class="st200_term expression">a</span> but including <span class="st200_term expression">b</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">[a, b)</span></td><td class="st200_table_cell">A closed interval in a set (given separately or implicit from the types of <span class="st200_term expression">a</span> and <span class="st200_term expression">b</span>), from <span class="st200_term expression">a</span> to <span class="st200_term expression">b</span>, including <span class="st200_term expression">a</span> but excluding <span class="st200_term expression">b</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">(a, b)</span></td><td class="st200_table_cell">A closed interval in a set (given separately or implicit from the types of <span class="st200_term expression">a</span> and <span class="st200_term expression">b</span>), from <span class="st200_term expression">a</span> to <span class="st200_term expression">b</span>, excluding <span class="st200_term expression">a</span> and <span class="st200_term expression">b</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">A ⊂ B</span></td><td class="st200_table_cell"><span class="st200_term expression">A</span> is a subset of, and is not equal to, <span class="st200_term expression">B</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">A ⊆ B</span></td><td class="st200_table_cell"><span class="st200_term expression">A</span> is a subset of, or is equal to, <span class="st200_term expression">B</span></td></tr></tbody></table></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s5" href="#st200_p1s5">1.5</a></div><div class="st200_section_title">Tuples</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s5pg1" href="#st200_p1s5pg1">1</a></div><div class="st200_paragraph">
        The notation <span class="st200_term expression">tuples(S, N)</span> denotes the
        set of n-tuples of length <span class="st200_term variable">N</span> of elements
        taken from the set <span class="st200_term variable">S</span>, where
        <span class="st200_term variable">N</span> is non-negative. For a given set
        <span class="st200_term variable">S</span>, the set of n-tuples may be defined
        inductively as follows:
      </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p1s5fo1" href="#st200_p1s5fo1">1.5.1. Tuples</a></div><ul class="st200_list_unordered"><li class="st200_list_item">
            <span class="st200_term expression">tuples(S, 0)</span> is the set of
            0-tuples, containing one element denoted <span class="st200_term expression">()</span>.
          </li><li class="st200_list_item">
            <span class="st200_term expression">tuples(S, N)</span> is an ordered pair
            <span class="st200_term expression">(x, tuples(S, N - 1))</span> where
            <span class="st200_term expression">x ∈ S</span>.
          </li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s5pg2" href="#st200_p1s5pg2">2</a></div><div class="st200_paragraph">
        Some example sets of n-tuples are as follows:
      </div></div><div class="st200_formal_item examples"><div class="st200_formal_item_title examples"><a id="st200_p1s5fo2" href="#st200_p1s5fo2">1.5.2. Example n-tuple sets</a></div><pre class="st200_verbatim">S = { 1, 2, 3 }

tuples(S, 0) = { () }

tuples(S, 1) = {
  (1, ()),
  (2, ()),
  (3, ())
}

tuples(S, 2) = {
  (1, (1, ())),
  (2, (1, ())),
  (3, (1, ())),
  (1, (2, ())),
  (2, (2, ())),
  (3, (2, ())),
  (1, (3, ())),
  (2, (3, ())),
  (3, (3, ()))
}</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s5pg3" href="#st200_p1s5pg3">3</a></div><div class="st200_paragraph">
        Specific n-tuples are denoted <span class="st200_term expression">P = (x₀, x₁, ..., xₙ)</span>,
        which is essentially shorthand for <span class="st200_term expression">P = (x₀, (x₁, (... (xₙ, ()))))</span>,
        with the <span class="st200_term expression">0th</span> element of
        <span class="st200_term expression">P</span> being <span class="st200_term expression">x₀</span> and
        the <span class="st200_term expression">nth</span> element being
        <span class="st200_term expression">xₙ</span>.
      </div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s6" href="#st200_p1s6">1.6</a></div><div class="st200_section_title">Types</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s6pg1" href="#st200_p1s6pg1">1</a></div><div class="st200_paragraph">
        The specification (and the <span class="st200_term package">parasol</span> language itself)
        uses notation and concepts taken from type theory
        <span class="st200_footnote_reference"><a id="st200_fn_2_ref" href="#st200_fn_2">[2]</a></span>.
        A summary of the notation used is as follows:
      </div></div><div class="st200_formal_item notations"><div class="st200_formal_item_title notations"><a id="st200_p1s6fo1" href="#st200_p1s6fo1">1.6.1. Type notation</a></div><table class="st200_table" summary="Type notation"><thead class="st200_table_head"><tr><th class="st200_table_column_name">Notation</th><th class="st200_table_column_name">Description</th><th class="st200_table_column_name">Example</th></tr></thead><tbody class="st200_table_body"><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">x : A</span></td><td class="st200_table_cell">The term <span class="st200_term variable">x</span> is of type <span class="st200_term variable">A</span></td><td class="st200_table_cell"><span class="st200_term expression">23 : ℕ</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">A → B</span></td><td class="st200_table_cell">The type of functions from values of type <span class="st200_term variable">A</span> to values of type <span class="st200_term variable">B</span></td><td class="st200_table_cell"><span class="st200_term expression">even : ℕ → 𝔹</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">A × B</span></td><td class="st200_table_cell">The type of products of <span class="st200_term variable">A</span> and <span class="st200_term variable">B</span></td><td class="st200_table_cell"><span class="st200_term expression">(23, true) : ℕ × 𝔹</span></td></tr></tbody></table></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s6pg2" href="#st200_p1s6pg2">2</a></div><div class="st200_paragraph">
        Product types are typically used to encode the notion of
        <span class="st200_term term">n-ary functions</span>,
        where <span class="st200_term expression">(A × B × C) → D</span>
        is the type of functions that take three arguments of types
        <span class="st200_term expression">A</span>, <span class="st200_term expression">B</span>,
        and <span class="st200_term expression">C</span>, respectively, and return
        values of type <span class="st200_term expression">D</span>.
      </div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s7" href="#st200_p1s7">1.7</a></div><div class="st200_section_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s7pg1" href="#st200_p1s7pg1">1</a></div><div class="st200_paragraph">
        Declarative type rules describe the precise rules for assigning
        <span class="st200_term term">types</span> to <span class="st200_term term">terms</span>.
        If no type rule matches a term, then that term is considered ill-typed.
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s7pg2" href="#st200_p1s7pg2">2</a></div><div class="st200_paragraph">
        Type rules are given as zero or more <span class="st200_term term">premises</span>,
        and a single <span class="st200_term term">conclusion</span>, separated by a horizontal
        line. For a given rule, when all of the <span class="st200_term term">premises</span>
        are true, then the <span class="st200_term term">conclusion</span> is true. If a rule
        has no <span class="st200_term term">premises</span> then the rule is taken as an
        <span class="st200_term term">axiom</span>.
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s7pg3" href="#st200_p1s7pg3">3</a></div><div class="st200_paragraph">
        The <span class="st200_term term">gamma</span> symbol <span class="st200_term constant">Γ</span>
        (<span class="st200_term constant">U+0393</span>)
        represents the current <span class="st200_term term">typing environment</span> and
        can be thought of as a mapping from distinct variables to their types, with
        the set of variables in environment denoted by <span class="st200_term expression">dom(Γ)</span>
        (the domain of <span class="st200_term constant">Γ</span>). The notation
        <span class="st200_term expression">Γ ⊢ P</span> reads "<span class="st200_term expression">Γ</span>
        <span class="st200_term term">implies</span>
        <span class="st200_term expression">P</span>" and is used in type rules to assign types to terms.
        The empty typing environment is represented by <span class="st200_term constant">∅</span>
        (<span class="st200_term constant">U+2205</span>). The <span class="st200_term term">diamond</span> symbol
        <span class="st200_term constant">◇</span> (<span class="st200_term constant">U+25C7</span>)
        should be read as "is well-formed", so <span class="st200_term expression">Γ ⊢ ◇</span>
        should be read as "the current typing environment is well-formed". The concept
        of well-formedness is often type-system-specific and is usually described when
        the rules are given. A summary of the notation is as follows:
      </div></div><div class="st200_formal_item notations"><div class="st200_formal_item_title notations"><a id="st200_p1s7fo1" href="#st200_p1s7fo1">1.7.1. Type rule notation</a></div><table class="st200_table" summary="Type rule notation"><thead class="st200_table_head"><tr><th class="st200_table_column_name">Notation</th><th class="st200_table_column_name">Description</th><th class="st200_table_column_name">Example</th></tr></thead><tbody class="st200_table_body"><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term constant">Γ</span></td><td class="st200_table_cell">The current typing environment</td><td class="st200_table_cell"><span class="st200_term expression">Γ</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term constant">∅</span></td><td class="st200_table_cell">The empty typing environment</td><td class="st200_table_cell"><span class="st200_term expression">∅</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">Γ, x</span></td><td class="st200_table_cell">The typing environment <span class="st200_term constant">Γ</span>
                extended with the variable <span class="st200_term expression">x</span>
                <span class="st200_footnote_reference"><a id="st200_fn_3_ref" href="#st200_fn_3">[3]</a></span>
              </td><td class="st200_table_cell"><span class="st200_term expression">Γ, x</span> where <span class="st200_term expression">x ∉ dom(Γ)</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">dom(Γ)</span></td><td class="st200_table_cell">The set of distinct variables in <span class="st200_term constant">Γ</span></td><td class="st200_table_cell"><span class="st200_term expression">dom((∅, x, y)) = { x, y }</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">Γ ⊢ P</span></td><td class="st200_table_cell">The environment <span class="st200_term constant">Γ</span> implies <span class="st200_term expression">P</span></td><td class="st200_table_cell"><span class="st200_term expression">Γ ⊢ 23 : ℕ</span> (in the current typing environment, <span class="st200_term expression">23</span> is of type <span class="st200_term expression">ℕ</span>)</td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term expression">Γ ⊢ ◇</span></td><td class="st200_table_cell">The environment <span class="st200_term constant">Γ</span> is <span class="st200_term term">well-formed</span></td><td class="st200_table_cell"><span class="st200_term expression">∅ ⊢ ◇</span> (the empty typing environment is well-formed)</td></tr></tbody></table></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s7pg4" href="#st200_p1s7pg4">4</a></div><div class="st200_paragraph">
        An example of typing rules for natural number addition:
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p1s7fo2" href="#st200_p1s7fo2">1.7.2. Natural number addition typing</a></div><img class="st200_image" alt="Natural number addition typing" src="png/tyex_typing_example.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s7pg5" href="#st200_p1s7pg5">5</a></div><div class="st200_paragraph">
        The <span class="st200_term element">empty</span> rule states that the empty
        typing environment is well-formed. Because there are no premises above
        the horizontal line, this is taken as an <span class="st200_term term">axiom</span>.
        The <span class="st200_term element">extension</span> rule states that adding
        a term to the typing environment that is not already in that environment,
        results in a well-formed environment.
        The <span class="st200_term element">natural_intro</span> rule states that,
        given a well-formed typing environment, any expression that is
        syntactically a natural number (represented by
        <span class="st200_term variable">ℕ</span>) has type
        <span class="st200_term type">natural</span>. The
        <span class="st200_term element">natural_plus</span> rule states that, if variables
        <span class="st200_term variable">m</span> and <span class="st200_term variable">n</span>
        have type <span class="st200_term type">natural</span> in the current typing
        environment, then <span class="st200_term expression">m + n</span> has type
        <span class="st200_term type">natural</span>. When checking the type of the
        expression <span class="st200_term expression">m + n</span>, the rules are used
        to construct a <span class="st200_term term">derivation tree</span> as follows:
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p1s7fo3" href="#st200_p1s7fo3">1.7.3. Natural number addition derivation</a></div><img class="st200_image" alt="Natural number addition derivation" src="png/tyex_typing_example_derivation.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s7pg6" href="#st200_p1s7pg6">6</a></div><div class="st200_paragraph">
        Intuitively, a term only has a valid type if there is a sequence of rules
        from the empty environment that can assign a type to the term.
      </div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s8" href="#st200_p1s8">1.8</a></div><div class="st200_section_title">Operational Semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s8pg1" href="#st200_p1s8pg1">1</a></div><div class="st200_paragraph">
        Operational semantics describe the precise rules for the evaluation
        of expressions in a given language. The rules make up the description
        of an <span class="st200_term term">abstract machine</span> which passes
        through different states, one rule (or <span class="st200_term term">step</span>)
        at a time, until the machine <span class="st200_term term">halts</span>
        and produces a <span class="st200_term term">value</span>.
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s8pg2" href="#st200_p1s8pg2">2</a></div><div class="st200_paragraph">
        Typically, operational semantics begin by first giving a set of
        <span class="st200_term term">values</span>, indicating the final results
        of evaluation, and a set of identifiers syntactically identifying
        the set of evaluable <span class="st200_term term">expressions</span>. The
        evaluation rules themselves are given in a style similar to
        <a class="st200_link" href="#st200_p1s7">type rules</a>,
        where a rule applies if the
        <span class="st200_term term">premises</span> above the horizontal line are
        true, and the <span class="st200_term term">conclusion</span> indicates how
        the state of the abstract machine changes when the rule is applied.
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s8pg3" href="#st200_p1s8pg3">3</a></div><div class="st200_paragraph">
        As an example, assume a language of conditional expressions.
        An example expression in this language would be:
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p1s8fo1" href="#st200_p1s8fo1">1.8.1. Conditionals example</a></div><pre class="st200_verbatim">if true then
  if false then
    true
  else
    if
      if true then
        false
      else
        true
      end
    then
      false
    else
      true
    end
  end
else
  true
end</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s8pg4" href="#st200_p1s8pg4">4</a></div><div class="st200_paragraph">
        The <span class="st200_term term">values</span> of this language are
        <span class="st200_term constant">true</span> and <span class="st200_term constant">false</span>.
        The <span class="st200_term term">expressions</span> in this language
        include the <span class="st200_term term">values</span>, and the form
        <span class="st200_term expression">if e₀ then e₁ else e₂ end</span>, where
        <span class="st200_term expression">e₀</span>,
        <span class="st200_term expression">e₁</span> and
        <span class="st200_term expression">e₂</span> are expressions. There
        are clearly multiple ways to evaluate expressions in this language,
        but in order to produce an algorithm that will execute on a computer,
        the evaluation rules should be:
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p1s8fo2" href="#st200_p1s8fo2">1.8.2. Evaluation characteristics</a></div><ul class="st200_list_unordered"><li class="st200_list_item">
            Deterministic. That is, given a non-<span class="st200_term term">value</span> expression
            <span class="st200_term expression">e</span>,
            there must be <span class="st200_term term">at most</span> one evaluation rule that
            applies in order to work towards producing a value from
            <span class="st200_term expression">e</span>. If multiple rules apply, then
            evaluation is nondeterministic.
          </li><li class="st200_list_item">
            Complete. That is, given a non-<span class="st200_term term">value</span> expression
            <span class="st200_term expression">e</span>,
            there must be <span class="st200_term term">at least</span> one evaluation rule that
            applies in order to work towards producing a value from
            <span class="st200_term expression">e</span>. If no rule applies, then
            evaluation is said to be <span class="st200_term term">stuck</span>.
          </li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s8pg5" href="#st200_p1s8pg5">5</a></div><div class="st200_paragraph">
        The operational semantics for the language could be written as
        follows:
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p1s8fo3" href="#st200_p1s8fo3">1.8.3. Conditional semantics</a></div><img class="st200_image" alt="Conditional semantics" src="png/semantics_example.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s8pg6" href="#st200_p1s8pg6">6</a></div><div class="st200_paragraph">
        Expressions are assigned the identifiers
        <span class="st200_term expression">e₀</span> to
        <span class="st200_term expression">eₙ</span>, so terms of those forms
        are assumed to be evaluable expressions when they appear in rules.
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s8pg7" href="#st200_p1s8pg7">7</a></div><div class="st200_paragraph">
        The notation <span class="st200_term expression">e → e'</span> should be
        read "<span class="st200_term expression">e</span> evaluates to <span class="st200_term expression">e'</span>
        in a single step".
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s8pg8" href="#st200_p1s8pg8">8</a></div><div class="st200_paragraph">
        The <span class="st200_term variable">if_true</span> rule states that
        if the condition of an <span class="st200_term keyword">if</span> expression
        is exactly <span class="st200_term constant">true</span>, then the expression
        evaluates to the expression given in the left branch, in one step.
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s8pg9" href="#st200_p1s8pg9">9</a></div><div class="st200_paragraph">
        The <span class="st200_term variable">if_false</span> rule states that
        if the condition of an <span class="st200_term keyword">if</span> expression
        is exactly <span class="st200_term constant">false</span>, then the expression
        evaluates to the expression given in the right branch, in one step.
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s8pg10" href="#st200_p1s8pg10">10</a></div><div class="st200_paragraph">
        The <span class="st200_term variable">if_condition</span> rule states that
        if the condition of an <span class="st200_term keyword">if</span> expression
        is not a value, then the condition is evaluated first.
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s8pg11" href="#st200_p1s8pg11">11</a></div><div class="st200_paragraph">
        The example expression given earlier can now be evaluated completely
        and deterministically by following the given rules:
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p1s8fo4" href="#st200_p1s8fo4">1.8.4. Conditionals example evaluation</a></div><pre class="st200_verbatim">if true then
  if false then
    true
  else
    if
      if true then
        false
      else
        true
      end
    then
      false
    else
      true
    end
  end
else
  true
end

→ by if_true to:

if false then
  true
else
  if
    if true then
      false
    else
      true
    end
  then
    false
  else
    true
  end
end

→ by if_false to:

if
  if true then
    false
  else
    true
  end
then
  false
else
  true
end

→ by if_condition to:

if
  false
then
  false
else
  true
end

→ by if_false to:

true
</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s8pg12" href="#st200_p1s8pg12">12</a></div><div class="st200_paragraph">
        The <span class="st200_term term">substitution</span> notation
        <span class="st200_term expression">e [x := y]</span> denotes
        the expression <span class="st200_term expression">e</span> where all
        occurences (if any) of the variable <span class="st200_term variable">x</span>
        have been replaced with <span class="st200_term variable">y</span>. This
        is used, for example, to describe function evaluation:
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p1s8fo5" href="#st200_p1s8fo5">1.8.5. Function semantics</a></div><img class="st200_image" alt="Function semantics" src="png/semantics_example2.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s8pg13" href="#st200_p1s8pg13">13</a></div><div class="st200_paragraph">
        The <span class="st200_term variable">function_eval_0</span> and
        <span class="st200_term variable">function_eval_1</span> rules state that
        expressions are evaluated from left-to-right when applying
        <span class="st200_term expression">f</span> to a pair of arguments.
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s8pg14" href="#st200_p1s8pg14">14</a></div><div class="st200_paragraph">
        The <span class="st200_term variable">function_eval_2</span> rule states
        that when all of the expressions passed to <span class="st200_term expression">f</span>
        have been reduced to values, the expression as a whole evaluates to
        the body of <span class="st200_term expression">f</span>, called
        <span class="st200_term expression">e</span>, with occurrences of
        the arguments <span class="st200_term variable">x</span> and
        <span class="st200_term variable">y</span> in
        <span class="st200_term expression">e</span> substituted with their
        values.
      </div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s9" href="#st200_p1s9">1.9</a></div><div class="st200_section_title">OpenGL</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s9pg1" href="#st200_p1s9pg1">1</a></div><div class="st200_paragraph">
        As the <span class="st200_term package">parasol</span> language is intended
        to be executed on programmable GPUs, familiarity with OpenGL and
        the OpenGL shading language is assumed.
      </div></div></div></div><div class="st200_part_container"><div class="st200_part_title_number"><a id="st200_p2" href="#st200_p2">2</a></div><div class="st200_part_title">Lexical Conventions</div><ul class="st200_contents st200_part_contents_outer st200_part_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p2s1">2.1. Units</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p2s2">2.2. Character set</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p2s3">2.3. Whitespace</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p2s4">2.4. Comments</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p2s5">2.5. Tokens</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s5ss1">2.5.1. Integer literals</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s5ss2">2.5.2. Real literals</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s5ss3">2.5.3. Boolean literals</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s5ss4">2.5.4. Identifiers</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s5ss5">2.5.5. Keywords</a></li></ul></li></ul><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p2s1" href="#st200_p2s1">2.1</a></div><div class="st200_section_title">Units</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1pg1" href="#st200_p2s1pg1">1</a></div><div class="st200_paragraph">
        The text of a <span class="st200_term package">parasol</span> program is a combination
        of the texts of separate <span class="st200_term term">units</span>, where a
        <span class="st200_term term">unit</span> typically corresponds to a file in the
        operating system under which the compiler is running.
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1pg2" href="#st200_p2s1pg2">2</a></div><div class="st200_paragraph">
        Units consist of a series of lexical <span class="st200_term term">tokens</span>
        separated by
        <a class="st200_link" href="#st200_p2s3">whitespace</a>.
        What constitutes a <span class="st200_term term">token</span> is the subject of
        the following sections.
      </div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p2s2" href="#st200_p2s2">2.2</a></div><div class="st200_section_title">Character set</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2pg1" href="#st200_p2s2pg1">1</a></div><div class="st200_paragraph">
        The character set used for <span class="st200_term package">parasol</span>
        program source code is UTF-8. Inside of
        <a class="st200_link" href="#st200_p2s4">comments</a>,
        any Unicode character is permitted. Outside of comments, the subset
        of UTF-8 permitted for use in programs is detailed in the following
        sections.
      </div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p2s3" href="#st200_p2s3">2.3</a></div><div class="st200_section_title">Whitespace</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s3pg1" href="#st200_p2s3pg1">1</a></div><div class="st200_paragraph">
        The following characters are considered to be whitespace:
      </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p2s3fo1" href="#st200_p2s3fo1">2.3.1. Whitespace</a></div><table class="st200_table" summary="Whitespace characters"><thead class="st200_table_head"><tr><th class="st200_table_column_name">Codepoint</th><th class="st200_table_column_name">Name</th></tr></thead><tbody class="st200_table_body"><tr class="st200_table_row"><td class="st200_table_cell">U+0009</td><td class="st200_table_cell">Horizontal tab</td></tr><tr class="st200_table_row"><td class="st200_table_cell">U+000A</td><td class="st200_table_cell">Line feed</td></tr><tr class="st200_table_row"><td class="st200_table_cell">U+000C</td><td class="st200_table_cell">Form feed</td></tr><tr class="st200_table_row"><td class="st200_table_cell">U+000D</td><td class="st200_table_cell">Carriage return</td></tr><tr class="st200_table_row"><td class="st200_table_cell">U+0020</td><td class="st200_table_cell">Space</td></tr></tbody></table></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s3pg2" href="#st200_p2s3pg2">2</a></div><div class="st200_paragraph">
        Lines of source are separated with <span class="st200_term term">line_separator</span>, which
        may be any of the following:
      </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p2s3fo2" href="#st200_p2s3fo2">2.3.2. Line separators</a></div><table class="st200_table" summary="Line separators"><thead class="st200_table_head"><tr><th class="st200_table_column_name">Codepoint(s)</th><th class="st200_table_column_name">Name</th></tr></thead><tbody class="st200_table_body"><tr class="st200_table_row"><td class="st200_table_cell">U+000A</td><td class="st200_table_cell">Line feed</td></tr><tr class="st200_table_row"><td class="st200_table_cell">U+000D</td><td class="st200_table_cell">Carriage return</td></tr><tr class="st200_table_row"><td class="st200_table_cell">U+000D U+000A</td><td class="st200_table_cell">Carriage return immediately followed by line feed</td></tr></tbody></table></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p2s4" href="#st200_p2s4">2.4</a></div><div class="st200_section_title">Comments</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s4pg1" href="#st200_p2s4pg1">1</a></div><div class="st200_paragraph">
        A <span class="st200_term term">comment</span> starts with <span class="st200_term constant">--</span>
        (two adjacent <span class="st200_term constant">U+002D</span> characters) and extends to
        the end of the line. Comments may appear on any line in a
        <a class="st200_link" href="#st200_p2s1">unit</a>.
        The contents of comments have no effect whatsoever on the semantics of
        <span class="st200_term package">parasol</span> programs.
      </div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p2s5" href="#st200_p2s5">2.5</a></div><div class="st200_section_title">Tokens</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s5ss1" href="#st200_p2s5ss1">2.5.1</a></div><div class="st200_subsection_title">Integer literals</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s5ss1pg1" href="#st200_p2s5ss1pg1">1</a></div><div class="st200_paragraph">
        An <span class="st200_term term">integer_literal</span> is a sequence
        of one or more digits, optionally preceded by a minus sign
        (<span class="st200_term constant">U+002D</span>), representing
        a decimal integer. The precise syntax is given by the following EBNF:
      </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p2s5ss1fo1" href="#st200_p2s5ss1fo1">2.5.1.1. Integer literals</a></div><pre class="st200_verbatim">digit_nonzero =
  "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

digit =
  "0" | digit_nonzero ;

integer =
  "0" | ( ["-"] , digit_nonzero , { digit } ) ;</pre></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s5ss2" href="#st200_p2s5ss2">2.5.2</a></div><div class="st200_subsection_title">Real literals</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s5ss2pg1" href="#st200_p2s5ss2pg1">1</a></div><div class="st200_paragraph">
        A <span class="st200_term term">real_literal</span> consists of
        an integral and fractional part, separated by a dot
        (<span class="st200_term constant">U+002E</span>) and optionally
        preceded by a minus sign (<span class="st200_term constant">U+002D</span>),
        and represents a real number. The precise syntax is given by
        the following EBNF:
      </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p2s5ss2fo1" href="#st200_p2s5ss2fo1">2.5.2.1. Real literals</a></div><pre class="st200_verbatim">real =
  ["-"] , digit , { digit } , "." , digit , { digit } ;</pre></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s5ss3" href="#st200_p2s5ss3">2.5.3</a></div><div class="st200_subsection_title">Boolean literals</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s5ss3pg1" href="#st200_p2s5ss3pg1">1</a></div><div class="st200_paragraph">
        A <span class="st200_term term">boolean_literal</span> is either
        <span class="st200_term constant">true</span> or
        <span class="st200_term constant">false</span>. The precise syntax is
        given by  the following EBNF:
      </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p2s5ss3fo1" href="#st200_p2s5ss3fo1">2.5.3.1. Boolean literals</a></div><pre class="st200_verbatim">boolean_literal =
  "true" | "false" ;</pre></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s5ss4" href="#st200_p2s5ss4">2.5.4</a></div><div class="st200_subsection_title">Identifiers</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s5ss4pg1" href="#st200_p2s5ss4pg1">1</a></div><div class="st200_paragraph">
        Identifiers are sequences of uppercase letters
        (<span class="st200_term constant">[U+0041, U+005A]</span>), lowercase
        letters (<span class="st200_term constant">[U+0061, U+007A]</span>),
        and underscores (<span class="st200_term constant">U+005F</span>). An
        identifier is uppercase iff its first character is an uppercase
        letter, or lowercase iff its first character is a lowercase letter.
        Identifiers cannot begin with underscores or digits. The precise
        syntax is given by the following EBNF:
      </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p2s5ss4fo1" href="#st200_p2s5ss4fo1">2.5.4.1. Identifiers</a></div><pre class="st200_verbatim">letter_lower =
  "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" |
  "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" |
  "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" |
  "y" | "z" ;

letter_upper =
  "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" |
  "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" |
  "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" |
  "Y" | "Z" ;

letter =
  letter_lower | letter_upper ;

name_lower =
  letter_lower , { letter | digit | "-" | "_" } ;

name_upper =
  letter_upper , { letter | digit | "-" | "_" } ;</pre></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s5ss5" href="#st200_p2s5ss5">2.5.5</a></div><div class="st200_subsection_title">Keywords</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s5ss5pg1" href="#st200_p2s5ss5pg1">1</a></div><div class="st200_paragraph">
        All of the following character sequences are reserved as keywords
        and cannot be used otherwise:
      </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p2s5ss5fo1" href="#st200_p2s5ss5fo1">2.5.5.1. Keywords</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><span class="st200_term keyword">:</span> (<span class="st200_term constant">U+003A</span>)</li><li class="st200_list_item"><span class="st200_term keyword">,</span> (<span class="st200_term constant">U+002C</span>)</li><li class="st200_list_item"><span class="st200_term keyword">{</span> (<span class="st200_term constant">U+007B</span>)</li><li class="st200_list_item"><span class="st200_term keyword">}</span> (<span class="st200_term constant">U+007D</span>)</li><li class="st200_list_item"><span class="st200_term keyword">.</span> (<span class="st200_term constant">U+002E</span>)</li><li class="st200_list_item"><span class="st200_term keyword">=</span> (<span class="st200_term constant">U+003D</span>)</li><li class="st200_list_item"><span class="st200_term keyword">(</span> (<span class="st200_term constant">U+0028</span>)</li><li class="st200_list_item"><span class="st200_term keyword">)</span> (<span class="st200_term constant">U+0029</span>)</li><li class="st200_list_item"><span class="st200_term keyword">;</span> (<span class="st200_term constant">U+003B</span>)</li><li class="st200_list_item"><span class="st200_term keyword">[</span> (<span class="st200_term constant">U+005B</span>)</li><li class="st200_list_item"><span class="st200_term keyword">]</span> (<span class="st200_term constant">U+005D</span>)</li><li class="st200_list_item"><span class="st200_term keyword">as</span></li><li class="st200_list_item"><span class="st200_term keyword">column</span></li><li class="st200_list_item"><span class="st200_term keyword">depth</span></li><li class="st200_list_item"><span class="st200_term keyword">discard</span></li><li class="st200_list_item"><span class="st200_term keyword">else</span></li><li class="st200_list_item"><span class="st200_term keyword">end</span></li><li class="st200_list_item"><span class="st200_term keyword">false</span></li><li class="st200_list_item"><span class="st200_term keyword">fragment</span></li><li class="st200_list_item"><span class="st200_term keyword">function</span></li><li class="st200_list_item"><span class="st200_term keyword">if</span></li><li class="st200_list_item"><span class="st200_term keyword">import</span></li><li class="st200_list_item"><span class="st200_term keyword">in</span></li><li class="st200_list_item"><span class="st200_term keyword">is</span></li><li class="st200_list_item"><span class="st200_term keyword">let</span></li><li class="st200_list_item"><span class="st200_term keyword">module</span></li><li class="st200_list_item"><span class="st200_term keyword">new</span></li><li class="st200_list_item"><span class="st200_term keyword">out</span></li><li class="st200_list_item"><span class="st200_term keyword">package</span></li><li class="st200_list_item"><span class="st200_term keyword">parameter</span></li><li class="st200_list_item"><span class="st200_term keyword">program</span></li><li class="st200_list_item"><span class="st200_term keyword">record</span></li><li class="st200_list_item"><span class="st200_term keyword">shader</span></li><li class="st200_list_item"><span class="st200_term keyword">then</span></li><li class="st200_list_item"><span class="st200_term keyword">true</span></li><li class="st200_list_item"><span class="st200_term keyword">type</span></li><li class="st200_list_item"><span class="st200_term keyword">value</span></li><li class="st200_list_item"><span class="st200_term keyword">vertex</span></li><li class="st200_list_item"><span class="st200_term keyword">with</span></li></ul></div></div></div></div><div class="st200_part_container"><div class="st200_part_title_number"><a id="st200_p3" href="#st200_p3">3</a></div><div class="st200_part_title">Declarations</div><ul class="st200_contents st200_part_contents_outer st200_part_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p3s1">3.1. Overview</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p3s2">3.2. Terms</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s2ss1">3.2.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s2ss2">3.2.2. Declarations</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s2ss3">3.2.3. Names</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s2ss4">3.2.4. Recursion</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s2ss5">3.2.5. Order of declarations</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s2ss6">3.2.6. Values</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s2ss7">3.2.7. Functions</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s2ss8">3.2.8. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s2ss9">3.2.9. Operational semantics</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s2ss10">3.2.10. Syntax</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s2ss11">3.2.11. Examples</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p3s3">3.3. Types</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s3ss1">3.3.1. Declarations</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s3ss2">3.3.2. Names</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s3ss3">3.3.3. Recursion</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s3ss4">3.3.4. Records</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s3ss5">3.3.5. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s3ss6">3.3.6. Syntax</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s3ss7">3.3.7. Examples</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p3s4">3.4. Shaders</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s4ss1">3.4.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s4ss2">3.4.2. Declarations</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s4ss3">3.4.3. Names</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s4ss4">3.4.4. Inputs/Outputs/Parameters</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s4ss5">3.4.5. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s4ss6">3.4.6. Syntax</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p3s5">3.5. Vertex shaders</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s5ss1">3.5.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s5ss2">3.5.2. Declarations</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s5ss3">3.5.3. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s5ss4">3.5.4. Operational Semantics</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s5ss5">3.5.5. Examples</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p3s6">3.6. Fragment shaders</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s6ss1">3.6.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s6ss2">3.6.2. Declarations</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s6ss3">3.6.3. Discard</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s6ss4">3.6.4. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s6ss5">3.6.5. Operational Semantics</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s6ss6">3.6.6. Examples</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p3s7">3.7. Programs</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s7ss1">3.7.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s7ss2">3.7.2. Declarations</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s7ss3">3.7.3. Compatibility</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s7ss4">3.7.4. Examples</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p3s8">3.8. Modules</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s8ss1">3.8.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s8ss2">3.8.2. Declarations</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s8ss3">3.8.3. Names</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s8ss4">3.8.4. Imports</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s8ss5">3.8.5. Recursion</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s8ss6">3.8.6. Syntax</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p3s9">3.9. Packages</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s9ss1">3.9.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s9ss2">3.9.2. Declarations</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p3s9ss3">3.9.3. Syntax</a></li></ul></li></ul><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p3s1" href="#st200_p3s1">3.1</a></div><div class="st200_section_title">Overview</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s1pg1" href="#st200_p3s1pg1">1</a></div><div class="st200_paragraph">
        The <span class="st200_term package">parasol</span> language
        consists of <a class="st200_link" href="#st200_p3s2">terms</a>,
        <a class="st200_link" href="#st200_p3s3">types</a>, and
        <a class="st200_link" href="#st200_p3s4">shaders</a>, which are
        organized into
        <a class="st200_link" href="#st200_p3s8">modules</a>
        (which are further organized into
        <a class="st200_link" href="#st200_p3s9">packages</a>).
      </div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p3s2" href="#st200_p3s2">3.2</a></div><div class="st200_section_title">Terms</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s2ss1" href="#st200_p3s2ss1">3.2.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss1pg1" href="#st200_p3s2ss1pg1">1</a></div><div class="st200_paragraph">
          <span class="st200_term term">Terms</span> are the computational elements
          of the <span class="st200_term package">parasol</span> language. They consist
          of <a class="st200_link" href="#st200_p3s2ss6">values</a>,
          which effectively give names to expressions, and
          <a class="st200_link" href="#st200_p3s2ss7">functions</a>,
          which are named computational rules in the mathematical sense.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s2ss2" href="#st200_p3s2ss2">3.2.2</a></div><div class="st200_subsection_title">Declarations</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss2pg1" href="#st200_p3s2ss2pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">term_declaration</span> may either be a
          <a class="st200_link" href="#st200_p3s2ss6">value_declaration</a>
          or a
          <a class="st200_link" href="#st200_p3s2ss7">function_declaration</a>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s2ss3" href="#st200_p3s2ss3">3.2.3</a></div><div class="st200_subsection_title">Names</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss3pg1" href="#st200_p3s2ss3pg1">1</a></div><div class="st200_paragraph">
          The names selected for terms must be unique with respect to
          other terms within the <a class="st200_link" href="#st200_p3s8">module</a>
          in which they are defined. That is, there cannot be two terms with the same name
          in the same module. Terms do not share a name space with
          <a class="st200_link" href="#st200_p3s3">types</a>
          or <a class="st200_link" href="#st200_p3s4">shaders</a>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss3pg2" href="#st200_p3s2ss3pg2">2</a></div><div class="st200_paragraph">
          The following restrictions apply when naming terms:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p3s2ss3fo1" href="#st200_p3s2ss3fo1">3.2.3.1. Name restrictions</a></div><ul class="st200_list_unordered"><li class="st200_list_item">
              Term names must begin with a <span class="st200_term term">lowercase</span>
              letter. This is directly implied by the
              <a class="st200_link" href="#st200_p3s2ss10">grammar</a>.
            </li><li class="st200_list_item">
              Names cannot contain two adjacent underscores (<span class="st200_term constant">U+005F</span>).
            </li><li class="st200_list_item">
              Names cannot end with underscores (<span class="st200_term constant">U+005F</span>).
            </li><li class="st200_list_item">
              Names cannot start with the character sequence "<span class="st200_term constant">gl_</span>"
              (<span class="st200_term constant">U+0067</span>,
               <span class="st200_term constant">U+006C</span>,
               <span class="st200_term constant">U+005F</span>).
            </li><li class="st200_list_item">
              Names cannot match any of the keywords or reserved words defined in
              any version of the OpenGL shading language. See the
              <a class="st200_link" href="#st200_p8s4">GLSL identifiers</a>
              section for the complete list.
            </li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s2ss4" href="#st200_p3s2ss4">3.2.4</a></div><div class="st200_subsection_title">Recursion</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss4pg1" href="#st200_p3s2ss4pg1">1</a></div><div class="st200_paragraph">
          No <span class="st200_term term">term_declaration</span> can be <span class="st200_term term">recursive</span>
          with respect to itself or any other <span class="st200_term term">term_declaration</span>
          in the <a class="st200_link" href="#st200_p3s8">module</a>
          in which it appears.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss4pg2" href="#st200_p3s2ss4pg2">2</a></div><div class="st200_paragraph">
          A term <span class="st200_term variable">d₀</span> is said to
          <span class="st200_term term">refer statically</span> to a
          term <span class="st200_term variable">d₁</span> if
          the <span class="st200_term term">free variables</span> of <span class="st200_term variable">d₀</span>
          contain the name of <span class="st200_term variable">d₁</span>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss4pg3" href="#st200_p3s2ss4pg3">3</a></div><div class="st200_paragraph">
          A <span class="st200_term term">term_declaration</span> <span class="st200_term variable">d</span>
          is (mutually) <span class="st200_term term">recursive</span> iff:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p3s2ss4fo1" href="#st200_p3s2ss4fo1">3.2.4.1. Recursion conditions</a></div><ul class="st200_list_unordered"><li class="st200_list_item">
              <span class="st200_term variable">d</span> refers statically to itself.
            </li><li class="st200_list_item">
              There is a sequence of terms <span class="st200_term expression">t₀, t₁, ..., tₙ</span>
              such that <span class="st200_term variable">d</span> refers statically to
              <span class="st200_term variable">t₀</span>, and
              for all <span class="st200_term variable">m</span> where <span class="st200_term expression">0 &lt;= m &lt; n</span>,
              <span class="st200_term variable">tₘ</span> refers statically
              <span class="st200_term expression">t₍ₘ₊₁₎</span>, and
              <span class="st200_term variable">tₙ</span> refers statically to
              <span class="st200_term variable">d</span>.
            </li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s2ss5" href="#st200_p3s2ss5">3.2.5</a></div><div class="st200_subsection_title">Order of declarations</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss5pg1" href="#st200_p3s2ss5pg1">1</a></div><div class="st200_paragraph">
          For the purposes of sorting term declarations based on their
          dependencies, terms can be <span class="st200_term term">partially ordered</span>
          based on the terms to which they refer statically. That is, if
          a term <span class="st200_term variable">t₀</span> refers statically to
          term <span class="st200_term variable">t₁</span>, then
          <span class="st200_term expression">t₁ &lt; t₀</span>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss5pg2" href="#st200_p3s2ss5pg2">2</a></div><div class="st200_paragraph">
          Terms do not have to be declared in any given order. That is,
          if a term <span class="st200_term variable">t₀</span> refers statically
          to term <span class="st200_term variable">t₁</span> in the same module,
          there is no requirement that <span class="st200_term variable">t₁</span>
          be declared before <span class="st200_term variable">t₀</span>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss5pg3" href="#st200_p3s2ss5pg3">3</a></div><div class="st200_paragraph">
          Terms are sorted topologically prior to any evaluation based
          on the given partial order relation, and the
          restrictions on
          <a class="st200_link" href="#st200_p3s2ss4">recursion</a>
          ensure that it is always possible to sort terms in the order
          of their dependencies.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s2ss6" href="#st200_p3s2ss6">3.2.6</a></div><div class="st200_subsection_title">Values</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss6pg1" href="#st200_p3s2ss6pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">value_declaration</span> binds an
          <a class="st200_link" href="#st200_p4">expression</a>
          to a name.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss6pg2" href="#st200_p3s2ss6pg2">2</a></div><div class="st200_paragraph">
          The <a class="st200_link" href="#st200_p5">type</a> of
          the <span class="st200_term term">value_declaration</span> will be inferred
          from the given expression, but the declaration can be optionally ascribed
          with the name of a type, in which case the type of the expression will be
          checked against the ascription and an error raised in the case of a
          mismatch.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s2ss7" href="#st200_p3s2ss7">3.2.7</a></div><div class="st200_subsection_title">Functions</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss7pg1" href="#st200_p3s2ss7pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">function_declaration</span> binds an
          <a class="st200_link" href="#st200_p4">expression</a>
          <span class="st200_term variable">e</span> to a name along with a given
          <span class="st200_term term">return type</span>
          <span class="st200_term variable">t</span>
          and a set of <span class="st200_term term">formal parameters</span>,
          where <span class="st200_term variable">e</span> contains zero or more
          variables bound by the formal parameters and which, when
          evaluated, will result in a value of type <span class="st200_term variable">t</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s2ss8" href="#st200_p3s2ss8">3.2.8</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss8pg1" href="#st200_p3s2ss8pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">value_declaration</span> of type
          <span class="st200_term variable">t</span> introduces a term of type
          <span class="st200_term variable">t</span> into the environment:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s2ss8fo1" href="#st200_p3s2ss8fo1">3.2.8.1. Value declaration type rule (value_declaration)</a></div><img class="st200_image" alt="Value declaration type rule (value_declaration)" src="png/ty_value_declaration.png"/></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s2ss8fo2" href="#st200_p3s2ss8fo2">3.2.8.2. Value declaration (ascribed) type rule (value_declaration_ascribed)</a></div><img class="st200_image" alt="Value declaration (ascribed) type rule (value_declaration_ascribed)" src="png/ty_value_declaration_ascribed.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss8pg2" href="#st200_p3s2ss8pg2">2</a></div><div class="st200_paragraph">
          A <span class="st200_term term">function_declaration</span> with parameters of type
          <span class="st200_term expression">(s₀ ✕ s₁ ✕ ... sₙ)</span> that returns type
          <span class="st200_term variable">u</span> introduces a term of type
          <span class="st200_term variable">(s₀ ✕ s₁ ✕ ... sₙ) → u</span> into the environment:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s2ss8fo3" href="#st200_p3s2ss8fo3">3.2.8.3. Function declaration type rule (function_declaration)</a></div><img class="st200_image" alt="Function declaration type rule (function_declaration)" src="png/ty_function_declaration.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s2ss9" href="#st200_p3s2ss9">3.2.9</a></div><div class="st200_subsection_title">Operational semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss9pg1" href="#st200_p3s2ss9pg1">1</a></div><div class="st200_paragraph">
          With terms sorted according to their
          <a class="st200_link" href="#st200_p3s2ss5">partial order</a>,
          evaluation of <span class="st200_term term">value_declarations</span>
          in the current <a class="st200_link" href="#st200_p3s8">module</a>
          proceeds from top-to-bottom, with the value of each evaluated
          <span class="st200_term term">value_declaration</span> being
          substituted into the terms that follow it:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s2ss9fo1" href="#st200_p3s2ss9fo1">3.2.9.1. Top level evaluation (top_level)</a></div><img class="st200_image" alt="Top level evaluation (top_level)" src="png/op_top_level.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s2ss10" href="#st200_p3s2ss10">3.2.10</a></div><div class="st200_subsection_title">Syntax</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s2ss10pg1" href="#st200_p3s2ss10pg1">1</a></div><div class="st200_paragraph">
          The precise syntax of <span class="st200_term term">term_declarations</span>
          is given by the following EBNF:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p3s2ss10fo1" href="#st200_p3s2ss10fo1">3.2.10.1. Term declaration syntax</a></div><pre class="st200_verbatim">type_path =
    name_lower
  | name_upper , "." , name_lower ;

value_declaration =
  "value" , name_lower , [ ":" , type_path ] , "=" , expression ;

function_formal_parameter =
  name_lower , ":" , type_path ;

function_formal_parameters =
  "(" , function_formal_parameter, { "," , function_formal_parameter } , ")" ;

function_declaration =
  "function" , name_lower , function_formal_parameters , ":" , type_path , "=" , expression ;

term_declaration =
  value_declaration | function_declaration ;</pre></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s2ss11" href="#st200_p3s2ss11">3.2.11</a></div><div class="st200_subsection_title">Examples</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s2ss11fo1" href="#st200_p3s2ss11fo1">3.2.11.1. Examples</a></div><pre class="st200_verbatim">value x = 23;

value y = I.plus x 24;

function identity (
  x : integer
) : integer = x;</pre></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p3s3" href="#st200_p3s3">3.3</a></div><div class="st200_section_title">Types</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s3ss1" href="#st200_p3s3ss1">3.3.1</a></div><div class="st200_subsection_title">Declarations</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s3ss1pg1" href="#st200_p3s3ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">type_declaration</span> declares
          a new
          <a class="st200_link" href="#st200_p3s3ss4">record type</a>.
          This section documents the declarations themselves, while the
          <a class="st200_link" href="#st200_p5">types</a>
          section documents the actual type system itself.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s3ss2" href="#st200_p3s3ss2">3.3.2</a></div><div class="st200_subsection_title">Names</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s3ss2pg1" href="#st200_p3s3ss2pg1">1</a></div><div class="st200_paragraph">
          The names selected for types must be unique with respect to
          other types within the <a class="st200_link" href="#st200_p3s8">module</a>
          in which they are defined. That is, there cannot be two types with the same name
          in the same module. Types do not share a name space with
          <a class="st200_link" href="#st200_p3s2">terms</a>
          or <a class="st200_link" href="#st200_p3s4">shaders</a>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s3ss2pg2" href="#st200_p3s3ss2pg2">2</a></div><div class="st200_paragraph">
          The following restrictions apply when naming types:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p3s3ss2fo1" href="#st200_p3s3ss2fo1">3.3.2.1. Name restrictions</a></div><ul class="st200_list_unordered"><li class="st200_list_item">
              Type names must begin with a <span class="st200_term term">lowercase</span>
              letter. This is directly implied by the
              <a class="st200_link" href="#st200_p3s3ss6">grammar</a>.
            </li><li class="st200_list_item">
              Names cannot contain two adjacent underscores (<span class="st200_term constant">U+005F</span>).
            </li><li class="st200_list_item">
              Names cannot end with underscores (<span class="st200_term constant">U+005F</span>).
            </li><li class="st200_list_item">
              Names cannot start with the character sequence "<span class="st200_term constant">gl_</span>"
              (<span class="st200_term constant">U+0067</span>,
               <span class="st200_term constant">U+006C</span>,
               <span class="st200_term constant">U+005F</span>).
            </li><li class="st200_list_item">
              Names cannot match any of the keywords or reserved words defined in
              any version of the OpenGL shading language. See the
              <a class="st200_link" href="#st200_p8s4">GLSL identifiers</a>
              section for the complete list.
            </li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s3ss3" href="#st200_p3s3ss3">3.3.3</a></div><div class="st200_subsection_title">Recursion</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s3ss3pg1" href="#st200_p3s3ss3pg1">1</a></div><div class="st200_paragraph">
          No <span class="st200_term term">type_declaration</span> can be <span class="st200_term term">recursive</span>
          with respect to itself or any other <span class="st200_term term">type_declaration</span>
          in the <a class="st200_link" href="#st200_p3s8">module</a>
          in which it appears.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s3ss3pg2" href="#st200_p3s3ss3pg2">2</a></div><div class="st200_paragraph">
          A type <span class="st200_term variable">d₀</span> is said to
          <span class="st200_term term">refer statically</span> to a
          type <span class="st200_term variable">d₁</span> if
          <span class="st200_term variable">d₀</span> appears anywhere in the
          definition of <span class="st200_term variable">d₁</span>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s3ss3pg3" href="#st200_p3s3ss3pg3">3</a></div><div class="st200_paragraph">
          A <span class="st200_term term">type_declaration</span> <span class="st200_term variable">d</span>
          is (mutually) <span class="st200_term term">recursive</span> iff:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p3s3ss3fo1" href="#st200_p3s3ss3fo1">3.3.3.1. Recursion conditions</a></div><ul class="st200_list_unordered"><li class="st200_list_item">
              <span class="st200_term variable">d</span> refers statically to itself.
            </li><li class="st200_list_item">
              There is a sequence of types <span class="st200_term expression">t₀, t₁, ..., tₙ</span>
              such that <span class="st200_term variable">d</span> refers statically to
              <span class="st200_term variable">t₀</span>, and
              for all <span class="st200_term variable">m</span> where <span class="st200_term expression">0 &lt;= m &lt; n</span>,
              <span class="st200_term variable">tₘ</span> refers statically
              <span class="st200_term expression">t₍ₘ₊₁₎</span>, and
              <span class="st200_term variable">tₙ</span> refers statically to
              <span class="st200_term variable">d</span>.
            </li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s3ss4" href="#st200_p3s3ss4">3.3.4</a></div><div class="st200_subsection_title">Records</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s3ss4pg1" href="#st200_p3s3ss4pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">type_declaration</span> binds a
          <span class="st200_term term">record_type_expression</span> to a name.
          A <span class="st200_term term">record_type_expression</span> declares
          a set of named <span class="st200_term term">fields</span> and types.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s3ss4pg2" href="#st200_p3s3ss4pg2">2</a></div><div class="st200_paragraph">
          A <span class="st200_term term">record_type_expression</span> cannot
          contain two <span class="st200_term term">fields</span> with the
          same name, but two distinct
          <span class="st200_term term">record_type_expressions</span> can have
          <span class="st200_term term">fields</span> with the same names. To
          clarify, these are valid <span class="st200_term term">type_declarations</span>:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s3ss4fo1" href="#st200_p3s3ss4fo1">3.3.4.1. Valid type declarations</a></div><pre class="st200_verbatim">type t is record
  x : integer,
  y : integer
end;

type u is record
  x : integer,
  y : integer
end;</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s3ss4pg3" href="#st200_p3s3ss4pg3">3</a></div><div class="st200_paragraph">
          However, this is not:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s3ss4fo2" href="#st200_p3s3ss4fo2">3.3.4.2. Invalid type declarations (duplicate field)</a></div><pre class="st200_verbatim">type t is record
  x : integer,
  x : integer
end;</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s3ss4pg4" href="#st200_p3s3ss4pg4">4</a></div><div class="st200_paragraph">
          As described in the <a class="st200_link" href="#st200_p5">types</a>
          section, types have <span class="st200_term term">by-name equivalence</span> and
          therefore two identical <span class="st200_term term">record_type_expressions</span>
          bound to different names are not type-compatible.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s3ss5" href="#st200_p3s3ss5">3.3.5</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s3ss5pg1" href="#st200_p3s3ss5pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">type_declaration</span> introduces a new record
          type into the typing environment. See the rules for
          <a class="st200_link" href="#st200_p5s9">record types</a>
          for the effects that this has on typing rules.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s3ss6" href="#st200_p3s3ss6">3.3.6</a></div><div class="st200_subsection_title">Syntax</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s3ss6pg1" href="#st200_p3s3ss6pg1">1</a></div><div class="st200_paragraph">
          The precise syntax of type declarations is given by the following
          EBNF:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p3s3ss6fo1" href="#st200_p3s3ss6fo1">3.3.6.1. Type declaration syntax</a></div><pre class="st200_verbatim">record_type_field =
  name_lower , ":" , type_path ;

record_type_expression =
  "record" , record_type_field , { "," , record_type_field } , "end" ;

type_declaration =
  "type" , name_lower , "is" , type_expression ;

type_expression =
  record_type_expression
  ;
        </pre></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s3ss7" href="#st200_p3s3ss7">3.3.7</a></div><div class="st200_subsection_title">Examples</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s3ss7fo1" href="#st200_p3s3ss7fo1">3.3.7.1. Examples</a></div><pre class="st200_verbatim">
type t is record
  x : integer,
  y : integer,
  z : integer
end;

type u is record
  v0 : t,
  v1 : t,
  v2 : t
end;</pre></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p3s4" href="#st200_p3s4">3.4</a></div><div class="st200_section_title">Shaders</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s4ss1" href="#st200_p3s4ss1">3.4.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s4ss1pg1" href="#st200_p3s4ss1pg1">1</a></div><div class="st200_paragraph">
          <span class="st200_term term">Shaders</span> represent programs
          that will execute on the targeted graphics hardware. They
          are divided into
          <a class="st200_link" href="#st200_p3s5">vertex shaders</a>,
          <a class="st200_link" href="#st200_p3s6">fragment shaders</a>,
          and
          <a class="st200_link" href="#st200_p3s7">programs</a>,
          (which essentially aggregate other shaders into usable programs).
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s4ss2" href="#st200_p3s4ss2">3.4.2</a></div><div class="st200_subsection_title">Declarations</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s4ss2pg1" href="#st200_p3s4ss2pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">shader_declaration</span> may either be a
          <a class="st200_link" href="#st200_p3s5">shader_vertex_declaration</a>,
          a
          <a class="st200_link" href="#st200_p3s6">shader_fragment_declaration</a>,
          or a
          <a class="st200_link" href="#st200_p3s7">shader_program_declaration</a>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s4ss3" href="#st200_p3s4ss3">3.4.3</a></div><div class="st200_subsection_title">Names</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s4ss3pg1" href="#st200_p3s4ss3pg1">1</a></div><div class="st200_paragraph">
          The names selected for shaders must be unique with respect to
          other shaders within the <a class="st200_link" href="#st200_p3s8">module</a>
          in which they are defined. That is, there cannot be two shaders with the same name
          in the same module. Shaders do not share a name space with
          <a class="st200_link" href="#st200_p3s2">terms</a>
          or <a class="st200_link" href="#st200_p3s3">types</a>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s4ss3pg2" href="#st200_p3s4ss3pg2">2</a></div><div class="st200_paragraph">
          The following restrictions apply when naming shaders:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p3s4ss3fo1" href="#st200_p3s4ss3fo1">3.4.3.1. Name restrictions</a></div><ul class="st200_list_unordered"><li class="st200_list_item">
              Shader names must begin with a <span class="st200_term term">lowercase</span>
              letter. This is directly implied by the
              <a class="st200_link" href="#st200_p3s4ss6">grammar</a>.
            </li><li class="st200_list_item">
              Names cannot contain two adjacent underscores (<span class="st200_term constant">U+005F</span>).
            </li><li class="st200_list_item">
              Names cannot end with underscores (<span class="st200_term constant">U+005F</span>).
            </li><li class="st200_list_item">
              Names cannot start with the character sequence "<span class="st200_term constant">gl_</span>"
              (<span class="st200_term constant">U+0067</span>,
               <span class="st200_term constant">U+006C</span>,
               <span class="st200_term constant">U+005F</span>).
            </li><li class="st200_list_item">
              Names cannot match any of the keywords or reserved words defined in
              any version of the OpenGL shading language. See the
              <a class="st200_link" href="#st200_p8s4">GLSL identifiers</a>
              section for the complete list.
            </li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s4ss4" href="#st200_p3s4ss4">3.4.4</a></div><div class="st200_subsection_title">Inputs/Outputs/Parameters</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s4ss4pg1" href="#st200_p3s4ss4pg1">1</a></div><div class="st200_paragraph">
          Shaders consume data from <span class="st200_term term">inputs</span>
          and <span class="st200_term term">parameters</span>, and produce data
          on <span class="st200_term term">outputs</span>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s4ss4pg2" href="#st200_p3s4ss4pg2">2</a></div><div class="st200_paragraph">
          <span class="st200_term term">Inputs</span> are data sources that produce
          values that may change every time the shader is executed (once
          per vertex for <span class="st200_term term">vertex shaders</span> and
          once per fragment for
          <span class="st200_term term">fragment shaders</span>).
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s4ss4pg3" href="#st200_p3s4ss4pg3">3</a></div><div class="st200_paragraph">
          <span class="st200_term term">Parameters</span> are data sources that
          produce values that may be constant over the entire lifetime
          of the program.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s4ss4pg4" href="#st200_p3s4ss4pg4">4</a></div><div class="st200_paragraph">
          <span class="st200_term term">Outputs</span> are data sinks that, when
          assigned values, pass those values to the next stage of the
          rendering pipeline. Typically,
          <span class="st200_term term">vertex shaders</span> linearly interpolate
          values written to <span class="st200_term term">outputs</span> and pass
          them on to the <span class="st200_term term">fragment shader</span>,
          and <span class="st200_term term">fragment shaders</span> send values
          written to <span class="st200_term term">outputs</span> to the
          <span class="st200_term term">framebuffer</span> for display.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s4ss4pg5" href="#st200_p3s4ss4pg5">5</a></div><div class="st200_paragraph">
          The following restrictions apply when naming
          <span class="st200_term term">inputs</span>, <span class="st200_term term">outputs</span>,
          and <span class="st200_term term">parameters</span>:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p3s4ss4fo1" href="#st200_p3s4ss4fo1">3.4.4.1. Name restrictions</a></div><ul class="st200_list_unordered"><li class="st200_list_item">
              Names must begin with a <span class="st200_term term">lowercase</span>
              letter. This is directly implied by the
              <a class="st200_link" href="#st200_p3s4ss6">grammar</a>.
            </li><li class="st200_list_item">
              Names cannot contain two adjacent underscores (<span class="st200_term constant">U+005F</span>).
            </li><li class="st200_list_item">
              Names cannot end with underscores (<span class="st200_term constant">U+005F</span>).
            </li><li class="st200_list_item">
              Names cannot start with the character sequence "<span class="st200_term constant">gl_</span>"
              (<span class="st200_term constant">U+0067</span>,
               <span class="st200_term constant">U+006C</span>,
               <span class="st200_term constant">U+005F</span>).
            </li><li class="st200_list_item">
              Names cannot match any of the keywords or reserved words defined in
              any version of the OpenGL shading language. See the
              <a class="st200_link" href="#st200_p8s4">GLSL identifiers</a>
              section for the complete list.
            </li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s4ss5" href="#st200_p3s4ss5">3.4.5</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s4ss5pg1" href="#st200_p3s4ss5pg1">1</a></div><div class="st200_paragraph">
          Only a subset of the available types are permitted
          for <span class="st200_term term">inputs</span>, and
          <span class="st200_term term">outputs</span>:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s4ss5fo1" href="#st200_p3s4ss5fo1">3.4.5.1. Input/Output types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link" href="#st200_p5s3">integer</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s4">float</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s6">vector_NT</a></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s4ss5pg2" href="#st200_p3s4ss5pg2">2</a></div><div class="st200_paragraph">
          <span class="st200_term term">Parameters</span> may be of any type
          <span class="st200_footnote_reference"><a id="st200_fn_4_ref" href="#st200_fn_4">[4]</a></span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s4ss6" href="#st200_p3s4ss6">3.4.6</a></div><div class="st200_subsection_title">Syntax</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s4ss6pg1" href="#st200_p3s4ss6pg1">1</a></div><div class="st200_paragraph">
          The precise syntax of shader declarations is given by the following
          EBNF:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p3s4ss6fo1" href="#st200_p3s4ss6fo1">3.4.6.1. Shader declaration syntax</a></div><pre class="st200_verbatim">shader_parameter_declaration =
  "parameter" , name_lower , ":" , type_path ;

shader_vertex_input_declaration =
  "in" , name_lower , ":" , type_path ;

shader_vertex_output_declaration =
  "out" , name_lower , ":" , type_path ;

shader_vertex_output_declaration =
  "out" , "vertex" , name_lower , ":" , type_path ;

shader_vertex_parameter =
    shader_parameter_declaration
  | shader_vertex_input_declaration
  | shader_vertex_output_declaration
  | shader_vertex_output_main_declaration ;

shader_vertex_parameters =
  { shader_vertex_parameter , ";" } ;

shader_vertex_output_assignment =
  "out" , name_lower , "=" , term_path ;

shader_vertex_output_assignments =
  shader_vertex_output_assignment , ";" , { shader_vertex_output_assignments } ;

shader_vertex_declaration =
  "vertex" , name_lower , "is" ,
  shader_vertex_parameters ,
  [ "with" , local_declarations ] ,
  "as" ,
  shader_vertex_output_assignments ,
  "end" ;

shader_fragment_input_declaration =
  "in" , name_lower , ":" , type_path ;

shader_fragment_output_declaration =
  "out" , name_lower , ":" , type_path , "as" , integer_literal ;

shader_fragment_parameter =
    shader_parameter_declaration
  | shader_fragment_input_declaration
  | shader_fragment_output_declaration ;

shader_fragment_parameters =
  { shader_fragment_parameter , ";" } ;

shader_fragment_discard_declaration =
  "discard" , "(" , expression , ")" ;

shader_fragment_local_declaration =
    local_declaration
  | shader_fragment_discard_declaration ;

shader_fragment_local_declarations =
  shader_fragment_local_declaration , ";" , { shader_fragment_local_declarations } ;

shader_fragment_output_assignment =
  "out" , name_lower , "=" , term_path ;

shader_fragment_output_assignments =
  shader_fragment_output_assignment , ";" , { shader_fragment_output_assignments } ;

shader_fragment_declaration =
  "fragment" , name_lower , "is" ,
  shader_fragment_parameters ,
  [ "with" , shader_fragment_local_declarations ] ,
  "as" ,
  shader_fragment_output_assignments ,
  "end" ;

shader_program_declaration =
  "program" , name_lower , "is" ,
  "vertex" , shader_path , ";" ,
  "fragment" , shader_path , ";" ,
  "end" ;

shader_declaration =
  "shader" , ( shader_vertex_declaration | shader_fragment_declaration | shader_program_declaration ) ;

shader_declarations =
  { shader_declaration , ";" } ;</pre></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p3s5" href="#st200_p3s5">3.5</a></div><div class="st200_section_title">Vertex shaders</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s5ss1" href="#st200_p3s5ss1">3.5.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s5ss1pg1" href="#st200_p3s5ss1pg1">1</a></div><div class="st200_paragraph">
          <span class="st200_term term">Vertex shaders</span> are programs that
          process data on a per-vertex basis in OpenGL.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s5ss2" href="#st200_p3s5ss2">3.5.2</a></div><div class="st200_subsection_title">Declarations</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s5ss2pg1" href="#st200_p3s5ss2pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">shader_vertex_declaration</span> declares a set
          of <a class="st200_link" href="#st200_p3s4ss4">inputs,
          outputs, and parameters</a>, as well as a sequence of zero or more
          <span class="st200_term term">local_value_declarations</span>, similar
          in semantics and typing to that found in a
          <a class="st200_link" href="#st200_p4s9">let expression</a>,
          and a sequence of assignments of values to the declared
          <span class="st200_term term">outputs</span>. A vertex shader must also define exactly
          one output of type <a class="st200_link" href="#st200_p5s6">vector_4f</a>,
          indicated with the <span class="st200_term keyword">vertex</span> keyword,
          to which must be assigned a value representing the current homogeneous vertex
          position.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s5ss2pg2" href="#st200_p3s5ss2pg2">2</a></div><div class="st200_paragraph">
          It is required that there be exactly one
          <span class="st200_term term">shader_vertex_output_assignment</span> for each
          <span class="st200_term term">shader_vertex_output_declaration</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s5ss3" href="#st200_p3s5ss3">3.5.3</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s5ss3pg1" href="#st200_p3s5ss3pg1">1</a></div><div class="st200_paragraph">
          Each
          <span class="st200_term term">shader_parameter_declaration</span> and
          <span class="st200_term term">shader_vertex_input_declaration</span> introduces
          a new term of the given type into the environment, accessible only
          within the scope of the shader definition,
          as shown by the <span class="st200_term constant">shader_vertex_inputs_parameters</span> rule:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s5ss3fo1" href="#st200_p3s5ss3fo1">3.5.3.1. Vertex shader inputs/parameters (shader_vertex_inputs_parameters)</a></div><img class="st200_image" alt="Vertex shader inputs/parameters (shader_vertex_inputs_parameters)" src="png/ty_shader_vertex_inputs_parameters.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s5ss3pg2" href="#st200_p3s5ss3pg2">2</a></div><div class="st200_paragraph">
          Each <span class="st200_term term">local_value_declaration</span> introduces
          a new term of the given type into the environment, accessible in each
          successive <span class="st200_term term">local_value_declaration</span> and
          in the <span class="st200_term term">shader_vertex_output_assignments</span>,
          as shown by the
          <span class="st200_term constant">shader_vertex_values</span> rule:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s5ss3fo2" href="#st200_p3s5ss3fo2">3.5.3.2. Vertex shader values (shader_vertex_values)</a></div><img class="st200_image" alt="Vertex shader values (shader_vertex_values)" src="png/ty_shader_vertex_values.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s5ss3pg3" href="#st200_p3s5ss3pg3">3</a></div><div class="st200_paragraph">
          Finally, each output assigned in a <span class="st200_term term">shader_vertex_output_assignment</span>
          must be of the correct type, as shown by the
          <span class="st200_term constant">shader_vertex_output_assignment</span> rule:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s5ss3fo3" href="#st200_p3s5ss3fo3">3.5.3.3. Vertex shader output assignments (shader_vertex_output)</a></div><img class="st200_image" alt="Vertex shader output assignments (shader_vertex_output)" src="png/ty_shader_vertex_output.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s5ss4" href="#st200_p3s5ss4">3.5.4</a></div><div class="st200_subsection_title">Operational Semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s5ss4pg1" href="#st200_p3s5ss4pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term term">local_value_declarations</span> are evaluated from
          top-to-bottom, in an identical manner to
          <a class="st200_link" href="#st200_p4s9">let expressions</a>,
          as shown by the
          <span class="st200_term variable">shader_vertex_values</span> rule:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s5ss4fo1" href="#st200_p3s5ss4fo1">3.5.4.1. Vertex shader local declarations (shader_vertex_values)</a></div><img class="st200_image" alt="Vertex shader local declarations (shader_vertex_values)" src="png/op_shader_vertex_values.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s5ss5" href="#st200_p3s5ss5">3.5.5</a></div><div class="st200_subsection_title">Examples</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s5ss5fo1" href="#st200_p3s5ss5fo1">3.5.5.1. Examples</a></div><pre class="st200_verbatim">
shader vertex v is
  parameter mm_modelview  : matrix_4x4f;
  parameter mm_projection : matrix_4x4f;
  parameter mm_normal     : matrix_3x3f;
  in position             : vector_4f;
  in normal               : vector_3f;
  out vertex r_position   : vector_4f;
  out r_normal            : vector_3f;
with
  value p_result = M4.multiply_vector (M4.multiply (mm_projection, mm_modelview), position);
  value n_result = M3.multiply_vector (mm_normal, normal);
as
  out r_position = p_result;
  out r_normal   = n_result;
end;</pre></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p3s6" href="#st200_p3s6">3.6</a></div><div class="st200_section_title">Fragment shaders</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s6ss1" href="#st200_p3s6ss1">3.6.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s6ss1pg1" href="#st200_p3s6ss1pg1">1</a></div><div class="st200_paragraph">
          <span class="st200_term term">Fragment shaders</span> are programs that
          process data on a per-fragment basis in OpenGL.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s6ss2" href="#st200_p3s6ss2">3.6.2</a></div><div class="st200_subsection_title">Declarations</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s6ss2pg1" href="#st200_p3s6ss2pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">shader_fragment_declaration</span> declares a set
          of <a class="st200_link" href="#st200_p3s4ss4">inputs,
          outputs, and parameters</a>, as well as a sequence of zero or more
          <span class="st200_term term">shader_fragment_local_declaration</span>, and a sequence
          of assignments of values to the declared
          <span class="st200_term term">outputs</span>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s6ss2pg2" href="#st200_p3s6ss2pg2">2</a></div><div class="st200_paragraph">
          A fragment shader may optionally define at most
          one output of type <a class="st200_link" href="#st200_p5s4">float</a>,
          indicated with the <span class="st200_term keyword">depth</span> keyword,
          to which must be assigned a value representing the current desired fragment depth (overriding
          the depth value typically calculated by the graphics system's rasterizer).
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s6ss2pg3" href="#st200_p3s6ss2pg3">3</a></div><div class="st200_paragraph">
          A <span class="st200_term term">shader_fragment_local_declaration</span> is
          either a <span class="st200_term term">local_value_declaration</span>, similar
          in semantics and typing to that found in a
          <a class="st200_link" href="#st200_p4s9">let expression</a>,
          or a
          <a class="st200_link" href="#st200_p3s6ss3">shader_fragment_discard_declaration</a>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s6ss3" href="#st200_p3s6ss3">3.6.3</a></div><div class="st200_subsection_title">Discard</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s6ss3pg1" href="#st200_p3s6ss3pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">shader_fragment_discard_declaration</span> statement
          halts evaluation of the current fragment shader iff the given
          <span class="st200_term term">expression</span> evaluates to
          <span class="st200_term constant">true</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s6ss4" href="#st200_p3s6ss4">3.6.4</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s6ss4pg1" href="#st200_p3s6ss4pg1">1</a></div><div class="st200_paragraph">
          Each
          <span class="st200_term term">shader_parameter_declaration</span> and
          <span class="st200_term term">shader_fragment_input_declaration</span> introduces
          a new term of the given type into the environment, accessible only
          within the scope of the shader definition,
          as shown by the <span class="st200_term constant">shader_fragment_inputs_parameters</span> rule:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s6ss4fo1" href="#st200_p3s6ss4fo1">3.6.4.1. Fragment shader inputs/parameters (shader_fragment_inputs_parameters)</a></div><img class="st200_image" alt="Vertex shader inputs/parameters (shader_fragment_inputs_parameters)" src="png/ty_shader_fragment_inputs_parameters.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s6ss4pg2" href="#st200_p3s6ss4pg2">2</a></div><div class="st200_paragraph">
          Each <span class="st200_term term">local_value_declaration</span> introduces
          a new term of the given type into the environment, accessible in each
          successive <span class="st200_term term">local_value_declaration</span> and
          in the <span class="st200_term term">shader_fragment_output_assignments</span>,
          as shown by the
          <span class="st200_term constant">shader_fragment_values</span> rule:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s6ss4fo2" href="#st200_p3s6ss4fo2">3.6.4.2. Fragment shader values (shader_fragment_values)</a></div><img class="st200_image" alt="Vertex shader values (shader_fragment_values)" src="png/ty_shader_fragment_values.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s6ss4pg3" href="#st200_p3s6ss4pg3">3</a></div><div class="st200_paragraph">
          Each output assigned in a <span class="st200_term term">shader_fragment_output_assignment</span>
          must be of the correct type, as shown by the
          <span class="st200_term constant">shader_fragment_output_assignment</span> rule:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s6ss4fo3" href="#st200_p3s6ss4fo3">3.6.4.3. Fragment shader output assignments (shader_fragment_output)</a></div><img class="st200_image" alt="Vertex shader output assignments (shader_fragment_output)" src="png/ty_shader_fragment_output.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s6ss4pg4" href="#st200_p3s6ss4pg4">4</a></div><div class="st200_paragraph">
          Finally, the expression passed to a <span class="st200_term term">shader_fragment_discard_declaration</span>
          must be of a <a class="st200_link" href="#st200_p5s5">boolean</a> type
          as shown by the <span class="st200_term constant">shader_fragment_discard</span> rule <span class="st200_footnote_reference"><a id="st200_fn_5_ref" href="#st200_fn_5">[5]</a></span>:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s6ss4fo4" href="#st200_p3s6ss4fo4">3.6.4.4. Fragment shader discard (shader_fragment_discard)</a></div><img class="st200_image" alt="Fragment shader discard (shader_fragment_discard)" src="png/ty_shader_fragment_discard.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s6ss5" href="#st200_p3s6ss5">3.6.5</a></div><div class="st200_subsection_title">Operational Semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s6ss5pg1" href="#st200_p3s6ss5pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term term">shader_fragment_local_declaration</span> are evaluated from
          top-to-bottom, in an identical manner to
          <a class="st200_link" href="#st200_p4s9">let expressions</a>,
          as shown by the
          <span class="st200_term variable">shader_fragment_values</span> rule:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s6ss5fo1" href="#st200_p3s6ss5fo1">3.6.5.1. Fragment shader local declarations (shader_fragment_values)</a></div><img class="st200_image" alt="Fragment shader local declarations (shader_fragment_values)" src="png/op_shader_fragment_values.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s6ss5pg2" href="#st200_p3s6ss5pg2">2</a></div><div class="st200_paragraph">
          Evaluation halts immediately upon evaluating any
          <span class="st200_term term">shader_fragment_discard_declaration</span> where
          the condition evaluates to <span class="st200_term constant">true</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s6ss6" href="#st200_p3s6ss6">3.6.6</a></div><div class="st200_subsection_title">Examples</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s6ss6fo1" href="#st200_p3s6ss6fo1">3.6.6.1. Examples</a></div><pre class="st200_verbatim">
shader fragment f is
  parameter texture_0 : sampler_2d;
  in uv               : vector_2f;
  out out0            : vector_4f as 0;
with
  value rgba = T.texture (texture_0, uv);
as
  out out0 = rgba;
end;</pre></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p3s7" href="#st200_p3s7">3.7</a></div><div class="st200_section_title">Programs</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s7ss1" href="#st200_p3s7ss1">3.7.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s7ss1pg1" href="#st200_p3s7ss1pg1">1</a></div><div class="st200_paragraph">
          <span class="st200_term term">Programs</span> aggregate
          <a class="st200_link" href="#st200_p3s5">vertex</a> and
          <a class="st200_link" href="#st200_p3s6">fragment</a>
          shaders into single entities that are executed on the
          targeted graphics hardware.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s7ss2" href="#st200_p3s7ss2">3.7.2</a></div><div class="st200_subsection_title">Declarations</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s7ss2pg1" href="#st200_p3s7ss2pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">shader_program_declaration</span> declares a dependency
          on a <a class="st200_link" href="#st200_p3s5">vertex shader</a>
          and a <a class="st200_link" href="#st200_p3s6">fragment shader</a>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s7ss3" href="#st200_p3s7ss3">3.7.3</a></div><div class="st200_subsection_title">Compatibility</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s7ss3pg1" href="#st200_p3s7ss3pg1">1</a></div><div class="st200_paragraph">
          In order for a given <span class="st200_term term">vertex shader</span> and
          <span class="st200_term term">fragment shader</span> to be used in a
          <span class="st200_term term">program</span>, the set of
          <span class="st200_term term">inputs</span> <span class="st200_term expression">I</span> of the
          fragment shader must be <span class="st200_term term">compatible</span> with the set of
          <span class="st200_term term">outputs</span>
          <span class="st200_term expression">O</span> of
          the vertex shader. Specifically, for each
          <span class="st200_term expression">0 &lt;= s &lt;= |I| - 1</span>, there must be some
          <span class="st200_term expression">0 &lt;= t &lt;= |O| - 1</span> such that
          the <span class="st200_term term">name</span> and
          <span class="st200_term term">type</span> of
          <span class="st200_term expression">Iₛ</span> matches that of
          <span class="st200_term expression">Oₜ</span>:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s7ss3fo1" href="#st200_p3s7ss3fo1">3.7.3.1. Input/output compatibility</a></div><pre class="st200_verbatim">∀s. 0 &lt;= s &lt;= |I| - 1 ⇒
  ∃t. (0 &lt;= t &lt;= |O| - 1 ⋀ ((name(Iₛ) = name(Oₜ) ⋀  type(Iₛ) = type(Oₜ)))</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s7ss3pg2" href="#st200_p3s7ss3pg2">2</a></div><div class="st200_paragraph">
          The set of <span class="st200_term term">parameters</span>
          <span class="st200_term expression">P</span> of the given
          given vertex shader, and the set of
          <span class="st200_term term">parameters</span>
          <span class="st200_term expression">Q</span> of the given
          fragment shader must be type-compatible if they
          share any of the same names. That is, for each
          <span class="st200_term expression">0 &lt;= s &lt;= |P| - 1</span>,
          if there is some
          <span class="st200_term expression">0 &lt;= t &lt;= |Q| - 1</span> such that
          the name of <span class="st200_term expression">Pₛ</span> equals
          that of <span class="st200_term expression">Qₜ</span>, then the
          type of <span class="st200_term expression">Pₛ</span> must equal
          that of <span class="st200_term expression">Qₜ</span>.
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s7ss3fo2" href="#st200_p3s7ss3fo2">3.7.3.2. Input/output compatibility</a></div><pre class="st200_verbatim">∀s. 0 &lt;= s &lt;= |P| - 1 ⇒
  ∃t. (0 &lt;= t &lt;= |Q| - 1 ⋀ name(Iₛ) = name(Oₜ)) ⇒
    type(Iₛ) = type(Oₜ)</pre></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s7ss4" href="#st200_p3s7ss4">3.7.4</a></div><div class="st200_subsection_title">Examples</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s7ss4fo1" href="#st200_p3s7ss4fo1">3.7.4.1. Examples</a></div><pre class="st200_verbatim">
shader program p is
  vertex p;
  fragment f;
end;</pre></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p3s8" href="#st200_p3s8">3.8</a></div><div class="st200_section_title">Modules</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s8ss1" href="#st200_p3s8ss1">3.8.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s8ss1pg1" href="#st200_p3s8ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">module</span> is a organizational unit
          containing
          <a class="st200_link" href="#st200_p3s2">terms</a>,
          <a class="st200_link" href="#st200_p3s3">types</a>, and
          <a class="st200_link" href="#st200_p3s4">shaders</a>.
          Modules exist solely to partition the namespace into separate sections
          to allow for ease of code re-use across projects.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s8ss2" href="#st200_p3s8ss2">3.8.2</a></div><div class="st200_subsection_title">Declarations</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s8ss2pg1" href="#st200_p3s8ss2pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">module_declaration</span> declares
          a new <span class="st200_term term">module</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s8ss3" href="#st200_p3s8ss3">3.8.3</a></div><div class="st200_subsection_title">Names</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s8ss3pg1" href="#st200_p3s8ss3pg1">1</a></div><div class="st200_paragraph">
          The names selected for modules must be unique with respect to
          other modules within the <a class="st200_link" href="#st200_p3s9">package</a>
          in which they are defined. That is, there cannot be two modules with the same name
          in the same package.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s8ss3pg2" href="#st200_p3s8ss3pg2">2</a></div><div class="st200_paragraph">
          The following restrictions apply when naming modules:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p3s8ss3fo1" href="#st200_p3s8ss3fo1">3.8.3.1. Name restrictions</a></div><ul class="st200_list_unordered"><li class="st200_list_item">
              Module names must begin with an <span class="st200_term term">uppercase</span>
              letter. This is directly implied by the
              <a class="st200_link" href="#st200_p3s8ss6">grammar</a>.
            </li><li class="st200_list_item">
              Names cannot contain two adjacent underscores (<span class="st200_term constant">U+005F</span>).
            </li><li class="st200_list_item">
              Names cannot end with underscores (<span class="st200_term constant">U+005F</span>).
            </li><li class="st200_list_item">
              Names cannot start with the character sequence "<span class="st200_term constant">GL_</span>"
              (<span class="st200_term constant">U+0047</span>,
               <span class="st200_term constant">U+004C</span>,
               <span class="st200_term constant">U+005F</span>).
            </li><li class="st200_list_item">
              Names cannot match any of the keywords or reserved words defined in
              any version of the OpenGL shading language. See the
              <a class="st200_link" href="#st200_p8s4">GLSL identifiers</a>
              section for the complete list.
            </li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s8ss4" href="#st200_p3s8ss4">3.8.4</a></div><div class="st200_subsection_title">Imports</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s8ss4pg1" href="#st200_p3s8ss4pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">module</span> may <span class="st200_term term">import</span>
          any number of modules via <span class="st200_term term">import_declarations</span>. An
          <span class="st200_term term">import_declaration</span>, given in module
          <span class="st200_term variable">X</span>,
          specifies a name of a module <span class="st200_term variable">Y</span>
          prefixed with the name of the
          <a class="st200_link" href="#st200_p3s9">package</a>
          in which the module <span class="st200_term variable">Y</span> was defined. The
          <span class="st200_term term">terms</span>, <span class="st200_term term">types</span>, and
          <span class="st200_term term">shaders</span> of <span class="st200_term variable">Y</span>
          are then accessible in
          <span class="st200_term variable">X</span> by qualifying
          their names with <span class="st200_term variable">Y</span>. As an example:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s8ss4fo1" href="#st200_p3s8ss4fo1">3.8.4.1. Module import example</a></div><pre class="st200_verbatim">package com.example;

module Y is
  value k = 23;
end;

module X is
  import com.example.Y;
  value z = Y.k;
end;</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s8ss4pg2" href="#st200_p3s8ss4pg2">2</a></div><div class="st200_paragraph">
          The value of <span class="st200_term expression">X.z</span> is
          <span class="st200_term expression">23</span>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s8ss4pg3" href="#st200_p3s8ss4pg3">3</a></div><div class="st200_paragraph">
          Because two modules defined in different packages can have the
          same names, it is possible for imports to <span class="st200_term term">collide</span>:
          If a <span class="st200_term variable">X</span> imports both
          modules <span class="st200_term expression">com.example_0.Y</span> and
          <span class="st200_term expression">com.example_1.Y</span>, then
          the name <span class="st200_term expression">Y</span> will be introduced twice.
          An <span class="st200_term term">import_declaration</span> may therefore provide
          an optional name to disambiguate imported modules:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p3s8ss4fo2" href="#st200_p3s8ss4fo2">3.8.4.2. Module import renaming</a></div><pre class="st200_verbatim">package com.example;

module X is
  import com.example_0.Y;
  import com.example_1.Y as Z;

  value z = Y.k;
  value q = Z.p;
end;</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s8ss4pg4" href="#st200_p3s8ss4pg4">4</a></div><div class="st200_paragraph">
          If a module <span class="st200_term variable">X</span>
          imports a module
          <span class="st200_term variable">Y</span> as <span class="st200_term variable">Z</span>,
          the
          <span class="st200_term term">terms</span>, <span class="st200_term term">types</span>, and
          <span class="st200_term term">shaders</span> of <span class="st200_term variable">Y</span>
          are then accessible in
          <span class="st200_term variable">X</span> by qualifying
          their names with <span class="st200_term variable">Z</span>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s8ss4pg5" href="#st200_p3s8ss4pg5">5</a></div><div class="st200_paragraph">
          The imported names of modules are <span class="st200_term emphasis">not</span>
          visible outside of the module in which they are imported. For example, if
          a module <span class="st200_term variable">X</span> imports a module
          <span class="st200_term variable">Y</span>, and <span class="st200_term variable">Y</span>
          imports a module <span class="st200_term variable">Z</span>, the module
          <span class="st200_term variable">Z</span> is
          <span class="st200_term emphasis">not</span>
          visible as
          <span class="st200_term variable">Y.Z</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s8ss5" href="#st200_p3s8ss5">3.8.5</a></div><div class="st200_subsection_title">Recursion</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s8ss5pg1" href="#st200_p3s8ss5pg1">1</a></div><div class="st200_paragraph">
          No <span class="st200_term term">module_declaration</span> can be <span class="st200_term term">recursive</span>
          with respect to itself or any other <span class="st200_term term">module_declaration</span>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s8ss5pg2" href="#st200_p3s8ss5pg2">2</a></div><div class="st200_paragraph">
          A <span class="st200_term term">module_declaration</span> <span class="st200_term variable">d</span>
          is (mutually) <span class="st200_term term">recursive</span> iff:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p3s8ss5fo1" href="#st200_p3s8ss5fo1">3.8.5.1. Recursion conditions</a></div><ul class="st200_list_unordered"><li class="st200_list_item">
              <span class="st200_term variable">d</span> imports itself.
            </li><li class="st200_list_item">
              There is a sequence of modules <span class="st200_term expression">d₀, d₁, ..., dₙ</span>
              such that <span class="st200_term variable">d</span> imports
              <span class="st200_term variable">d₀</span>, and
              for all <span class="st200_term variable">m</span> where <span class="st200_term expression">0 &lt;= m &lt; n</span>,
              <span class="st200_term variable">dₘ</span> imports
              <span class="st200_term expression">d₍ₘ₊₁₎</span>, and
              <span class="st200_term variable">dₙ</span> imports
              <span class="st200_term variable">d</span>.
            </li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s8ss6" href="#st200_p3s8ss6">3.8.6</a></div><div class="st200_subsection_title">Syntax</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s8ss6pg1" href="#st200_p3s8ss6pg1">1</a></div><div class="st200_paragraph">
          The precise syntax of module declarations is given by the following
          EBNF:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p3s8ss6fo1" href="#st200_p3s8ss6fo1">3.8.6.1. Module declaration syntax</a></div><pre class="st200_verbatim">package_path =
  name_lower , { "." , name_lower } ;

import_path =
  package_path , "." , name_upper ;

import_declaration =
  "import" , import_path , [ "as" , name_upper ] ;

import_declarations =
  { import_declaration , ";" } ;

module_level_declarations =
  { value_declarations | function_declarations | type_declarations | shader_declarations } ;

module_declaration =
  "module" , name_upper , "is" ,
  import_declarations ,
  module_level_declarations ,
  "end" ;

module_declarations =
  module_declaration , ";" , { module_declaration , ";" } ;</pre></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p3s9" href="#st200_p3s9">3.9</a></div><div class="st200_section_title">Packages</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s9ss1" href="#st200_p3s9ss1">3.9.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s9ss1pg1" href="#st200_p3s9ss1pg1">1</a></div><div class="st200_paragraph">
          <span class="st200_term term">Packages</span> are to
          <a class="st200_link" href="#st200_p3s8">modules</a>
          as
          <a class="st200_link" href="#st200_p3s8">modules</a>
          are to
          <a class="st200_link" href="#st200_p3s2">terms</a>,
          <a class="st200_link" href="#st200_p3s3">types</a>, and
          <a class="st200_link" href="#st200_p3s4">shaders</a>.
          <span class="st200_term term">Packages</span> provide a non-hierarchical partitioned
          namespace that separates <span class="st200_term term">modules</span> for ease
          of code re-use across projects.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s9ss2" href="#st200_p3s9ss2">3.9.2</a></div><div class="st200_subsection_title">Declarations</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s9ss2pg1" href="#st200_p3s9ss2pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">package_declaration</span> declares that the
          current <a class="st200_link" href="#st200_p2s1">unit</a>
          will contain declarations that will be placed in the named package.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s9ss2pg2" href="#st200_p3s9ss2pg2">2</a></div><div class="st200_paragraph">
          Multiple <span class="st200_term term">units</span> can contain the same
          <span class="st200_term term">package_declaration</span>, however a single
          <span class="st200_term term">unit</span> must contain exactly one
          <span class="st200_term term">package_declaration</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p3s9ss3" href="#st200_p3s9ss3">3.9.3</a></div><div class="st200_subsection_title">Syntax</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s9ss3pg1" href="#st200_p3s9ss3pg1">1</a></div><div class="st200_paragraph">
          The precise syntax of package declarations is given by the following
          EBNF:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p3s9ss3fo1" href="#st200_p3s9ss3fo1">3.9.3.1. Package declaration syntax</a></div><pre class="st200_verbatim">package_path =
  name_lower , { "." , name_lower } ;

package_declaration =
  "package" , package_path ;</pre></div></div></div></div><div class="st200_part_container"><div class="st200_part_title_number"><a id="st200_p4" href="#st200_p4">4</a></div><div class="st200_part_title">Expressions</div><ul class="st200_contents st200_part_contents_outer st200_part_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p4s1">4.1. Description</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s1ss1">4.1.1. Overview</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s1ss2">4.1.2. Operational Semantics</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p4s2">4.2. Syntax</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p4s3">4.3. Integer literal</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s3ss1">4.3.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s3ss2">4.3.2. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s3ss3">4.3.3. Operational semantics</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p4s4">4.4. Real literal</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s4ss1">4.4.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s4ss2">4.4.2. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s4ss3">4.4.3. Operational semantics</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p4s5">4.5. Boolean literal</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s5ss1">4.5.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s5ss2">4.5.2. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s5ss3">4.5.3. Operational semantics</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p4s6">4.6. Variable</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s6ss1">4.6.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s6ss2">4.6.2. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s6ss3">4.6.3. Operational semantics</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p4s7">4.7. Function application</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s7ss1">4.7.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s7ss2">4.7.2. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s7ss3">4.7.3. Operational semantics</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p4s8">4.8. Conditional</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s8ss1">4.8.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s8ss2">4.8.2. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s8ss3">4.8.3. Operational semantics</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p4s9">4.9. Let</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s9ss1">4.9.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s9ss2">4.9.2. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s9ss3">4.9.3. Operational semantics</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p4s10">4.10. Record Projection</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s10ss1">4.10.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s10ss2">4.10.2. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s10ss3">4.10.3. Operational semantics</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p4s11">4.11. Record</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s11ss1">4.11.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s11ss2">4.11.2. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s11ss3">4.11.3. Operational semantics</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p4s12">4.12. Swizzle</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s12ss1">4.12.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s12ss2">4.12.2. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s12ss3">4.12.3. Operational semantics</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p4s13">4.13. Matrix Column Access</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s13ss1">4.13.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s13ss2">4.13.2. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s13ss3">4.13.3. Operational semantics</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p4s14">4.14. New</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s14ss1">4.14.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s14ss2">4.14.2. Type rules</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p4s14ss3">4.14.3. Operational semantics</a></li></ul></li></ul><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p4s1" href="#st200_p4s1">4.1</a></div><div class="st200_section_title">Description</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s1ss1" href="#st200_p4s1ss1">4.1.1</a></div><div class="st200_subsection_title">Overview</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s1ss1pg1" href="#st200_p4s1ss1pg1">1</a></div><div class="st200_paragraph">
          An <span class="st200_term term">expression</span> is a computation
          that evaluates to a <span class="st200_term term">value</span>
          of a single <a class="st200_link" href="#st200_p5">type</a>
          according to the rules given in the
          operational semantics for each expression form.
          Expressions may be one of the following forms:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s1ss1fo1" href="#st200_p4s1ss1fo1">4.1.1.1. Expression forms</a></div><ul class="st200_list_unordered"><li class="st200_list_item">An <a class="st200_link" href="#st200_p4s3">integer literal</a>. For example: <span class="st200_term expression">23</span></li><li class="st200_list_item">A <a class="st200_link" href="#st200_p4s4">real literal</a>. For example: <span class="st200_term expression">23.0</span></li><li class="st200_list_item">A <a class="st200_link" href="#st200_p4s5">boolean literal</a>. For example: <span class="st200_term expression">true</span></li><li class="st200_list_item">A <a class="st200_link" href="#st200_p4s6">variable</a>. For example: <span class="st200_term expression">x</span></li><li class="st200_list_item">A <a class="st200_link" href="#st200_p4s7">function application</a>. For example: <span class="st200_term expression">f (x, y)</span></li><li class="st200_list_item">A <a class="st200_link" href="#st200_p4s8">conditional</a>. For example: <span class="st200_term expression">if x then y else z end</span></li><li class="st200_list_item">A <a class="st200_link" href="#st200_p4s9">let</a> block. For example: <span class="st200_term expression">let value x = 23; value y = 23; in f (x, y) end</span></li><li class="st200_list_item">The construction of a <a class="st200_link" href="#st200_p4s14">new</a> value. For example: <span class="st200_term expression">new vector_3f (1.0, 2.0, 3.0)</span></li><li class="st200_list_item">A <a class="st200_link" href="#st200_p4s11">record</a> value. For example: <span class="st200_term expression">record t { x = 23, y = 24 }</span></li><li class="st200_list_item">A <a class="st200_link" href="#st200_p4s10">record projection</a>. For example: <span class="st200_term expression">e.x</span>, for some expression <span class="st200_term variable">e</span>.</li><li class="st200_list_item">A vector <a class="st200_link" href="#st200_p4s12">swizzle</a>. For example: <span class="st200_term expression">e [x x y z]</span>, for some expression <span class="st200_term variable">e</span>.</li><li class="st200_list_item">A <a class="st200_link" href="#st200_p4s13">matrix column access</a>. For example: <span class="st200_term expression">column m 0</span>, for some expression <span class="st200_term variable">m</span>.</li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s1ss2" href="#st200_p4s1ss2">4.1.2</a></div><div class="st200_subsection_title">Operational Semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s1ss2pg1" href="#st200_p4s1ss2pg1">1</a></div><div class="st200_paragraph">
          The operational semantics for each expression form appears
          in the respective sections for each. The following syntactic forms
          are considered to be values:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s1ss2fo1" href="#st200_p4s1ss2fo1">4.1.2.1. Values (values)</a></div><img class="st200_image" alt="Values (values)" src="png/op_values.png"/></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p4s2" href="#st200_p4s2">4.2</a></div><div class="st200_section_title">Syntax</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s2pg1" href="#st200_p4s2pg1">1</a></div><div class="st200_paragraph">
        The precise syntax of expressions is given by the following
        EBNF:
      </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s2fo1" href="#st200_p4s2fo1">4.2.1. Expression syntax</a></div><pre class="st200_verbatim">term_path =
    name_lower
  | name_upper , "." , name_lower ;

type_path =
    name_lower
  | name_upper , "." , name_lower ;

variable_or_application_expression =
  term_path [ "(" , expression , { "," , expression } , ")" ]
  ;

new_parameters =
  "(" , expression , { "," , expression } , ")" ;

new_expression =
  "new" , type_path , new_parameters ;

record_expression_fields =
  "{" , name_lower , "=" , expression , { "," name_lower , "=" , expression } , "}" ;

record_expression =
  "record" , type_path , record_expression_fields ;

local_declaration =
  "value" , name_lower , [ ":" , type_path ] , "=" , expression ;

local_declarations =
  local_declaration , ";" , { local_declarations } ;

let_expression =
  "let" , local_declarations , "in" , expression , "end" ;

conditional_expression =
  "if" , expression , "then" , expression , "else" , expression , "end" ;

matrix_column_access_expression =
  "column" , expression , integer_literal ;

expression_pre =
    integer_literal
  | real_literal
  | boolean_literal
  | variable_or_application_expression
  | conditional_expression
  | matrix_column_access_expression
  | let_expression
  | new_expression
  | record_expression
  ;

expression_projection =
  "." , name_lower ;

expression_swizzle_names =
  "[" , name_lower , { "," , name_lower } , "]" ;

expression =
  expression_pre , { expression_swizzle | expression_projection } ;
</pre></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p4s3" href="#st200_p4s3">4.3</a></div><div class="st200_section_title">Integer literal</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s3ss1" href="#st200_p4s3ss1">4.3.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s3ss1pg1" href="#st200_p4s3ss1pg1">1</a></div><div class="st200_paragraph">
          An <span class="st200_term term">integer_literal</span> is a simple
          integer value.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s3ss2" href="#st200_p4s3ss2">4.3.2</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s3ss2pg1" href="#st200_p4s3ss2pg1">1</a></div><div class="st200_paragraph">
          <span class="st200_term term">integer_literal</span> expressions are of type
          <a class="st200_link" href="#st200_p5s3">integer</a>,
          where <span class="st200_term variable">ℤ</span> represents the
          literal:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s3ss2fo1" href="#st200_p4s3ss2fo1">4.3.2.1. Integer literal type rule (integer_constant)</a></div><img class="st200_image" alt="Integer literal type rule (integer_constant)" src="png/ty_integer_constant.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s3ss3" href="#st200_p4s3ss3">4.3.3</a></div><div class="st200_subsection_title">Operational semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s3ss3pg1" href="#st200_p4s3ss3pg1">1</a></div><div class="st200_paragraph">
          <span class="st200_term term">integer_literal</span> expressions are <span class="st200_term term">values</span>
          by definition, and are equal to the value of the literal.
        </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p4s4" href="#st200_p4s4">4.4</a></div><div class="st200_section_title">Real literal</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s4ss1" href="#st200_p4s4ss1">4.4.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s4ss1pg1" href="#st200_p4s4ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">real_literal</span> is a simple
          real-number value.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s4ss2" href="#st200_p4s4ss2">4.4.2</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s4ss2pg1" href="#st200_p4s4ss2pg1">1</a></div><div class="st200_paragraph">
          <span class="st200_term term">Real literal</span> expressions are of type
          <a class="st200_link" href="#st200_p5s4">float</a>,
          where <span class="st200_term variable">ℝ</span> represents the
          literal:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s4ss2fo1" href="#st200_p4s4ss2fo1">4.4.2.1. Real literal type rule (float_constant)</a></div><img class="st200_image" alt="Real literal type rule (float_constant)" src="png/ty_float_constant.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s4ss3" href="#st200_p4s4ss3">4.4.3</a></div><div class="st200_subsection_title">Operational semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s4ss3pg1" href="#st200_p4s4ss3pg1">1</a></div><div class="st200_paragraph">
          <span class="st200_term term">real_literal</span> expressions are <span class="st200_term term">values</span>
          by definition, and are equal to the value of the literal.
        </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p4s5" href="#st200_p4s5">4.5</a></div><div class="st200_section_title">Boolean literal</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s5ss1" href="#st200_p4s5ss1">4.5.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s5ss1pg1" href="#st200_p4s5ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">boolean_literal</span> is a simple
          <span class="st200_term keyword">true</span> or
          <span class="st200_term keyword">false</span> value.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s5ss2" href="#st200_p4s5ss2">4.5.2</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s5ss2pg1" href="#st200_p4s5ss2pg1">1</a></div><div class="st200_paragraph">
          <span class="st200_term term">boolean_literal</span> expressions are of type
          <a class="st200_link" href="#st200_p5s5">boolean</a>:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s5ss2fo1" href="#st200_p4s5ss2fo1">4.5.2.1. Boolean true literal type rule (true_constant)</a></div><img class="st200_image" alt="Boolean true literal type rule (true_constant)" src="png/ty_true_constant.png"/></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s5ss2fo2" href="#st200_p4s5ss2fo2">4.5.2.2. Boolean false literal type rule (false_constant)</a></div><img class="st200_image" alt="Boolean false literal type rule (false_constant)" src="png/ty_false_constant.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s5ss3" href="#st200_p4s5ss3">4.5.3</a></div><div class="st200_subsection_title">Operational semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s5ss3pg1" href="#st200_p4s5ss3pg1">1</a></div><div class="st200_paragraph">
          <span class="st200_term term">Boolean literal</span> expressions are <span class="st200_term term">values</span>
          by definition, and are equal to the value of the literal.
        </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p4s6" href="#st200_p4s6">4.6</a></div><div class="st200_section_title">Variable</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s6ss1" href="#st200_p4s6ss1">4.6.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s6ss1pg1" href="#st200_p4s6ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">variable</span> expression is a simple
          reference to a variable in the current environment.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s6ss2" href="#st200_p4s6ss2">4.6.2</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s6ss2pg1" href="#st200_p4s6ss2pg1">1</a></div><div class="st200_paragraph">
          For <span class="st200_term term">variable</span> expressions, if a variable <span class="st200_term variable">x</span>
          is of type <span class="st200_term variable">t</span> in the current environment, then
          the result of evaluating the variable has type <span class="st200_term variable">t</span>:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s6ss2fo1" href="#st200_p4s6ss2fo1">4.6.2.1. Variable type rule (variable)</a></div><img class="st200_image" alt="Variable type rule (variable)" src="png/ty_variable.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s6ss3" href="#st200_p4s6ss3">4.6.3</a></div><div class="st200_subsection_title">Operational semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s6ss3pg1" href="#st200_p4s6ss3pg1">1</a></div><div class="st200_paragraph">
          Variables are replaced with their values during the evaluation of
          <a class="st200_link" href="#st200_p4s7">functions</a>,
          <a class="st200_link" href="#st200_p4s9">let</a> expressions, and
          top-level
          <a class="st200_link" href="#st200_p3s2ss9">value</a>
          declarations.
        </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p4s7" href="#st200_p4s7">4.7</a></div><div class="st200_section_title">Function application</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s7ss1" href="#st200_p4s7ss1">4.7.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s7ss1pg1" href="#st200_p4s7ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">function_application</span> expression applies
          a given function <span class="st200_term variable">f</span> to an n-tuple of
          argument expressions.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s7ss2" href="#st200_p4s7ss2">4.7.2</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s7ss2pg1" href="#st200_p4s7ss2pg1">1</a></div><div class="st200_paragraph">
          For <span class="st200_term term">function_application</span> expressions, if a function <span class="st200_term variable">f</span>
          takes an n-tuple of values of types <span class="st200_term type">(t₀ ✕ ... ✕ tₙ)</span> and
          returns a value of type <span class="st200_term type">u</span>, then applying
          <span class="st200_term variable">f</span> to an n-tuple of expressions of the
          corresponding types, results in a value of type <span class="st200_term type">u</span>:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s7ss2fo1" href="#st200_p4s7ss2fo1">4.7.2.1. Function application type rule (function_application)</a></div><img class="st200_image" alt="Function application type rule (function_application)" src="png/ty_function_application.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s7ss3" href="#st200_p4s7ss3">4.7.3</a></div><div class="st200_subsection_title">Operational semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s7ss3pg1" href="#st200_p4s7ss3pg1">1</a></div><div class="st200_paragraph">
          For a <span class="st200_term term">function_application</span> expression
          <span class="st200_term expression">e</span>, expressions
          passed to the function are evaluated from left-to-right by rules
          <span class="st200_term constant">function_application_left_0</span> and
          <span class="st200_term constant">function_application_left_1</span>, and when all of
          the arguments have evaluated to values, the variables in the body of the
          function are substituted with the values of the arguments and the expression
          as a whole is evaluated, by rule
          <span class="st200_term constant">function_application_body</span>.
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s7ss3fo1" href="#st200_p4s7ss3fo1">4.7.3.1. Function application semantics (function_application)</a></div><img class="st200_image" alt="Function application semantics (function_application)" src="png/op_function_application.png"/></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p4s8" href="#st200_p4s8">4.8</a></div><div class="st200_section_title">Conditional</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s8ss1" href="#st200_p4s8ss1">4.8.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s8ss1pg1" href="#st200_p4s8ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">conditional</span> expression evaluates
          to the expression in either of its defined
          <span class="st200_term term">branches</span> based on a given
          <span class="st200_term term">condition</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s8ss2" href="#st200_p4s8ss2">4.8.2</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s8ss2pg1" href="#st200_p4s8ss2pg1">1</a></div><div class="st200_paragraph">
          For <span class="st200_term term">conditional</span> expressions, if the condition is of type
          <a class="st200_link" href="#st200_p5s5">boolean</a>, and both
          branches are of type <span class="st200_term type">t</span>, then evaluating
          the expression results in a value of type <span class="st200_term type">t</span>:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s8ss2fo1" href="#st200_p4s8ss2fo1">4.8.2.1. Conditional type rule (conditional)</a></div><img class="st200_image" alt="Conditional type rule (conditional)" src="png/ty_conditional.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s8ss3" href="#st200_p4s8ss3">4.8.3</a></div><div class="st200_subsection_title">Operational semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s8ss3pg1" href="#st200_p4s8ss3pg1">1</a></div><div class="st200_paragraph">
          For a <span class="st200_term term">conditional</span> expression
          <span class="st200_term expression">e</span>, the
          condition of the expression is evaluated, if it is not already a
          <span class="st200_term term">value</span>, by rule
          <span class="st200_term constant">if_condition</span>. If the
          condition is <span class="st200_term constant">true</span>,
          <span class="st200_term expression">e</span>
          evaluates to the expression in the left branch, by rule
          <span class="st200_term constant">if_true</span>. If the condition is
          <span class="st200_term constant">false</span>,
          <span class="st200_term expression">e</span> evaluates
          to the expression in the right branch, by rule
          <span class="st200_term constant">if_false</span>.
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s8ss3fo1" href="#st200_p4s8ss3fo1">4.8.3.1. Conditional semantics (condition)</a></div><img class="st200_image" alt="Conditional semantics (condition)" src="png/op_conditional.png"/></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p4s9" href="#st200_p4s9">4.9</a></div><div class="st200_section_title">Let</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s9ss1" href="#st200_p4s9ss1">4.9.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s9ss1pg1" href="#st200_p4s9ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">let_expression</span> consists of a sequence of
          <span class="st200_term term">local_value_declarations</span> and a body consisting
          of a single <span class="st200_term term">expression</span>. The
          <span class="st200_term term">local_value_declarations</span> differ from
          top-level <a class="st200_link" href="#st200_p3s2ss6">value_declarations</a>
          in that the order of declaration is significant, and it is legal for
          multiple <span class="st200_term term">local_value_declarations</span> to have
          the same name, with each new declaration hiding any previous declarations
          (including top level declarations) with the same name.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s9ss1pg2" href="#st200_p4s9ss1pg2">2</a></div><div class="st200_paragraph">
          The same rules apply for <span class="st200_term term">local_value_declarations</span> with regards to
          <a class="st200_link" href="#st200_p3s2ss4">recursion</a> as
          any other term declaration.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s9ss2" href="#st200_p4s9ss2">4.9.2</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s9ss2pg1" href="#st200_p4s9ss2pg1">1</a></div><div class="st200_paragraph">
          For <span class="st200_term term">let_expressions</span>, if each successive
          <span class="st200_term term">local_value_declaration</span> is well-typed (with
          respect to the environment and the preceding
          <span class="st200_term term">local_value_declarations</span>), and
          the body of the expression (denoted <span class="st200_term variable">y</span>)
          is of type <span class="st200_term type">t</span>,
          then evaluating the expression results in a value of type
          <span class="st200_term type">t</span>:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s9ss2fo1" href="#st200_p4s9ss2fo1">4.9.2.1. Let type rule (let)</a></div><img class="st200_image" alt="Let type rule (let)" src="png/ty_let.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s9ss3" href="#st200_p4s9ss3">4.9.3</a></div><div class="st200_subsection_title">Operational semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s9ss3pg1" href="#st200_p4s9ss3pg1">1</a></div><div class="st200_paragraph">
          For a <span class="st200_term term">let</span> expression
          <span class="st200_term expression">e</span>, the
          <span class="st200_term term">local_value_declarations</span> are evaluated
          from top-to-bottom with each of the previously evaluated
          declarations being substituted into the current declaration
          before evaluation, by rule
          <span class="st200_term constant">let_locals</span>. When all
          of the declarations have been evaluated, the values of the
          declarations are subsituted into the body of the
          <span class="st200_term term">let</span>
          and <span class="st200_term expression">e</span> evaluates to the
          resulting expression, by rule
          <span class="st200_term constant">let_body</span>.
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s9ss3fo1" href="#st200_p4s9ss3fo1">4.9.3.1. Let semantics (let)</a></div><img class="st200_image" alt="Let semantics (let)" src="png/op_let.png"/></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p4s10" href="#st200_p4s10">4.10</a></div><div class="st200_section_title">Record Projection</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s10ss1" href="#st200_p4s10ss1">4.10.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s10ss1pg1" href="#st200_p4s10ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">record_projection</span> expression returns
          the value of a field from an expression
          <span class="st200_term expression">r</span>, which is expected to be of a
          <a class="st200_link" href="#st200_p5s9">record</a>
          type.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s10ss2" href="#st200_p4s10ss2">4.10.2</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s10ss2pg1" href="#st200_p4s10ss2pg1">1</a></div><div class="st200_paragraph">
          For <span class="st200_term term">record_projection</span> expressions, if an expression
          <span class="st200_term expression">r</span> is of type <span class="st200_term type">t</span>,
          and <span class="st200_term type">t</span> is a record type
          with fields <span class="st200_term variable">𝔽ₘ</span>
          to <span class="st200_term variable">𝔽ₙ</span>, of types
          <span class="st200_term type">tₘ</span> to <span class="st200_term type">tₙ</span>,
          then accessing field <span class="st200_term variable">𝔽ₖ</span> of
          <span class="st200_term expression">r</span>, where
          <span class="st200_term expression">k ∈ [m, n]</span>, results in
          a value of type <span class="st200_term type">tₖ</span>:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s10ss2fo1" href="#st200_p4s10ss2fo1">4.10.2.1. Record projection type rule (record_projection)</a></div><img class="st200_image" alt="Record projection type rule (record_projection)" src="png/ty_record_projection.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s10ss3" href="#st200_p4s10ss3">4.10.3</a></div><div class="st200_subsection_title">Operational semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s10ss3pg1" href="#st200_p4s10ss3pg1">1</a></div><div class="st200_paragraph">
          For a <span class="st200_term term">record_projection</span> expression
          <span class="st200_term expression">e</span>,
          the left hand side of the expression is evaluated, by rule
          <span class="st200_term constant">record_projection_pre</span>, and then
          <span class="st200_term expression">e</span> evaluates to the
          value associated with the label <span class="st200_term expression">k</span>
          by rule <span class="st200_term constant">record_projection_value</span>.
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s10ss3fo1" href="#st200_p4s10ss3fo1">4.10.3.1. Record projection semantics (record_projection)</a></div><img class="st200_image" alt="Record projection semantics (record_projection)" src="png/op_record_projection.png"/></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p4s11" href="#st200_p4s11">4.11</a></div><div class="st200_section_title">Record</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s11ss1" href="#st200_p4s11ss1">4.11.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s11ss1pg1" href="#st200_p4s11ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">record_expression</span> constructs
          a new value of a
          <a class="st200_link" href="#st200_p5s9">record</a>
          type.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s11ss2" href="#st200_p4s11ss2">4.11.2</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s11ss2pg1" href="#st200_p4s11ss2pg1">1</a></div><div class="st200_paragraph">
          If a record type <span class="st200_term type">t</span> exists in the current
          environment, then a record expression creates a new value of type
          <span class="st200_term type">t</span>. Note that the type rule implies that
          all <span class="st200_term term">fields</span> of the corresponding
          record type must be specified exactly once.
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s11ss2fo1" href="#st200_p4s11ss2fo1">4.11.2.1. Record expression type rule (record_expression)</a></div><img class="st200_image" alt="Record expression type rule (record_expression)" src="png/ty_record_expression.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s11ss3" href="#st200_p4s11ss3">4.11.3</a></div><div class="st200_subsection_title">Operational semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s11ss3pg1" href="#st200_p4s11ss3pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">record_expression</span> is
          a set of distinct
          <a class="st200_link" href="#st200_p5s9">record</a>
          field labels with associated expressions. The expressions
          associated with each field are evaluated in the order that they appear
          in the source code, by rules
          <span class="st200_term constant">record_expression_0</span> and
          <span class="st200_term constant">record_expression_1</span>, resulting in
          a new value of type <span class="st200_term type">t</span>.
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s11ss3fo1" href="#st200_p4s11ss3fo1">4.11.3.1. Record expression semantics (record_expression)</a></div><img class="st200_image" alt="Record expression semantics (record_expression)" src="png/op_record_expression.png"/></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p4s12" href="#st200_p4s12">4.12</a></div><div class="st200_section_title">Swizzle</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s12ss1" href="#st200_p4s12ss1">4.12.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s12ss1pg1" href="#st200_p4s12ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">swizzle_expression</span> selects one or
          more named components of an expression of a
          <a class="st200_link" href="#st200_p5s6">vector</a>
          type, returning either a
          scalar value, or another <span class="st200_term term">vector</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s12ss2" href="#st200_p4s12ss2">4.12.2</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s12ss2pg1" href="#st200_p4s12ss2pg1">1</a></div><div class="st200_paragraph">
          For <span class="st200_term term">swizzle_expressions</span>, special type rules
          apply as described in the
          <a class="st200_link" href="#st200_p5s6">Vectors</a>
          section of the
          <a class="st200_link" href="#st200_p5">Types</a> section.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s12ss3" href="#st200_p4s12ss3">4.12.3</a></div><div class="st200_subsection_title">Operational semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s12ss3pg1" href="#st200_p4s12ss3pg1">1</a></div><div class="st200_paragraph">
          For a <span class="st200_term term">swizzle_expression</span>
          <span class="st200_term expression">e</span>,
          the left hand side of the expression is evaluated, by rule
          <span class="st200_term constant">swizzle_pre</span>, and the
          resulting expression is a new vector or scalar value.
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s12ss3fo1" href="#st200_p4s12ss3fo1">4.12.3.1. Swizzle semantics (swizzle)</a></div><img class="st200_image" alt="Swizzle semantics (swizzle)" src="png/op_swizzle.png"/></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p4s13" href="#st200_p4s13">4.13</a></div><div class="st200_section_title">Matrix Column Access</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s13ss1" href="#st200_p4s13ss1">4.13.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s13ss1pg1" href="#st200_p4s13ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">matrix_column_access_expression</span> retrieves
          exactly one column of a 
          <a class="st200_link" href="#st200_p5s7">matrix</a>
          type, returning a value of an appropriate 
          <span class="st200_term term">vector</span> type representing the column.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s13ss2" href="#st200_p4s13ss2">4.13.2</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s13ss2pg1" href="#st200_p4s13ss2pg1">1</a></div><div class="st200_paragraph">
          For <span class="st200_term term">matrix_column_access_expressions</span>, special type rules
          apply as described in the
          <a class="st200_link" href="#st200_p5s7">Matrices</a>
          section of the
          <a class="st200_link" href="#st200_p5">Types</a> section.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s13ss3" href="#st200_p4s13ss3">4.13.3</a></div><div class="st200_subsection_title">Operational semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s13ss3pg1" href="#st200_p4s13ss3pg1">1</a></div><div class="st200_paragraph">
          For a <span class="st200_term term">matrix_column_access_expression</span>
          <span class="st200_term expression">e</span>,
          the first subexpression is evaluated, by rule
          <span class="st200_term constant">matrix_column_access_pre</span>, and the
          resulting expression is a new vector value.
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s13ss3fo1" href="#st200_p4s13ss3fo1">4.13.3.1. Matrix Column Access semantics (matrix_column_access)</a></div><img class="st200_image" alt="Matrix Column Access semantics (matrix_column_access)" src="png/op_matrix_column_access.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s13ss3pg2" href="#st200_p4s13ss3pg2">2</a></div><div class="st200_paragraph">
          Note that the integer constant given as the index of the column
          to return is required by the type rules to be greater than zero
          and less than the number of columns in the type, and therefore
          evaluation cannot fail due to an out-of-range index.
        </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p4s14" href="#st200_p4s14">4.14</a></div><div class="st200_section_title">New</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s14ss1" href="#st200_p4s14ss1">4.14.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s14ss1pg1" href="#st200_p4s14ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">new_expression</span> creates a new
          value of a given type, initialized with the values of the given
          expressions.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s14ss2" href="#st200_p4s14ss2">4.14.2</a></div><div class="st200_subsection_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s14ss2pg1" href="#st200_p4s14ss2pg1">1</a></div><div class="st200_paragraph">
          For <span class="st200_term term">new_expression</span>,
          that construct values of types with the
          <span class="st200_term keyword">new</span> keyword, special type rules
          apply as described in the
          <a class="st200_link" href="#st200_p5s2">Constructors</a>
          section of the
          <a class="st200_link" href="#st200_p5">Types</a> section.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p4s14ss3" href="#st200_p4s14ss3">4.14.3</a></div><div class="st200_subsection_title">Operational semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p4s14ss3pg1" href="#st200_p4s14ss3pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term term">new_expression</span> is of the
          form <span class="st200_term expression">new t x</span>, where
          the <span class="st200_term expression">x</span> is an n-tuple
          of expressions given as
          <a class="st200_link" href="#st200_p5s2">constructor</a>
          arguments. The expressions given are evaluated from left-to-right
          by rules <span class="st200_term constant">new_left_0</span> and
          <span class="st200_term constant">new_left_1</span>, resulting in
          a new value of type <span class="st200_term type">t</span>.
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p4s14ss3fo1" href="#st200_p4s14ss3fo1">4.14.3.1. New semantics (new)</a></div><img class="st200_image" alt="New semantics (new)" src="png/op_new.png"/></div></div></div></div><div class="st200_part_container"><div class="st200_part_title_number"><a id="st200_p5" href="#st200_p5">5</a></div><div class="st200_part_title">Types</div><ul class="st200_contents st200_part_contents_outer st200_part_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p5s1">5.1. Overview</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p5s2">5.2. Constructors</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p5s3">5.3. Integer</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p5s3ss1">5.3.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p5s3ss2">5.3.2. Constructors</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p5s4">5.4. Float</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p5s4ss1">5.4.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p5s4ss2">5.4.2. Constructors</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p5s5">5.5. Boolean</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p5s5ss1">5.5.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p5s5ss2">5.5.2. Constructors</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p5s6">5.6. Vectors</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p5s6ss1">5.6.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p5s6ss2">5.6.2. Constructors</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p5s7">5.7. Matrices</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p5s7ss1">5.7.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p5s7ss2">5.7.2. Constructors</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p5s8">5.8. Samplers</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p5s8ss1">5.8.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p5s8ss2">5.8.2. Constructors</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p5s9">5.9. Records</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p5s9ss1">5.9.1. Description</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p5s9ss2">5.9.2. Constructors</a></li></ul></li></ul><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p5s1" href="#st200_p5s1">5.1</a></div><div class="st200_section_title">Overview</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s1pg1" href="#st200_p5s1pg1">1</a></div><div class="st200_paragraph">
        A <span class="st200_term term">type</span> classifies a set of
        values. Types in the <span class="st200_term package">parasol</span>
        language have <span class="st200_term term">by-name equivalence</span>
        (that is, two types are equal iff they have the same name) and
        the types of all terms are checked <span class="st200_term term">statically</span>.
        All well-typed <span class="st200_term term">terms</span> in the
        language have exactly one <span class="st200_term term">type</span>.
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s1pg2" href="#st200_p5s1pg2">2</a></div><div class="st200_paragraph">
        The language defines a set of <span class="st200_term term">basic types</span>,
        and allows the declaration of new types. The set of basic types is:
      </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s1fo1" href="#st200_p5s1fo1">5.1.1. Basic types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link" href="#st200_p5s3">integer</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s4">float</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s5">boolean</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s6">vector_2i</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s6">vector_3i</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s6">vector_4i</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s6">vector_2f</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s6">vector_3f</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s6">vector_4f</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s7">matrix_3x3f</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s7">matrix_4x4f</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s8">sampler_2d</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s8">sampler_cube</a></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s1pg3" href="#st200_p5s1pg3">3</a></div><div class="st200_paragraph">
        Values of the basic types may be introduced via certain
        <a class="st200_link" href="#st200_p4">literal expressions</a>,
        or via the use of the <span class="st200_term keyword">new</span>
        keyword, which invokes an appropriate
        <a class="st200_link" href="#st200_p5s2">constructor function</a>
        for the given type. The <span class="st200_term term">constructor function</span>
        chosen is based upon the n-tuple of arguments presented to the
        <span class="st200_term keyword">new</span> keyword, and if no appropriate function
        exists, the expression is rejected as ill-typed.
      </div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p5s2" href="#st200_p5s2">5.2</a></div><div class="st200_section_title">Constructors</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s2pg1" href="#st200_p5s2pg1">1</a></div><div class="st200_paragraph">
        Each of the basic types have zero or more associated
        anonymous <span class="st200_term term">constructor functions</span>
        (often abbreviated to <span class="st200_term term">constructors</span>)
        which are responsible for introducing values of the types into the
        environment. An expression of the form
        <span class="st200_term expression">new s (x₀ : t₀, ..., xₙ : tₙ)</span> has
        type <span class="st200_term type">s</span> iff
        there is a <span class="st200_term term">constructor</span> for
        <span class="st200_term type">s</span> of type
        <span class="st200_term type">(t₀ ✕ ... tₙ) → s</span>.
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s2pg2" href="#st200_p5s2pg2">2</a></div><div class="st200_paragraph">
        The descriptions for each of the basic types describe the
        available <span class="st200_term term">constructors</span> for
        each.
      </div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p5s3" href="#st200_p5s3">5.3</a></div><div class="st200_section_title">Integer</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s3ss1" href="#st200_p5s3ss1">5.3.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s3ss1pg1" href="#st200_p5s3ss1pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term type">integer</span> type represents a signed,
          <span class="st200_term constant">32</span> bit, two's-complement integer.
          Values outside of the range
          <span class="st200_term expression">[-(2³¹), (2³¹) - 1]</span> are silently
          wrapped to produce the low-order <span class="st200_term constant">32</span>
          bits of the result.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s3ss2" href="#st200_p5s3ss2">5.3.2</a></div><div class="st200_subsection_title">Constructors</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s3ss2pg1" href="#st200_p5s3ss2pg1">1</a></div><div class="st200_paragraph">
          The type has the following <span class="st200_term term">constructors</span>:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s3ss2fo1" href="#st200_p5s3ss2fo1">5.3.2.1. Constructors</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><span class="st200_term type">integer → integer</span></li><li class="st200_list_item"><span class="st200_term type">boolean → integer</span></li><li class="st200_list_item"><span class="st200_term type">float → integer</span></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s3ss2pg2" href="#st200_p5s3ss2pg2">2</a></div><div class="st200_paragraph">
          The constructor taking a value <span class="st200_term variable">v</span> of 
          type <span class="st200_term type">boolean</span>
          results in an integer value <span class="st200_term constant">0</span> iff
          <span class="st200_term expression">v = false</span> and
          an integer value <span class="st200_term constant">1</span> iff
          <span class="st200_term expression">v = true</span>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s3ss2pg3" href="#st200_p5s3ss2pg3">3</a></div><div class="st200_paragraph">
          The constructor taking a value <span class="st200_term variable">v</span> of 
          type <span class="st200_term type">float</span>
          results in an integer value consisting of the integral part of
          <span class="st200_term variable">v</span> with the fractional part truncated.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s3ss2pg4" href="#st200_p5s3ss2pg4">4</a></div><div class="st200_paragraph">
          The <span class="st200_term type">integer</span> type is a
          <span class="st200_term term">scalar</span> type. As with the other
          <span class="st200_term term">scalar</span> types, the
          type rule for the construction of values of type
          <span class="st200_term type">integer</span> is:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s3ss2fo2" href="#st200_p5s3ss2fo2">5.3.2.2. Scalar new type rule (new_scalar)</a></div><img class="st200_image" alt="Scalar new type rule (new_scalar)" src="png/ty_new_scalar.png"/></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p5s4" href="#st200_p5s4">5.4</a></div><div class="st200_section_title">Float</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s4ss1" href="#st200_p5s4ss1">5.4.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s4ss1pg1" href="#st200_p5s4ss1pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term type">float</span> type represents a single-precision
          IEEE754 floating point number.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s4ss2" href="#st200_p5s4ss2">5.4.2</a></div><div class="st200_subsection_title">Constructors</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s4ss2pg1" href="#st200_p5s4ss2pg1">1</a></div><div class="st200_paragraph">
          The type has the following <span class="st200_term term">constructors</span>:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s4ss2fo1" href="#st200_p5s4ss2fo1">5.4.2.1. Constructors</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><span class="st200_term type">integer → float</span></li><li class="st200_list_item"><span class="st200_term type">boolean → float</span></li><li class="st200_list_item"><span class="st200_term type">float → float</span></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s4ss2pg2" href="#st200_p5s4ss2pg2">2</a></div><div class="st200_paragraph">
          The constructor taking a value <span class="st200_term variable">v</span> of 
          type <span class="st200_term type">boolean</span>
          results in a value <span class="st200_term constant">0.0</span> iff
          <span class="st200_term expression">v = false</span> and
          a value <span class="st200_term constant">1.0</span>
          <span class="st200_term expression">v = true</span>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s4ss2pg3" href="#st200_p5s4ss2pg3">3</a></div><div class="st200_paragraph">
          The constructor taking a value <span class="st200_term variable">v</span> of 
          type <span class="st200_term type">integer</span>
          results in an value with an integral part as close as possible to the
          value of <span class="st200_term variable">v</span> dependent on the internal
          precision of the <span class="st200_term type">float</span> type.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s4ss2pg4" href="#st200_p5s4ss2pg4">4</a></div><div class="st200_paragraph">
          The <span class="st200_term type">float</span> type is a
          <span class="st200_term term">scalar</span> type. As with the other
          <span class="st200_term term">scalar</span> types, the
          type rule for the construction of values of type
          <span class="st200_term type">float</span> is:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s4ss2fo2" href="#st200_p5s4ss2fo2">5.4.2.2. Scalar new type rule (new_scalar)</a></div><img class="st200_image" alt="Scalar new type rule (new_scalar)" src="png/ty_new_scalar.png"/></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p5s5" href="#st200_p5s5">5.5</a></div><div class="st200_section_title">Boolean</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s5ss1" href="#st200_p5s5ss1">5.5.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s5ss1pg1" href="#st200_p5s5ss1pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term type">boolean</span> type represents a
          <span class="st200_term constant">true</span> or <span class="st200_term constant">false</span>
          value.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s5ss2" href="#st200_p5s5ss2">5.5.2</a></div><div class="st200_subsection_title">Constructors</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s5ss2pg1" href="#st200_p5s5ss2pg1">1</a></div><div class="st200_paragraph">
          The type has the following <span class="st200_term term">constructors</span>:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s5ss2fo1" href="#st200_p5s5ss2fo1">5.5.2.1. Constructors</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><span class="st200_term type">boolean → boolean</span></li><li class="st200_list_item"><span class="st200_term type">float → boolean</span></li><li class="st200_list_item"><span class="st200_term type">integer → boolean</span></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s5ss2pg2" href="#st200_p5s5ss2pg2">2</a></div><div class="st200_paragraph">
          The constructor taking a value <span class="st200_term variable">v</span> of 
          type <span class="st200_term type">float</span>
          results in a value <span class="st200_term constant">false</span> iff
          <span class="st200_term expression">v = 0.0</span> and
          a value <span class="st200_term constant">true</span> otherwise.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s5ss2pg3" href="#st200_p5s5ss2pg3">3</a></div><div class="st200_paragraph">
          The constructor taking a value <span class="st200_term variable">v</span> of 
          type <span class="st200_term type">integer</span>
          results in a value <span class="st200_term constant">false</span> iff
          <span class="st200_term expression">v = 0</span> and
          a value <span class="st200_term constant">true</span> otherwise.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s5ss2pg4" href="#st200_p5s5ss2pg4">4</a></div><div class="st200_paragraph">
          The <span class="st200_term type">boolean</span> type is a
          <span class="st200_term term">scalar</span> type. As with the other
          <span class="st200_term term">scalar</span> types, the
          type rule for the construction of values of type
          <span class="st200_term type">boolean</span> is:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s5ss2fo2" href="#st200_p5s5ss2fo2">5.5.2.2. Scalar new type rule (new_scalar)</a></div><img class="st200_image" alt="Scalar new type rule (new_scalar)" src="png/ty_new_scalar.png"/></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p5s6" href="#st200_p5s6">5.6</a></div><div class="st200_section_title">Vectors</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s6ss1" href="#st200_p5s6ss1">5.6.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss1pg1" href="#st200_p5s6ss1pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term type">vector_NT</span> types represent
          fixed-length vectors, where <span class="st200_term expression">N ∈ [2, 4]</span>
          and represents the number of components in the vector,
          and <span class="st200_term expression">T ∈ {f, i}</span>
          where <span class="st200_term constant">f</span> indicates that the components
          of the vector are of type
          <a class="st200_link" href="#st200_p5s4">float</a>
          and <span class="st200_term constant">i</span>
          indicates that the components of the vector are of type
          <a class="st200_link" href="#st200_p5s3">integer</a>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss1pg2" href="#st200_p5s6ss1pg2">2</a></div><div class="st200_paragraph">
          The components of the <span class="st200_term type">vector_NT</span> types
          are labelled, in order, from the n-tuple of labels
          <span class="st200_term expression">K = (x, y, z, w)</span>.
          At most <span class="st200_term expression">N</span> labels are used for each type,
          so the first, second, third, and fourth elements of the
          <span class="st200_term type">vector_4T</span> types are labelled
          <span class="st200_term constant">x</span>, <span class="st200_term constant">y</span>,
          <span class="st200_term constant">z</span>, and <span class="st200_term constant">w</span>,
          respectively. The <span class="st200_term type">vector_3T</span> types lack a
          <span class="st200_term constant">w</span> component, and the
          <span class="st200_term type">vector_2T</span> types lack both
          <span class="st200_term constant">z</span> and <span class="st200_term constant">w</span>
          components.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss1pg3" href="#st200_p5s6ss1pg3">3</a></div><div class="st200_paragraph">
          The values of the components of the <span class="st200_term type">vector_NT</span> types
          are extracted via <span class="st200_term term">swizzle</span> expressions. A
          <span class="st200_term term">swizzle</span> expression consists of an n-tuple
          <span class="st200_term expression">Sₚ</span>
          of labels taken from the set <span class="st200_term expression">S = tuples(L, M)</span> of
          n-tuples, where
          <span class="st200_term expression">M &lt;= N</span>,
          <span class="st200_term expression">L</span> is the first
          <span class="st200_term expression">M - 1</span> elements of <span class="st200_term expression">K</span>,
          and <span class="st200_term expression">0 &lt;= P &lt;= |S|</span>,
          and evaluates to
          a value of type <span class="st200_term type">vector_MT</span>
          or, in the case that <span class="st200_term expression">M = 1</span>,
          a scalar value of type <span class="st200_term type">T</span>,
          consisting of the values of the components named in <span class="st200_term expression">Sₚ</span>:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s6ss1fo1" href="#st200_p5s6ss1fo1">5.6.1.1. Swizzle vector type rule (vector_swizzle)</a></div><img class="st200_image" alt="Swizzle vector type rule (vector_swizzle)" src="png/ty_vector_swizzle.png"/></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s6ss1fo2" href="#st200_p5s6ss1fo2">5.6.1.2. Swizzle scalar type rule (vector_swizzle_single)</a></div><img class="st200_image" alt="Swizzle scalar type rule (vector_swizzle_single)" src="png/ty_vector_swizzle_single.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss1pg4" href="#st200_p5s6ss1pg4">4</a></div><div class="st200_paragraph">
          Algebraically, <span class="st200_term term">swizzling</span> is analogous to
          multiplication of a vector <span class="st200_term variable">v</span> of size
          <span class="st200_term expression">N</span>
          by an <span class="st200_term expression">NxN</span> matrix
          <span class="st200_term variable">p</span>, where each row of
          <span class="st200_term variable">p</span> consists of
          <span class="st200_term expression">N - 1</span> zeroes and exactly one
          <span class="st200_term expression">1</span>:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p5s6ss1fo3" href="#st200_p5s6ss1fo3">5.6.1.3. Swizzle matrix example</a></div><img class="st200_image" alt="Swizzle matrix example" src="png/ex_matrix_swizzle_example.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s6ss2" href="#st200_p5s6ss2">5.6.2</a></div><div class="st200_subsection_title">Constructors</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss2pg1" href="#st200_p5s6ss2pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term term">constructors</span> of the
          <span class="st200_term type">vector_NT</span> types
          can be conceptually divided into <span class="st200_term term">primary</span>
          and <span class="st200_term term">auxiliary constructors</span>. Each
          <span class="st200_term type">vector_NT</span> type has exactly one
          <span class="st200_term term">primary constructor</span> which initializes
          the components of the resulting <span class="st200_term type">vector_NT</span>
          value to the values of the expressions in the exact order given.
          There is no practical or visible difference between a
          <span class="st200_term term">primary</span> and
          <span class="st200_term term">auxiliary constructor</span>; the distinction
          is simply made for the purposes of describing the typing rules.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss2pg2" href="#st200_p5s6ss2pg2">2</a></div><div class="st200_paragraph">
          The types of the <span class="st200_term term">primary constructors</span> for
          each type are:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s6ss2fo1" href="#st200_p5s6ss2fo1">5.6.2.1. Vector primary constructors</a></div><table class="st200_table" summary="Vector primary constructors"><thead class="st200_table_head"><tr><th class="st200_table_column_name">Type</th><th class="st200_table_column_name">Constructor type</th></tr></thead><tbody class="st200_table_body"><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_2i</span></td><td class="st200_table_cell"><span class="st200_term type">(integer, integer) → vector_2i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3i</span></td><td class="st200_table_cell"><span class="st200_term type">(integer, integer, integer) → vector_3i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">(integer, integer, integer, integer) → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_2f</span></td><td class="st200_table_cell"><span class="st200_term type">(float, float) → vector_2f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3f</span></td><td class="st200_table_cell"><span class="st200_term type">(float, float, float) → vector_3f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">(float, float, float, float) → vector_4f</span></td></tr></tbody></table></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss2pg3" href="#st200_p5s6ss2pg3">3</a></div><div class="st200_paragraph">
          Given the presence of <span class="st200_term term">primary constructors</span>,
          the type rule for the construction of a vector using the
          <span class="st200_term keyword">new</span> keyword is:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s6ss2fo2" href="#st200_p5s6ss2fo2">5.6.2.2. Vector new type rule (vector_new)</a></div><img class="st200_image" alt="Vector new type rule (vector_new)" src="png/ty_vector_new.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss2pg4" href="#st200_p5s6ss2pg4">4</a></div><div class="st200_paragraph">
          The <span class="st200_term term">auxiliary constructors</span> for the
          <span class="st200_term type">vector_NT</span> types are:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s6ss2fo3" href="#st200_p5s6ss2fo3">5.6.2.3. Vector auxiliary constructors</a></div><table class="st200_table" summary="Vector auxiliary constructors"><thead class="st200_table_head"><tr><th class="st200_table_column_name">Type</th><th class="st200_table_column_name">Constructor type</th></tr></thead><tbody class="st200_table_body"><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_2i</span></td><td class="st200_table_cell"><span class="st200_term type">vector_2i → vector_2i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3i</span></td><td class="st200_table_cell"><span class="st200_term type">(integer, vector_2i) → vector_3i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3i</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_2i, integer) → vector_3i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3i</span></td><td class="st200_table_cell"><span class="st200_term type">vector_3i → vector_3i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_2i, integer, integer) → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">(integer, vector_2i, integer) → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_2i, vector_2i) → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">(integer, integer, vector_2i) → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_3i, integer) → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">(integer, vector_3i) → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">vector_4i → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_2f</span></td><td class="st200_table_cell"><span class="st200_term type">vector_2f → vector_2f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3f</span></td><td class="st200_table_cell"><span class="st200_term type">(float, vector_2f) → vector_3f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3f</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_2f, float) → vector_3f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3f</span></td><td class="st200_table_cell"><span class="st200_term type">vector_3f → vector_3f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_2f, float, float) → vector_4f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">(float, vector_2f, float) → vector_4f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_2f, vector_2f) → vector_4f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">(float, float, vector_2f) → vector_4f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_3f, float) → vector_4f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">(float, vector_3f) → vector_4f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">vector_4f → vector_4f</span></td></tr></tbody></table></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss2pg5" href="#st200_p5s6ss2pg5">5</a></div><div class="st200_paragraph">
          For each <span class="st200_term term">auxiliary constructor</span> for a given
          <span class="st200_term type">vector_NT</span> type, the values of the scalars (if any),
          and the values of the components of the given vectors (if any), are concatenated
          together in the order given to produce an n-tuple of length
          <span class="st200_term variable">N</span>
          which is then passed directly to the
          <span class="st200_term term">primary constructor</span> for the given type.
        </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p5s7" href="#st200_p5s7">5.7</a></div><div class="st200_section_title">Matrices</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s7ss1" href="#st200_p5s7ss1">5.7.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s7ss1pg1" href="#st200_p5s7ss1pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term type">matrix_NxNf</span> types represent
          square matrices, where <span class="st200_term expression">N ∈ [3, 4]</span>
          and represents the number of rows/columns in the matrix.
          Only matrices with elements of type
          <a class="st200_link" href="#st200_p5s4">float</a>
          are provided.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s7ss1pg2" href="#st200_p5s7ss1pg2">2</a></div><div class="st200_paragraph">
          The columns of values of <span class="st200_term type">matrix_NxNf</span> types
          are extracted via <span class="st200_term term">matrix_column_access</span> expressions. A
          <span class="st200_term term">matrix_column_access</span> expression consists of an
          expression <span class="st200_term expression">e</span> of a 
          <span class="st200_term type">matrix_NxNf</span> type, and an integer constant
          <span class="st200_term expression">K</span> where 
          <span class="st200_term expression">0 &lt;= K &lt; N</span>, and evaluates to
          a value of type <span class="st200_term type">vector_Nf</span> representing
          the <span class="st200_term expression">K</span>th column of <span class="st200_term expression">e</span>.
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s7ss1fo1" href="#st200_p5s7ss1fo1">5.7.1.1. Matrix Column Access type rule (matrix_column_access)</a></div><img class="st200_image" alt="Matrix Column Access type rule (matrix_column_access)" src="png/ty_matrix_column_access.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s7ss2" href="#st200_p5s7ss2">5.7.2</a></div><div class="st200_subsection_title">Constructors</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s7ss2pg1" href="#st200_p5s7ss2pg1">1</a></div><div class="st200_paragraph">
          Values of the <span class="st200_term type">matrix_NxNf</span> types are
          constructed by providing exactly <span class="st200_term expression">N</span>
          <span class="st200_term term">column vectors</span> of size
          <span class="st200_term expression">N</span>. This is reflected in the
          available <span class="st200_term term">constructors</span> for the
          <span class="st200_term type">matrix_NxNf</span> types:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s7ss2fo1" href="#st200_p5s7ss2fo1">5.7.2.1. Matrix constructors</a></div><table class="st200_table" summary="Matrix constructors"><thead class="st200_table_head"><tr><th class="st200_table_column_name">Type</th><th class="st200_table_column_name">Constructor type</th></tr></thead><tbody class="st200_table_body"><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">matrix_3x3f</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_3f, vector_3f, vector_3f) → matrix_3x3f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">matrix_4x4f</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_4f, vector_4f, vector_4f, vector_4f) → matrix_4x4f</span></td></tr></tbody></table></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s7ss2pg2" href="#st200_p5s7ss2pg2">2</a></div><div class="st200_paragraph">
          The type rule for the construction of matrices with the
          <span class="st200_term keyword">new</span> keyword is:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s7ss2fo2" href="#st200_p5s7ss2fo2">5.7.2.2. Matrix new type rule (matrix_new)</a></div><img class="st200_image" alt="Matrix new type rule (matrix_new)" src="png/ty_matrix_new.png"/></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p5s8" href="#st200_p5s8">5.8</a></div><div class="st200_section_title">Samplers</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s8ss1" href="#st200_p5s8ss1">5.8.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s8ss1pg1" href="#st200_p5s8ss1pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term type">sampler_2d</span> and
          <span class="st200_term type">sampler_cube</span> types represent
          abstract <span class="st200_term term">handles</span> to two-dimensional
          and cube textures, respectively.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s8ss2" href="#st200_p5s8ss2">5.8.2</a></div><div class="st200_subsection_title">Constructors</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s8ss2pg1" href="#st200_p5s8ss2pg1">1</a></div><div class="st200_paragraph">
          The types have no constructors and there is no way to
          create new values of the types in the language. They are
          intended for use as parameters to
          <a class="st200_link" href="#st200_p3s4">shaders</a>.
        </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p5s9" href="#st200_p5s9">5.9</a></div><div class="st200_section_title">Records</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s9ss1" href="#st200_p5s9ss1">5.9.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s9ss1pg1" href="#st200_p5s9ss1pg1">1</a></div><div class="st200_paragraph">
          Record types are composite types consisting of labelled
          fields. Values of record types are constructed with the
          <span class="st200_term keyword">new</span> keyword, and values
          of fields are accessed with
          <a class="st200_link" href="#st200_p4s10">record_projection</a>
          expressions.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s9ss1pg2" href="#st200_p5s9ss1pg2">2</a></div><div class="st200_paragraph">
          Only a subset of the available types can be used as fields in records:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p5s9ss1fo1" href="#st200_p5s9ss1fo1">5.9.1.1. Record field types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link" href="#st200_p5s3">integer</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s4">float</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s5">boolean</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s6">vector_NT</a></li><li class="st200_list_item"><a class="st200_link" href="#st200_p5s7">matrix_NxNf</a></li><li class="st200_list_item">User-defined <a class="st200_link" href="#st200_p5s9">record</a> types</li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s9ss2" href="#st200_p5s9ss2">5.9.2</a></div><div class="st200_subsection_title">Constructors</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s9ss2pg1" href="#st200_p5s9ss2pg1">1</a></div><div class="st200_paragraph">
          Record types do not have <span class="st200_term term">constructors</span>
          and values of record types can only be introduced with
          <a class="st200_link" href="#st200_p4s11">record expressions</a>.
        </div></div></div></div></div><div class="st200_part_container"><div class="st200_part_title_number"><a id="st200_p6" href="#st200_p6">6</a></div><div class="st200_part_title">Compilation and Execution</div><ul class="st200_contents st200_part_contents_outer st200_part_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p6s1">6.1. Overview</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p6s2">6.2. Lifecycle</a></li></ul><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p6s1" href="#st200_p6s1">6.1</a></div><div class="st200_section_title">Overview</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p6s1pg1" href="#st200_p6s1pg1">1</a></div><div class="st200_paragraph">
        This section attempts to informally document the typical life cycle
        of a <span class="st200_term package">parasol</span> program, from its initial
        state as a set of source code, to its final state executing on a GPU,
        from a somewhat abstract and idealized viewpoint. The intention is to
        allow the reader to better understand how the given operational
        semantics fit together and how the language as structured results
        in a working program.
      </div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p6s2" href="#st200_p6s2">6.2</a></div><div class="st200_section_title">Lifecycle</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p6s2pg1" href="#st200_p6s2pg1">1</a></div><div class="st200_paragraph">
        First, the intended program is <span class="st200_term term">compiled</span>:
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p6s2fo1" href="#st200_p6s2fo1">6.2.1. Compilation</a></div><ol class="st200_list_ordered"><li class="st200_list_item">
            The user submits a series of <a class="st200_link" href="#st200_p2s1">units</a>,
            in no particular order, to the
            <span class="st200_term package">parasol</span> implementation compiler, along with the
            fully-qualified name of a
            <a class="st200_link" href="#st200_p3s7">program</a>.
          </li><li class="st200_list_item">
            The compiler combines the <span class="st200_term term">units</span>, checks
            for <a class="st200_link" href="#st200_p3s8">module</a>
            name collisions, checks the sanity of the submitted modules,
            resolves all names, and checks the
            <a class="st200_link" href="#st200_p5">types</a>
            of all
            <a class="st200_link" href="#st200_p3s2">terms</a>.
          </li><li class="st200_list_item">
            The compiler then erases all <span class="st200_term term">module_declarations</span> from
            the environment, renaming all <span class="st200_term term">terms</span> to result in a set
            of <span class="st200_term term">terms</span> with unique names.
          </li><li class="st200_list_item">
            The compiler then determines all <span class="st200_term term">terms</span> upon which
            the <a class="st200_link" href="#st200_p3s7">program</a>
            depends, removing all unused <span class="st200_term term">terms</span> and sorting
            the resulting <span class="st200_term term">terms</span> topologically.
          </li></ol></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p6s2pg2" href="#st200_p6s2pg2">2</a></div><div class="st200_paragraph">
        At this point,
        the environment contains a
        <a class="st200_link" href="#st200_p3s5">vertex shader</a>
        <span class="st200_term expression">V</span>
        with an associated ordered set of <span class="st200_term term">terms</span>
        <span class="st200_term expression">T</span>, and
        <a class="st200_link" href="#st200_p3s6">fragment shader</a>
        <span class="st200_term expression">F</span>
        with an associated ordered set of <span class="st200_term term">terms</span>
        <span class="st200_term expression">U</span>.
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p6s2pg3" href="#st200_p6s2pg3">3</a></div><div class="st200_paragraph">
        <span class="st200_term term">Execution</span> then proceeds as follows:
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p6s2fo2" href="#st200_p6s2fo2">6.2.2. Execution</a></div><ol class="st200_list_ordered"><li class="st200_list_item">
            Execution of <span class="st200_term expression">V</span> begins.
          </li><li class="st200_list_item">
            The <span class="st200_term term">terms</span> in <span class="st200_term expression">T</span> are
            evaluated in the order given.
          </li><li class="st200_list_item">
            The operational semantics imply that the values of the terms in
            <span class="st200_term expression">T</span> have been substituted into the
            <a class="st200_link" href="#st200_p3s5ss2">local declarations</a>
            of <span class="st200_term expression">V</span>. The
            local declarations defined in <span class="st200_term expression">V</span> are evaluated.
          </li><li class="st200_list_item">
            The values resulting from evaluation are written to the
            outputs of <span class="st200_term expression">V</span>.
          </li><li class="st200_list_item">
            Execution of <span class="st200_term expression">F</span> begins.
          </li><li class="st200_list_item">
            The <span class="st200_term term">terms</span> in <span class="st200_term expression">U</span> are
            evaluated in the order given.
          </li><li class="st200_list_item">
            The operational semantics imply that the values of the terms in
            <span class="st200_term expression">U</span> have been substituted into the
            <a class="st200_link" href="#st200_p3s6ss2">local declarations</a>
            of <span class="st200_term expression">F</span>. The
            local declarations defined in <span class="st200_term expression">F</span> are evaluated.
          </li><li class="st200_list_item">
            If <span class="st200_term expression">F</span> contains a
            <a class="st200_link" href="#st200_p3s6ss3">discard</a>
            declaration, and the condition evaluates to <span class="st200_term constant">true</span>,
            execution of <span class="st200_term expression">F</span> halts and no
            output is produced.
          </li><li class="st200_list_item">
            The values resulting from evaluation are written to the
            outputs of <span class="st200_term expression">F</span>.
          </li></ol></div></div></div><div class="st200_part_container"><div class="st200_part_title_number"><a id="st200_p7" href="#st200_p7">7</a></div><div class="st200_part_title">Standard Library Reference</div><ul class="st200_contents st200_part_contents_outer st200_part_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p7s1">7.1. Module com.io7m.parasol.Boolean</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s1ss1">7.1.1. or</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p7s2">7.2. Module com.io7m.parasol.Float</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss1">7.2.1. absolute</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss2">7.2.2. add</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss3">7.2.3. arc_cosine</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss4">7.2.4. arc_sine</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss5">7.2.5. arc_tangent</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss6">7.2.6. ceiling</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss7">7.2.7. clamp</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss8">7.2.8. cosine</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss9">7.2.9. divide</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss10">7.2.10. equals</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss11">7.2.11. floor</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss12">7.2.12. greater</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss13">7.2.13. greater_or_equal</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss14">7.2.14. interpolate</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss15">7.2.15. is_infinite</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss16">7.2.16. is_nan</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss17">7.2.17. lesser</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss18">7.2.18. lesser_or_equal</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss19">7.2.19. log2</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss20">7.2.20. maximum</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss21">7.2.21. minimum</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss22">7.2.22. modulo</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss23">7.2.23. multiply</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss24">7.2.24. negate</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss25">7.2.25. power</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss26">7.2.26. round</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss27">7.2.27. sign</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss28">7.2.28. sine</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss29">7.2.29. square_root</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss30">7.2.30. subtract</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss31">7.2.31. tangent</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s2ss32">7.2.32. truncate</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p7s3">7.3. Module com.io7m.parasol.Integer</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s3ss1">7.3.1. add</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s3ss2">7.3.2. divide</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s3ss3">7.3.3. multiply</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s3ss4">7.3.4. subtract</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p7s4">7.4. Module com.io7m.parasol.Matrix3x3f</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s4ss1">7.4.1. multiply</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s4ss2">7.4.2. multiply_vector</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p7s5">7.5. Module com.io7m.parasol.Matrix4x4f</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s5ss1">7.5.1. multiply</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s5ss2">7.5.2. multiply_vector</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p7s6">7.6. Module com.io7m.parasol.Sampler2D</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s6ss1">7.6.1. texture</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s6ss2">7.6.2. texture_with_offset</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s6ss3">7.6.3. texture_with_lod</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p7s7">7.7. Module com.io7m.parasol.Vector2f</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s7ss1">7.7.1. add</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s7ss2">7.7.2. add_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s7ss3">7.7.3. divide</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s7ss4">7.7.4. divide_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s7ss5">7.7.5. dot</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s7ss6">7.7.6. interpolate</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s7ss7">7.7.7. magnitude</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s7ss8">7.7.8. multiply</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s7ss9">7.7.9. multiply_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s7ss10">7.7.10. negate</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s7ss11">7.7.11. normalize</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s7ss12">7.7.12. reflect</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s7ss13">7.7.13. refract</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s7ss14">7.7.14. subtract</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p7s8">7.8. Module com.io7m.parasol.Vector2i</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s8ss1">7.8.1. add</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s8ss2">7.8.2. add_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s8ss3">7.8.3. divide</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s8ss4">7.8.4. divide_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s8ss5">7.8.5. dot</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s8ss6">7.8.6. interpolate</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s8ss7">7.8.7. magnitude</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s8ss8">7.8.8. multiply</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s8ss9">7.8.9. multiply_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s8ss10">7.8.10. negate</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s8ss11">7.8.11. normalize</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s8ss12">7.8.12. reflect</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s8ss13">7.8.13. refract</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s8ss14">7.8.14. subtract</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p7s9">7.9. Module com.io7m.parasol.Vector3f</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s9ss1">7.9.1. add</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s9ss2">7.9.2. add_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s9ss3">7.9.3. divide</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s9ss4">7.9.4. divide_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s9ss5">7.9.5. cross</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s9ss6">7.9.6. dot</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s9ss7">7.9.7. interpolate</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s9ss8">7.9.8. magnitude</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s9ss9">7.9.9. multiply</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s9ss10">7.9.10. multiply_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s9ss11">7.9.11. negate</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s9ss12">7.9.12. normalize</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s9ss13">7.9.13. reflect</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s9ss14">7.9.14. refract</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s9ss15">7.9.15. subtract</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p7s10">7.10. Module com.io7m.parasol.Vector3i</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s10ss1">7.10.1. add</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s10ss2">7.10.2. add_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s10ss3">7.10.3. divide</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s10ss4">7.10.4. divide_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s10ss5">7.10.5. dot</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s10ss6">7.10.6. interpolate</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s10ss7">7.10.7. magnitude</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s10ss8">7.10.8. multiply</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s10ss9">7.10.9. multiply_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s10ss10">7.10.10. negate</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s10ss11">7.10.11. normalize</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s10ss12">7.10.12. reflect</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s10ss13">7.10.13. refract</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s10ss14">7.10.14. subtract</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p7s11">7.11. Module com.io7m.parasol.Vector4f</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s11ss1">7.11.1. add</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s11ss2">7.11.2. add_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s11ss3">7.11.3. divide</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s11ss4">7.11.4. divide_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s11ss5">7.11.5. dot</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s11ss6">7.11.6. interpolate</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s11ss7">7.11.7. magnitude</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s11ss8">7.11.8. multiply</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s11ss9">7.11.9. multiply_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s11ss10">7.11.10. negate</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s11ss11">7.11.11. normalize</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s11ss12">7.11.12. reflect</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s11ss13">7.11.13. refract</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s11ss14">7.11.14. subtract</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p7s12">7.12. Module com.io7m.parasol.Vector4i</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s12ss1">7.12.1. add</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s12ss2">7.12.2. add_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s12ss3">7.12.3. divide</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s12ss4">7.12.4. divide_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s12ss5">7.12.5. dot</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s12ss6">7.12.6. interpolate</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s12ss7">7.12.7. magnitude</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s12ss8">7.12.8. multiply</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s12ss9">7.12.9. multiply_scalar</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s12ss10">7.12.10. negate</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s12ss11">7.12.11. normalize</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s12ss12">7.12.12. reflect</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s12ss13">7.12.13. refract</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p7s12ss14">7.12.14. subtract</a></li></ul></li></ul><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p7s1" href="#st200_p7s1">7.1</a></div><div class="st200_section_title">Module com.io7m.parasol.Boolean</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s1ss1">7.1.1. or</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s1ss1" href="#st200_p7s1ss1">7.1.1</a></div><div class="st200_subsection_title">or</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s1ss1fo1" href="#st200_p7s1ss1fo1">7.1.1.1. or Definition</a></div><pre class="st200_verbatim">function or (x : boolean, y : boolean) : boolean</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s1ss1pg1" href="#st200_p7s1ss1pg1">1</a></div><div class="st200_paragraph">
          Return the <span class="st200_term constant">true</span> iff
          <span class="st200_term expression">x == true</span> or
          <span class="st200_term expression">y == true</span>.
        </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p7s2" href="#st200_p7s2">7.2</a></div><div class="st200_section_title">Module com.io7m.parasol.Float</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss1">7.2.1. absolute</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss2">7.2.2. add</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss3">7.2.3. arc_cosine</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss4">7.2.4. arc_sine</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss5">7.2.5. arc_tangent</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss6">7.2.6. ceiling</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss7">7.2.7. clamp</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss8">7.2.8. cosine</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss9">7.2.9. divide</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss10">7.2.10. equals</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss11">7.2.11. floor</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss12">7.2.12. greater</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss13">7.2.13. greater_or_equal</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss14">7.2.14. interpolate</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss15">7.2.15. is_infinite</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss16">7.2.16. is_nan</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss17">7.2.17. lesser</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss18">7.2.18. lesser_or_equal</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss19">7.2.19. log2</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss20">7.2.20. maximum</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss21">7.2.21. minimum</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss22">7.2.22. modulo</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss23">7.2.23. multiply</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss24">7.2.24. negate</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss25">7.2.25. power</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss26">7.2.26. round</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss27">7.2.27. sign</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss28">7.2.28. sine</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss29">7.2.29. square_root</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss30">7.2.30. subtract</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss31">7.2.31. tangent</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s2ss32">7.2.32. truncate</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss1" href="#st200_p7s2ss1">7.2.1</a></div><div class="st200_subsection_title">absolute</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss1fo1" href="#st200_p7s2ss1fo1">7.2.1.1. absolute Definition</a></div><pre class="st200_verbatim">function absolute (x : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss1pg1" href="#st200_p7s2ss1pg1">1</a></div><div class="st200_paragraph">Return the absolute value of <span class="st200_term variable">x</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss2" href="#st200_p7s2ss2">7.2.2</a></div><div class="st200_subsection_title">add</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss2fo1" href="#st200_p7s2ss2fo1">7.2.2.1. add Definition</a></div><pre class="st200_verbatim">function add (x : float, y : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss2pg1" href="#st200_p7s2ss2pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term expression">x + y</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss3" href="#st200_p7s2ss3">7.2.3</a></div><div class="st200_subsection_title">arc_cosine</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss3fo1" href="#st200_p7s2ss3fo1">7.2.3.1. arc_cosine Definition</a></div><pre class="st200_verbatim">function arc_cosine (x : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss3pg1" href="#st200_p7s2ss3pg1">1</a></div><div class="st200_paragraph">Return the arc cosine <span class="st200_term expression">acos(x)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss4" href="#st200_p7s2ss4">7.2.4</a></div><div class="st200_subsection_title">arc_sine</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss4fo1" href="#st200_p7s2ss4fo1">7.2.4.1. arc_sine Definition</a></div><pre class="st200_verbatim">function arc_sine (x : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss4pg1" href="#st200_p7s2ss4pg1">1</a></div><div class="st200_paragraph">Return the arc sine <span class="st200_term expression">asin(x)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss5" href="#st200_p7s2ss5">7.2.5</a></div><div class="st200_subsection_title">arc_tangent</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss5fo1" href="#st200_p7s2ss5fo1">7.2.5.1. arc_tangent Definition</a></div><pre class="st200_verbatim">function arc_tangent (x : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss5pg1" href="#st200_p7s2ss5pg1">1</a></div><div class="st200_paragraph">Return the arc tangent <span class="st200_term expression">atan(x)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss6" href="#st200_p7s2ss6">7.2.6</a></div><div class="st200_subsection_title">ceiling</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss6fo1" href="#st200_p7s2ss6fo1">7.2.6.1. ceiling Definition</a></div><pre class="st200_verbatim">function ceiling (x : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss6pg1" href="#st200_p7s2ss6pg1">1</a></div><div class="st200_paragraph">Return a value equal to the nearest integer that is greater than or equal to <span class="st200_term variable">x</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss7" href="#st200_p7s2ss7">7.2.7</a></div><div class="st200_subsection_title">clamp</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss7fo1" href="#st200_p7s2ss7fo1">7.2.7.1. clamp Definition</a></div><pre class="st200_verbatim">function clamp (x : float, min : float, max : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss7pg1" href="#st200_p7s2ss7pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term expression">x</span> constrainted to the range <span class="st200_term expression">[min, max]</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss8" href="#st200_p7s2ss8">7.2.8</a></div><div class="st200_subsection_title">cosine</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss8fo1" href="#st200_p7s2ss8fo1">7.2.8.1. cosine Definition</a></div><pre class="st200_verbatim">function cosine (x : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss8pg1" href="#st200_p7s2ss8pg1">1</a></div><div class="st200_paragraph">Return the cosine <span class="st200_term expression">cos(x)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss9" href="#st200_p7s2ss9">7.2.9</a></div><div class="st200_subsection_title">divide</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss9fo1" href="#st200_p7s2ss9fo1">7.2.9.1. divide Definition</a></div><pre class="st200_verbatim">function divide (x : float, y : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss9pg1" href="#st200_p7s2ss9pg1">1</a></div><div class="st200_paragraph">Return the division <span class="st200_term expression">x / y</span>. The result is only defined if <span class="st200_term expression">y &gt; 0</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss10" href="#st200_p7s2ss10">7.2.10</a></div><div class="st200_subsection_title">equals</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss10fo1" href="#st200_p7s2ss10fo1">7.2.10.1. equals Definition</a></div><pre class="st200_verbatim">function equals (x : float, y : float) : boolean</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss10pg1" href="#st200_p7s2ss10pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term constant">true</span> iff <span class="st200_term expression">x == y</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss11" href="#st200_p7s2ss11">7.2.11</a></div><div class="st200_subsection_title">floor</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss11fo1" href="#st200_p7s2ss11fo1">7.2.11.1. floor Definition</a></div><pre class="st200_verbatim">function floor (x : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss11pg1" href="#st200_p7s2ss11pg1">1</a></div><div class="st200_paragraph">Return a value equal to the nearest integer that is less than or equal to <span class="st200_term variable">x</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss12" href="#st200_p7s2ss12">7.2.12</a></div><div class="st200_subsection_title">greater</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss12fo1" href="#st200_p7s2ss12fo1">7.2.12.1. greater Definition</a></div><pre class="st200_verbatim">function greater (x : float, y : float) : boolean</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss12pg1" href="#st200_p7s2ss12pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term constant">true</span> iff <span class="st200_term expression">x &gt; y</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss13" href="#st200_p7s2ss13">7.2.13</a></div><div class="st200_subsection_title">greater_or_equal</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss13fo1" href="#st200_p7s2ss13fo1">7.2.13.1. greater_or_equal Definition</a></div><pre class="st200_verbatim">function greater_or_equal (x : float, y : float) : boolean</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss13pg1" href="#st200_p7s2ss13pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term constant">true</span> iff <span class="st200_term expression">x &gt;= y</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss14" href="#st200_p7s2ss14">7.2.14</a></div><div class="st200_subsection_title">interpolate</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss14fo1" href="#st200_p7s2ss14fo1">7.2.14.1. interpolate Definition</a></div><pre class="st200_verbatim">function interpolate (x : float, y : float, a : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss14pg1" href="#st200_p7s2ss14pg1">1</a></div><div class="st200_paragraph">
          Return a linearly interpolated value in the range <span class="st200_term expression">[x, y]</span>
          given by <span class="st200_term expression">(x ✕ (1 - a)) + (y ✕ a)</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss15" href="#st200_p7s2ss15">7.2.15</a></div><div class="st200_subsection_title">is_infinite</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss15fo1" href="#st200_p7s2ss15fo1">7.2.15.1. is_infinite Definition</a></div><pre class="st200_verbatim">function is_infinite (x : float) : boolean</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss15pg1" href="#st200_p7s2ss15pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term constant">true</span> iff <span class="st200_term expression">x == infinity</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss16" href="#st200_p7s2ss16">7.2.16</a></div><div class="st200_subsection_title">is_nan</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss16fo1" href="#st200_p7s2ss16fo1">7.2.16.1. is_nan Definition</a></div><pre class="st200_verbatim">function is_nan (x : float) : boolean</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss16pg1" href="#st200_p7s2ss16pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term constant">true</span> iff <span class="st200_term expression">x</span> is not a number.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss17" href="#st200_p7s2ss17">7.2.17</a></div><div class="st200_subsection_title">lesser</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss17fo1" href="#st200_p7s2ss17fo1">7.2.17.1. lesser Definition</a></div><pre class="st200_verbatim">function lesser (x : float, y : float) : boolean</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss17pg1" href="#st200_p7s2ss17pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term constant">true</span> iff <span class="st200_term expression">x &lt; y</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss18" href="#st200_p7s2ss18">7.2.18</a></div><div class="st200_subsection_title">lesser_or_equal</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss18fo1" href="#st200_p7s2ss18fo1">7.2.18.1. lesser_or_equal Definition</a></div><pre class="st200_verbatim">function lesser_or_equal (x : float, y : float) : boolean</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss18pg1" href="#st200_p7s2ss18pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term constant">true</span> iff <span class="st200_term expression">x &lt;= y</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss19" href="#st200_p7s2ss19">7.2.19</a></div><div class="st200_subsection_title">log2</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss19fo1" href="#st200_p7s2ss19fo1">7.2.19.1. log2 Definition</a></div><pre class="st200_verbatim">function log2 (x : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss19pg1" href="#st200_p7s2ss19pg1">1</a></div><div class="st200_paragraph">Return the base 2 logarithm of <span class="st200_term expression">x</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss20" href="#st200_p7s2ss20">7.2.20</a></div><div class="st200_subsection_title">maximum</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss20fo1" href="#st200_p7s2ss20fo1">7.2.20.1. maximum Definition</a></div><pre class="st200_verbatim">function maximum (x : float, y : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss20pg1" href="#st200_p7s2ss20pg1">1</a></div><div class="st200_paragraph">Return the maximum value of <span class="st200_term expression">x</span> and <span class="st200_term expression">y</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss21" href="#st200_p7s2ss21">7.2.21</a></div><div class="st200_subsection_title">minimum</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss21fo1" href="#st200_p7s2ss21fo1">7.2.21.1. minimum Definition</a></div><pre class="st200_verbatim">function minimum (x : float, y : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss21pg1" href="#st200_p7s2ss21pg1">1</a></div><div class="st200_paragraph">Return the minimum value of <span class="st200_term expression">x</span> and <span class="st200_term expression">y</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss22" href="#st200_p7s2ss22">7.2.22</a></div><div class="st200_subsection_title">modulo</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss22fo1" href="#st200_p7s2ss22fo1">7.2.22.1. modulo Definition</a></div><pre class="st200_verbatim">function modulo (x : float, y : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss22pg1" href="#st200_p7s2ss22pg1">1</a></div><div class="st200_paragraph">Return the value of <span class="st200_term expression">x mod y</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss23" href="#st200_p7s2ss23">7.2.23</a></div><div class="st200_subsection_title">multiply</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss23fo1" href="#st200_p7s2ss23fo1">7.2.23.1. multiply Definition</a></div><pre class="st200_verbatim">function multiply (x : float, y : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss23pg1" href="#st200_p7s2ss23pg1">1</a></div><div class="st200_paragraph">Return the value of <span class="st200_term expression">x ✕ y</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss24" href="#st200_p7s2ss24">7.2.24</a></div><div class="st200_subsection_title">negate</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss24fo1" href="#st200_p7s2ss24fo1">7.2.24.1. negate Definition</a></div><pre class="st200_verbatim">function negate (x : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss24pg1" href="#st200_p7s2ss24pg1">1</a></div><div class="st200_paragraph">Return the negation <span class="st200_term expression">-x</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss25" href="#st200_p7s2ss25">7.2.25</a></div><div class="st200_subsection_title">power</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss25fo1" href="#st200_p7s2ss25fo1">7.2.25.1. power Definition</a></div><pre class="st200_verbatim">function power (x : float, n : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss25pg1" href="#st200_p7s2ss25pg1">1</a></div><div class="st200_paragraph">Return the value of <span class="st200_term expression">xⁿ</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss26" href="#st200_p7s2ss26">7.2.26</a></div><div class="st200_subsection_title">round</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss26fo1" href="#st200_p7s2ss26fo1">7.2.26.1. round Definition</a></div><pre class="st200_verbatim">function round (x : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss26pg1" href="#st200_p7s2ss26pg1">1</a></div><div class="st200_paragraph">Return the value of the nearest integer to <span class="st200_term expression">x</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss27" href="#st200_p7s2ss27">7.2.27</a></div><div class="st200_subsection_title">sign</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss27fo1" href="#st200_p7s2ss27fo1">7.2.27.1. sign Definition</a></div><pre class="st200_verbatim">function sign (x : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss27pg1" href="#st200_p7s2ss27pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term expression">0.0</span> iff <span class="st200_term expression">x == 0.0</span>,
        <span class="st200_term expression">1.0</span> iff <span class="st200_term expression">x &gt; 0.0</span>, and
        <span class="st200_term expression">-1.0</span> otherwise.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss28" href="#st200_p7s2ss28">7.2.28</a></div><div class="st200_subsection_title">sine</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss28fo1" href="#st200_p7s2ss28fo1">7.2.28.1. sine Definition</a></div><pre class="st200_verbatim">function sine (x : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss28pg1" href="#st200_p7s2ss28pg1">1</a></div><div class="st200_paragraph">Return the sine <span class="st200_term expression">sin(x)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss29" href="#st200_p7s2ss29">7.2.29</a></div><div class="st200_subsection_title">square_root</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss29fo1" href="#st200_p7s2ss29fo1">7.2.29.1. square_root Definition</a></div><pre class="st200_verbatim">function square_root (x : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss29pg1" href="#st200_p7s2ss29pg1">1</a></div><div class="st200_paragraph">Return the square root of <span class="st200_term expression">x</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss30" href="#st200_p7s2ss30">7.2.30</a></div><div class="st200_subsection_title">subtract</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss30fo1" href="#st200_p7s2ss30fo1">7.2.30.1. subtract Definition</a></div><pre class="st200_verbatim">function subtract (x : float, y : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss30pg1" href="#st200_p7s2ss30pg1">1</a></div><div class="st200_paragraph">Return the value of of <span class="st200_term expression">x - y</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss31" href="#st200_p7s2ss31">7.2.31</a></div><div class="st200_subsection_title">tangent</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss31fo1" href="#st200_p7s2ss31fo1">7.2.31.1. tangent Definition</a></div><pre class="st200_verbatim">function tangent (x : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss31pg1" href="#st200_p7s2ss31pg1">1</a></div><div class="st200_paragraph">Return the tangent <span class="st200_term expression">tan(x)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s2ss32" href="#st200_p7s2ss32">7.2.32</a></div><div class="st200_subsection_title">truncate</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s2ss32fo1" href="#st200_p7s2ss32fo1">7.2.32.1. truncate Definition</a></div><pre class="st200_verbatim">function truncate (x : float) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s2ss32pg1" href="#st200_p7s2ss32pg1">1</a></div><div class="st200_paragraph">
          Return the nearest integer to <span class="st200_term expression">x</span> whose absolute value is
          not greater than the absolute value of <span class="st200_term expression">x</span>.
        </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p7s3" href="#st200_p7s3">7.3</a></div><div class="st200_section_title">Module com.io7m.parasol.Integer</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s3ss1">7.3.1. add</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s3ss2">7.3.2. divide</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s3ss3">7.3.3. multiply</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s3ss4">7.3.4. subtract</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s3ss1" href="#st200_p7s3ss1">7.3.1</a></div><div class="st200_subsection_title">add</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s3ss1fo1" href="#st200_p7s3ss1fo1">7.3.1.1. add Definition</a></div><pre class="st200_verbatim">function add (x : integer, y : integer) : integer</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s3ss1pg1" href="#st200_p7s3ss1pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term expression">x + y</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s3ss2" href="#st200_p7s3ss2">7.3.2</a></div><div class="st200_subsection_title">divide</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s3ss2fo1" href="#st200_p7s3ss2fo1">7.3.2.1. divide Definition</a></div><pre class="st200_verbatim">function divide (x : integer, y : integer) : integer</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s3ss2pg1" href="#st200_p7s3ss2pg1">1</a></div><div class="st200_paragraph">Return the division <span class="st200_term expression">x / y</span>. The result is only defined if <span class="st200_term expression">y &gt; 0</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s3ss3" href="#st200_p7s3ss3">7.3.3</a></div><div class="st200_subsection_title">multiply</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s3ss3fo1" href="#st200_p7s3ss3fo1">7.3.3.1. multiply Definition</a></div><pre class="st200_verbatim">function multiply (x : integer, y : integer) : integer</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s3ss3pg1" href="#st200_p7s3ss3pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term expression">x ✕ y</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s3ss4" href="#st200_p7s3ss4">7.3.4</a></div><div class="st200_subsection_title">subtract</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s3ss4fo1" href="#st200_p7s3ss4fo1">7.3.4.1. subtract Definition</a></div><pre class="st200_verbatim">function subtract (x : integer, y : integer) : integer</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s3ss4pg1" href="#st200_p7s3ss4pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term expression">x - y</span>.</div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p7s4" href="#st200_p7s4">7.4</a></div><div class="st200_section_title">Module com.io7m.parasol.Matrix3x3f</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s4ss1">7.4.1. multiply</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s4ss2">7.4.2. multiply_vector</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s4ss1" href="#st200_p7s4ss1">7.4.1</a></div><div class="st200_subsection_title">multiply</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s4ss1fo1" href="#st200_p7s4ss1fo1">7.4.1.1. multiply Definition</a></div><pre class="st200_verbatim">function multiply (m0 : matrix_3x3f, m1 : matrix_3x3f) : matrix_3x3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s4ss1pg1" href="#st200_p7s4ss1pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term expression">m0 ✕ m1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s4ss2" href="#st200_p7s4ss2">7.4.2</a></div><div class="st200_subsection_title">multiply_vector</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s4ss2fo1" href="#st200_p7s4ss2fo1">7.4.2.1. multiply_vector Definition</a></div><pre class="st200_verbatim">function multiply_vector (m : matrix_3x3f, v : vector_3f) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s4ss2pg1" href="#st200_p7s4ss2pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term expression">m ✕ v</span>.</div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p7s5" href="#st200_p7s5">7.5</a></div><div class="st200_section_title">Module com.io7m.parasol.Matrix4x4f</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s5ss1" href="#st200_p7s5ss1">7.5.1</a></div><div class="st200_subsection_title">multiply</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s5ss1fo1" href="#st200_p7s5ss1fo1">7.5.1.1. multiply Definition</a></div><pre class="st200_verbatim">function multiply (m0 : matrix_4x4f, m1 : matrix_4x4f) : matrix_4x4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s5ss1pg1" href="#st200_p7s5ss1pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term expression">m0 ✕ m1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s5ss2" href="#st200_p7s5ss2">7.5.2</a></div><div class="st200_subsection_title">multiply_vector</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s5ss2fo1" href="#st200_p7s5ss2fo1">7.5.2.1. multiply_vector Definition</a></div><pre class="st200_verbatim">function multiply_vector (m : matrix_4x4f, v : vector_4f) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s5ss2pg1" href="#st200_p7s5ss2pg1">1</a></div><div class="st200_paragraph">Return <span class="st200_term expression">m ✕ v</span>.</div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p7s6" href="#st200_p7s6">7.6</a></div><div class="st200_section_title">Module com.io7m.parasol.Sampler2D</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s6ss1">7.6.1. texture</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s6ss2">7.6.2. texture_with_offset</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s6ss3">7.6.3. texture_with_lod</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s6ss1" href="#st200_p7s6ss1">7.6.1</a></div><div class="st200_subsection_title">texture</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s6ss1fo1" href="#st200_p7s6ss1fo1">7.6.1.1. texture Definition</a></div><pre class="st200_verbatim">function texture (t : sampler_2d, uv : vector_2f) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s6ss1pg1" href="#st200_p7s6ss1pg1">1</a></div><div class="st200_paragraph">
          Retrieve a texel from the texture <span class="st200_term variable">t</span>
          from the texture coordinate <span class="st200_term variable">uv</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s6ss2" href="#st200_p7s6ss2">7.6.2</a></div><div class="st200_subsection_title">texture_with_offset</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s6ss2fo1" href="#st200_p7s6ss2fo1">7.6.2.1. texture_with_offset Definition</a></div><pre class="st200_verbatim">function texture_with_offset (t : sampler_2d, uv : vector_2f, o : vector_2i) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s6ss2pg1" href="#st200_p7s6ss2pg1">1</a></div><div class="st200_paragraph">
          Retrieve a texel from the texture <span class="st200_term variable">t</span>
          from the texture coordinate <span class="st200_term variable">uv</span> using
          texel offsets <span class="st200_term variable">o</span>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s6ss2pg2" href="#st200_p7s6ss2pg2">2</a></div><div class="st200_paragraph">
          This function is not available on GLSL versions <span class="st200_term expression">&lt;= 120</span>,
          and GLSL ES version <span class="st200_term expression">100</span>, and no software
          emulation is possible.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s6ss3" href="#st200_p7s6ss3">7.6.3</a></div><div class="st200_subsection_title">texture_with_lod</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s6ss3fo1" href="#st200_p7s6ss3fo1">7.6.3.1. texture_with_lod Definition</a></div><pre class="st200_verbatim">function texture_with_lod (t : sampler_2d, uv : vector_2f, lod : float) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s6ss3pg1" href="#st200_p7s6ss3pg1">1</a></div><div class="st200_paragraph">
          Retrieve a texel from the texture <span class="st200_term variable">t</span>
          from the texture coordinate <span class="st200_term variable">uv</span> using
          an explicit level-of-detail <span class="st200_term variable">lod</span>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s6ss3pg2" href="#st200_p7s6ss3pg2">2</a></div><div class="st200_paragraph">
          This function is not available on GLSL versions <span class="st200_term expression">&lt;= 120</span>,
          and GLSL ES version <span class="st200_term expression">100</span>, and no software
          emulation is possible.
        </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p7s7" href="#st200_p7s7">7.7</a></div><div class="st200_section_title">Module com.io7m.parasol.Vector2f</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s7ss1">7.7.1. add</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s7ss2">7.7.2. add_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s7ss3">7.7.3. divide</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s7ss4">7.7.4. divide_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s7ss5">7.7.5. dot</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s7ss6">7.7.6. interpolate</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s7ss7">7.7.7. magnitude</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s7ss8">7.7.8. multiply</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s7ss9">7.7.9. multiply_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s7ss10">7.7.10. negate</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s7ss11">7.7.11. normalize</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s7ss12">7.7.12. reflect</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s7ss13">7.7.13. refract</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s7ss14">7.7.14. subtract</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s7ss1" href="#st200_p7s7ss1">7.7.1</a></div><div class="st200_subsection_title">add</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s7ss1fo1" href="#st200_p7s7ss1fo1">7.7.1.1. add Definition</a></div><pre class="st200_verbatim">function add (v0 : vector_2f, v1 : vector_2f) : vector_2f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s7ss1pg1" href="#st200_p7s7ss1pg1">1</a></div><div class="st200_paragraph">Return the component-wise addition  <span class="st200_term expression">v0 + v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s7ss2" href="#st200_p7s7ss2">7.7.2</a></div><div class="st200_subsection_title">add_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s7ss2fo1" href="#st200_p7s7ss2fo1">7.7.2.1. add_scalar Definition</a></div><pre class="st200_verbatim">function add_scalar (v : vector_2f, x : float) : vector_2f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s7ss2pg1" href="#st200_p7s7ss2pg1">1</a></div><div class="st200_paragraph">Return the addition  <span class="st200_term expression">(v[x] + s, v[y] + s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s7ss3" href="#st200_p7s7ss3">7.7.3</a></div><div class="st200_subsection_title">divide</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s7ss3fo1" href="#st200_p7s7ss3fo1">7.7.3.1. divide Definition</a></div><pre class="st200_verbatim">function divide (v0 : vector_2f, v1 : vector_2f) : vector_2f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s7ss3pg1" href="#st200_p7s7ss3pg1">1</a></div><div class="st200_paragraph">Return the component-wise division  <span class="st200_term expression">v0 / v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s7ss4" href="#st200_p7s7ss4">7.7.4</a></div><div class="st200_subsection_title">divide_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s7ss4fo1" href="#st200_p7s7ss4fo1">7.7.4.1. divide_scalar Definition</a></div><pre class="st200_verbatim">function divide_scalar (v : vector_2f, x : float) : vector_2f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s7ss4pg1" href="#st200_p7s7ss4pg1">1</a></div><div class="st200_paragraph">Return the division  <span class="st200_term expression">(v[x] / s, v[y] / s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s7ss5" href="#st200_p7s7ss5">7.7.5</a></div><div class="st200_subsection_title">dot</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s7ss5fo1" href="#st200_p7s7ss5fo1">7.7.5.1. dot Definition</a></div><pre class="st200_verbatim">function dot (v0 : vector_2f, v1 : vector_2f) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s7ss5pg1" href="#st200_p7s7ss5pg1">1</a></div><div class="st200_paragraph">Return the dot product <span class="st200_term expression">v0 ⋅ v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s7ss6" href="#st200_p7s7ss6">7.7.6</a></div><div class="st200_subsection_title">interpolate</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s7ss6fo1" href="#st200_p7s7ss6fo1">7.7.6.1. interpolate Definition</a></div><pre class="st200_verbatim">function interpolate (v0 : vector_2f, v1 : vector_2f, t : float) : vector_2f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s7ss6pg1" href="#st200_p7s7ss6pg1">1</a></div><div class="st200_paragraph">Return the linear interpolation <span class="st200_term expression">(v1 ✕ t) + (v0 ✕ (1 - t))</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s7ss7" href="#st200_p7s7ss7">7.7.7</a></div><div class="st200_subsection_title">magnitude</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s7ss7fo1" href="#st200_p7s7ss7fo1">7.7.7.1. magnitude Definition</a></div><pre class="st200_verbatim">function magnitude (v : vector_2f) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s7ss7pg1" href="#st200_p7s7ss7pg1">1</a></div><div class="st200_paragraph">Return the magnitude of <span class="st200_term expression">v</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s7ss8" href="#st200_p7s7ss8">7.7.8</a></div><div class="st200_subsection_title">multiply</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s7ss8fo1" href="#st200_p7s7ss8fo1">7.7.8.1. multiply Definition</a></div><pre class="st200_verbatim">function multiply (v0 : vector_2f, v1 : vector_2f) : vector_2f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s7ss8pg1" href="#st200_p7s7ss8pg1">1</a></div><div class="st200_paragraph">Return the component-wise multiplication <span class="st200_term expression">v0 ✕ v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s7ss9" href="#st200_p7s7ss9">7.7.9</a></div><div class="st200_subsection_title">multiply_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s7ss9fo1" href="#st200_p7s7ss9fo1">7.7.9.1. multiply_scalar Definition</a></div><pre class="st200_verbatim">function multiply_scalar (v0 : vector_2i, x : float) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s7ss9pg1" href="#st200_p7s7ss9pg1">1</a></div><div class="st200_paragraph">Return the multiplication <span class="st200_term expression">(v[x] ✕ s, v[y] ✕ s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s7ss10" href="#st200_p7s7ss10">7.7.10</a></div><div class="st200_subsection_title">negate</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s7ss10fo1" href="#st200_p7s7ss10fo1">7.7.10.1. negate Definition</a></div><pre class="st200_verbatim">function negate (v : vector_2f) : vector_2f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s7ss10pg1" href="#st200_p7s7ss10pg1">1</a></div><div class="st200_paragraph">Return the component-wise negation <span class="st200_term expression">-v</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s7ss11" href="#st200_p7s7ss11">7.7.11</a></div><div class="st200_subsection_title">normalize</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s7ss11fo1" href="#st200_p7s7ss11fo1">7.7.11.1. normalize Definition</a></div><pre class="st200_verbatim">function normalize (v : vector_2f) : vector_2f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s7ss11pg1" href="#st200_p7s7ss11pg1">1</a></div><div class="st200_paragraph">
          Return a vector pointing in the same direction as <span class="st200_term expression">v</span>
          but with a magnitude of <span class="st200_term constant">1</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s7ss12" href="#st200_p7s7ss12">7.7.12</a></div><div class="st200_subsection_title">reflect</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s7ss12fo1" href="#st200_p7s7ss12fo1">7.7.12.1. reflect Definition</a></div><pre class="st200_verbatim">function reflect (i : vector_2f, n : vector_2f) : vector_2f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s7ss12pg1" href="#st200_p7s7ss12pg1">1</a></div><div class="st200_paragraph"> 
          Return the reflection of the incident vector 
          <span class="st200_term expression">i</span> with respect to the vector <span class="st200_term expression">n</span>,
          as given by <span class="st200_term expression">i - 2.0 ✕ dot(n, i) ✕ n</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s7ss13" href="#st200_p7s7ss13">7.7.13</a></div><div class="st200_subsection_title">refract</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s7ss13fo1" href="#st200_p7s7ss13fo1">7.7.13.1. refract Definition</a></div><pre class="st200_verbatim">function refract (i : vector_2f, n : vector_2f, e : float) : vector_2f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s7ss13pg1" href="#st200_p7s7ss13pg1">1</a></div><div class="st200_paragraph"> 
          Return the refraction vector of the incident vector 
          <span class="st200_term expression">i</span> with respect to the vector <span class="st200_term expression">n</span>,
          with the given ratio of indices of refraction <span class="st200_term expression">e</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s7ss14" href="#st200_p7s7ss14">7.7.14</a></div><div class="st200_subsection_title">subtract</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s7ss14fo1" href="#st200_p7s7ss14fo1">7.7.14.1. subtract Definition</a></div><pre class="st200_verbatim">function subtract (v0 : vector_2f, v1 : vector_2f) : vector_2f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s7ss14pg1" href="#st200_p7s7ss14pg1">1</a></div><div class="st200_paragraph">Return the component-wise subtraction <span class="st200_term expression">v0 - v1</span>.</div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p7s8" href="#st200_p7s8">7.8</a></div><div class="st200_section_title">Module com.io7m.parasol.Vector2i</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s8ss1">7.8.1. add</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s8ss2">7.8.2. add_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s8ss3">7.8.3. divide</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s8ss4">7.8.4. divide_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s8ss5">7.8.5. dot</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s8ss6">7.8.6. interpolate</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s8ss7">7.8.7. magnitude</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s8ss8">7.8.8. multiply</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s8ss9">7.8.9. multiply_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s8ss10">7.8.10. negate</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s8ss11">7.8.11. normalize</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s8ss12">7.8.12. reflect</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s8ss13">7.8.13. refract</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s8ss14">7.8.14. subtract</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s8ss1" href="#st200_p7s8ss1">7.8.1</a></div><div class="st200_subsection_title">add</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s8ss1fo1" href="#st200_p7s8ss1fo1">7.8.1.1. add Definition</a></div><pre class="st200_verbatim">function add (v0 : vector_2i, v1 : vector_2i) : vector_2i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s8ss1pg1" href="#st200_p7s8ss1pg1">1</a></div><div class="st200_paragraph">Return the component-wise addition  <span class="st200_term expression">v0 + v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s8ss2" href="#st200_p7s8ss2">7.8.2</a></div><div class="st200_subsection_title">add_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s8ss2fo1" href="#st200_p7s8ss2fo1">7.8.2.1. add_scalar Definition</a></div><pre class="st200_verbatim">function add_scalar (v : vector_2i, x : integer) : vector_2i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s8ss2pg1" href="#st200_p7s8ss2pg1">1</a></div><div class="st200_paragraph">Return the addition  <span class="st200_term expression">(v[x] + s, v[y] + s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s8ss3" href="#st200_p7s8ss3">7.8.3</a></div><div class="st200_subsection_title">divide</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s8ss3fo1" href="#st200_p7s8ss3fo1">7.8.3.1. divide Definition</a></div><pre class="st200_verbatim">function divide (v0 : vector_2i, v1 : vector_2i) : vector_2i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s8ss3pg1" href="#st200_p7s8ss3pg1">1</a></div><div class="st200_paragraph">Return the component-wise division  <span class="st200_term expression">v0 / v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s8ss4" href="#st200_p7s8ss4">7.8.4</a></div><div class="st200_subsection_title">divide_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s8ss4fo1" href="#st200_p7s8ss4fo1">7.8.4.1. divide_scalar Definition</a></div><pre class="st200_verbatim">function divide_scalar (v : vector_2i, x : integer) : vector_2i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s8ss4pg1" href="#st200_p7s8ss4pg1">1</a></div><div class="st200_paragraph">Return the division  <span class="st200_term expression">(v[x] / s, v[y] / s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s8ss5" href="#st200_p7s8ss5">7.8.5</a></div><div class="st200_subsection_title">dot</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s8ss5fo1" href="#st200_p7s8ss5fo1">7.8.5.1. dot Definition</a></div><pre class="st200_verbatim">function dot (v0 : vector_2i, v1 : vector_2i) : integer</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s8ss5pg1" href="#st200_p7s8ss5pg1">1</a></div><div class="st200_paragraph">Return the dot product <span class="st200_term expression">v0 ⋅ v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s8ss6" href="#st200_p7s8ss6">7.8.6</a></div><div class="st200_subsection_title">interpolate</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s8ss6fo1" href="#st200_p7s8ss6fo1">7.8.6.1. interpolate Definition</a></div><pre class="st200_verbatim">function interpolate (v0 : vector_2i, v1 : vector_2i, t : float) : vector_2i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s8ss6pg1" href="#st200_p7s8ss6pg1">1</a></div><div class="st200_paragraph">Return the linear interpolation <span class="st200_term expression">(v1 ✕ t) + (v0 ✕ (1 - t))</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s8ss7" href="#st200_p7s8ss7">7.8.7</a></div><div class="st200_subsection_title">magnitude</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s8ss7fo1" href="#st200_p7s8ss7fo1">7.8.7.1. magnitude Definition</a></div><pre class="st200_verbatim">function magnitude (v : vector_2i) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s8ss7pg1" href="#st200_p7s8ss7pg1">1</a></div><div class="st200_paragraph">Return the magnitude of <span class="st200_term expression">v</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s8ss8" href="#st200_p7s8ss8">7.8.8</a></div><div class="st200_subsection_title">multiply</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s8ss8fo1" href="#st200_p7s8ss8fo1">7.8.8.1. multiply Definition</a></div><pre class="st200_verbatim">function multiply (v0 : vector_2i, v1 : vector_2i) : vector_2i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s8ss8pg1" href="#st200_p7s8ss8pg1">1</a></div><div class="st200_paragraph">Return the component-wise multiplication <span class="st200_term expression">v0 ✕ v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s8ss9" href="#st200_p7s8ss9">7.8.9</a></div><div class="st200_subsection_title">multiply_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s8ss9fo1" href="#st200_p7s8ss9fo1">7.8.9.1. multiply_scalar Definition</a></div><pre class="st200_verbatim">function multiply_scalar (v0 : vector_2i, x : integer) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s8ss9pg1" href="#st200_p7s8ss9pg1">1</a></div><div class="st200_paragraph">Return the multiplication <span class="st200_term expression">(v[x] ✕ s, v[y] ✕ s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s8ss10" href="#st200_p7s8ss10">7.8.10</a></div><div class="st200_subsection_title">negate</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s8ss10fo1" href="#st200_p7s8ss10fo1">7.8.10.1. negate Definition</a></div><pre class="st200_verbatim">function negate (v : vector_2i) : vector_2i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s8ss10pg1" href="#st200_p7s8ss10pg1">1</a></div><div class="st200_paragraph">Return the component-wise negation <span class="st200_term expression">-v</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s8ss11" href="#st200_p7s8ss11">7.8.11</a></div><div class="st200_subsection_title">normalize</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s8ss11fo1" href="#st200_p7s8ss11fo1">7.8.11.1. normalize Definition</a></div><pre class="st200_verbatim">function normalize (v : vector_2i) : vector_2i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s8ss11pg1" href="#st200_p7s8ss11pg1">1</a></div><div class="st200_paragraph">
          Return a vector pointing in the same direction as <span class="st200_term expression">v</span>
          but with a magnitude of <span class="st200_term constant">1</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s8ss12" href="#st200_p7s8ss12">7.8.12</a></div><div class="st200_subsection_title">reflect</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s8ss12fo1" href="#st200_p7s8ss12fo1">7.8.12.1. reflect Definition</a></div><pre class="st200_verbatim">function reflect (i : vector_2i, n : vector_2i) : vector_2i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s8ss12pg1" href="#st200_p7s8ss12pg1">1</a></div><div class="st200_paragraph"> 
          Return the reflection of the incident vector 
          <span class="st200_term expression">i</span> with respect to the vector <span class="st200_term expression">n</span>,
          as given by <span class="st200_term expression">i - 2.0 ✕ dot(n, i) ✕ n</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s8ss13" href="#st200_p7s8ss13">7.8.13</a></div><div class="st200_subsection_title">refract</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s8ss13fo1" href="#st200_p7s8ss13fo1">7.8.13.1. refract Definition</a></div><pre class="st200_verbatim">function refract (i : vector_2i, n : vector_2i, e : float) : vector_2i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s8ss13pg1" href="#st200_p7s8ss13pg1">1</a></div><div class="st200_paragraph"> 
          Return the refraction vector of the incident vector 
          <span class="st200_term expression">i</span> with respect to the vector <span class="st200_term expression">n</span>,
          with the given ratio of indices of refraction <span class="st200_term expression">e</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s8ss14" href="#st200_p7s8ss14">7.8.14</a></div><div class="st200_subsection_title">subtract</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s8ss14fo1" href="#st200_p7s8ss14fo1">7.8.14.1. subtract Definition</a></div><pre class="st200_verbatim">function subtract (v0 : vector_2i, v1 : vector_2i) : vector_2i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s8ss14pg1" href="#st200_p7s8ss14pg1">1</a></div><div class="st200_paragraph">Return the component-wise subtraction <span class="st200_term expression">v0 - v1</span>.</div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p7s9" href="#st200_p7s9">7.9</a></div><div class="st200_section_title">Module com.io7m.parasol.Vector3f</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s9ss1">7.9.1. add</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s9ss2">7.9.2. add_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s9ss3">7.9.3. divide</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s9ss4">7.9.4. divide_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s9ss5">7.9.5. cross</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s9ss6">7.9.6. dot</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s9ss7">7.9.7. interpolate</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s9ss8">7.9.8. magnitude</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s9ss9">7.9.9. multiply</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s9ss10">7.9.10. multiply_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s9ss11">7.9.11. negate</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s9ss12">7.9.12. normalize</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s9ss13">7.9.13. reflect</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s9ss14">7.9.14. refract</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s9ss15">7.9.15. subtract</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s9ss1" href="#st200_p7s9ss1">7.9.1</a></div><div class="st200_subsection_title">add</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s9ss1fo1" href="#st200_p7s9ss1fo1">7.9.1.1. add Definition</a></div><pre class="st200_verbatim">function add (v0 : vector_3f, v1 : vector_3f) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s9ss1pg1" href="#st200_p7s9ss1pg1">1</a></div><div class="st200_paragraph">Return the component-wise addition  <span class="st200_term expression">v0 + v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s9ss2" href="#st200_p7s9ss2">7.9.2</a></div><div class="st200_subsection_title">add_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s9ss2fo1" href="#st200_p7s9ss2fo1">7.9.2.1. add_scalar Definition</a></div><pre class="st200_verbatim">function add_scalar (v : vector_3f, x : integer) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s9ss2pg1" href="#st200_p7s9ss2pg1">1</a></div><div class="st200_paragraph">Return the addition  <span class="st200_term expression">(v[x] + s, v[y] + s, v[z] + s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s9ss3" href="#st200_p7s9ss3">7.9.3</a></div><div class="st200_subsection_title">divide</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s9ss3fo1" href="#st200_p7s9ss3fo1">7.9.3.1. divide Definition</a></div><pre class="st200_verbatim">function divide (v0 : vector_3f, v1 : vector_3f) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s9ss3pg1" href="#st200_p7s9ss3pg1">1</a></div><div class="st200_paragraph">Return the component-wise division  <span class="st200_term expression">v0 / v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s9ss4" href="#st200_p7s9ss4">7.9.4</a></div><div class="st200_subsection_title">divide_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s9ss4fo1" href="#st200_p7s9ss4fo1">7.9.4.1. divide_scalar Definition</a></div><pre class="st200_verbatim">function divide_scalar (v : vector_3f, x : integer) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s9ss4pg1" href="#st200_p7s9ss4pg1">1</a></div><div class="st200_paragraph">Return the division  <span class="st200_term expression">(v[x] / s, v[y] / s, v[z] / s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s9ss5" href="#st200_p7s9ss5">7.9.5</a></div><div class="st200_subsection_title">cross</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s9ss5fo1" href="#st200_p7s9ss5fo1">7.9.5.1. cross Definition</a></div><pre class="st200_verbatim">function cross (v0 : vector_3f, v1 : vector_3f) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s9ss5pg1" href="#st200_p7s9ss5pg1">1</a></div><div class="st200_paragraph">Return the cross product <span class="st200_term expression">v0 ✕ v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s9ss6" href="#st200_p7s9ss6">7.9.6</a></div><div class="st200_subsection_title">dot</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s9ss6fo1" href="#st200_p7s9ss6fo1">7.9.6.1. dot Definition</a></div><pre class="st200_verbatim">function dot (v0 : vector_3f, v1 : vector_3f) : integer</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s9ss6pg1" href="#st200_p7s9ss6pg1">1</a></div><div class="st200_paragraph">Return the dot product <span class="st200_term expression">v0 ⋅ v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s9ss7" href="#st200_p7s9ss7">7.9.7</a></div><div class="st200_subsection_title">interpolate</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s9ss7fo1" href="#st200_p7s9ss7fo1">7.9.7.1. interpolate Definition</a></div><pre class="st200_verbatim">function interpolate (v0 : vector_3f, v1 : vector_3f, t : float) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s9ss7pg1" href="#st200_p7s9ss7pg1">1</a></div><div class="st200_paragraph">Return the linear interpolation <span class="st200_term expression">(v1 ✕ t) + (v0 ✕ (1 - t))</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s9ss8" href="#st200_p7s9ss8">7.9.8</a></div><div class="st200_subsection_title">magnitude</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s9ss8fo1" href="#st200_p7s9ss8fo1">7.9.8.1. magnitude Definition</a></div><pre class="st200_verbatim">function magnitude (v : vector_3f) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s9ss8pg1" href="#st200_p7s9ss8pg1">1</a></div><div class="st200_paragraph">Return the magnitude of <span class="st200_term expression">v</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s9ss9" href="#st200_p7s9ss9">7.9.9</a></div><div class="st200_subsection_title">multiply</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s9ss9fo1" href="#st200_p7s9ss9fo1">7.9.9.1. multiply Definition</a></div><pre class="st200_verbatim">function multiply (v0 : vector_3f, v1 : vector_3f) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s9ss9pg1" href="#st200_p7s9ss9pg1">1</a></div><div class="st200_paragraph">Return the component-wise multiplication <span class="st200_term expression">v0 ✕ v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s9ss10" href="#st200_p7s9ss10">7.9.10</a></div><div class="st200_subsection_title">multiply_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s9ss10fo1" href="#st200_p7s9ss10fo1">7.9.10.1. multiply_scalar Definition</a></div><pre class="st200_verbatim">function multiply_scalar (v0 : vector_3f, x : float) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s9ss10pg1" href="#st200_p7s9ss10pg1">1</a></div><div class="st200_paragraph">Return the multiplication <span class="st200_term expression">(v[x] ✕ s, v[y] ✕ s, v[z] ✕ s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s9ss11" href="#st200_p7s9ss11">7.9.11</a></div><div class="st200_subsection_title">negate</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s9ss11fo1" href="#st200_p7s9ss11fo1">7.9.11.1. negate Definition</a></div><pre class="st200_verbatim">function negate (v : vector_3f) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s9ss11pg1" href="#st200_p7s9ss11pg1">1</a></div><div class="st200_paragraph">Return the component-wise negation <span class="st200_term expression">-v</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s9ss12" href="#st200_p7s9ss12">7.9.12</a></div><div class="st200_subsection_title">normalize</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s9ss12fo1" href="#st200_p7s9ss12fo1">7.9.12.1. normalize Definition</a></div><pre class="st200_verbatim">function normalize (v : vector_3f) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s9ss12pg1" href="#st200_p7s9ss12pg1">1</a></div><div class="st200_paragraph">
          Return a vector pointing in the same direction as <span class="st200_term expression">v</span>
          but with a magnitude of <span class="st200_term constant">1</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s9ss13" href="#st200_p7s9ss13">7.9.13</a></div><div class="st200_subsection_title">reflect</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s9ss13fo1" href="#st200_p7s9ss13fo1">7.9.13.1. reflect Definition</a></div><pre class="st200_verbatim">function reflect (i : vector_3f, n : vector_3f) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s9ss13pg1" href="#st200_p7s9ss13pg1">1</a></div><div class="st200_paragraph"> 
          Return the reflection of the incident vector 
          <span class="st200_term expression">i</span> with respect to the vector <span class="st200_term expression">n</span>,
          as given by <span class="st200_term expression">i - 2.0 ✕ dot(n, i) ✕ n</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s9ss14" href="#st200_p7s9ss14">7.9.14</a></div><div class="st200_subsection_title">refract</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s9ss14fo1" href="#st200_p7s9ss14fo1">7.9.14.1. refract Definition</a></div><pre class="st200_verbatim">function refract (i : vector_3f, n : vector_3f, e : float) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s9ss14pg1" href="#st200_p7s9ss14pg1">1</a></div><div class="st200_paragraph"> 
          Return the refraction vector of the incident vector 
          <span class="st200_term expression">i</span> with respect to the vector <span class="st200_term expression">n</span>,
          with the given ratio of indices of refraction <span class="st200_term expression">e</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s9ss15" href="#st200_p7s9ss15">7.9.15</a></div><div class="st200_subsection_title">subtract</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s9ss15fo1" href="#st200_p7s9ss15fo1">7.9.15.1. subtract Definition</a></div><pre class="st200_verbatim">function subtract (v0 : vector_3f, v1 : vector_3f) : vector_3f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s9ss15pg1" href="#st200_p7s9ss15pg1">1</a></div><div class="st200_paragraph">Return the component-wise subtraction <span class="st200_term expression">v0 - v1</span>.</div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p7s10" href="#st200_p7s10">7.10</a></div><div class="st200_section_title">Module com.io7m.parasol.Vector3i</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s10ss1">7.10.1. add</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s10ss2">7.10.2. add_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s10ss3">7.10.3. divide</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s10ss4">7.10.4. divide_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s10ss5">7.10.5. dot</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s10ss6">7.10.6. interpolate</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s10ss7">7.10.7. magnitude</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s10ss8">7.10.8. multiply</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s10ss9">7.10.9. multiply_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s10ss10">7.10.10. negate</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s10ss11">7.10.11. normalize</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s10ss12">7.10.12. reflect</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s10ss13">7.10.13. refract</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s10ss14">7.10.14. subtract</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s10ss1" href="#st200_p7s10ss1">7.10.1</a></div><div class="st200_subsection_title">add</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s10ss1fo1" href="#st200_p7s10ss1fo1">7.10.1.1. add Definition</a></div><pre class="st200_verbatim">function add (v0 : vector_3i, v1 : vector_3i) : vector_3i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s10ss1pg1" href="#st200_p7s10ss1pg1">1</a></div><div class="st200_paragraph">Return the component-wise addition  <span class="st200_term expression">v0 + v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s10ss2" href="#st200_p7s10ss2">7.10.2</a></div><div class="st200_subsection_title">add_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s10ss2fo1" href="#st200_p7s10ss2fo1">7.10.2.1. add_scalar Definition</a></div><pre class="st200_verbatim">function add_scalar (v : vector_3i, x : integer) : vector_3i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s10ss2pg1" href="#st200_p7s10ss2pg1">1</a></div><div class="st200_paragraph">Return the addition  <span class="st200_term expression">(v[x] + s, v[y] + s, v[z] + s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s10ss3" href="#st200_p7s10ss3">7.10.3</a></div><div class="st200_subsection_title">divide</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s10ss3fo1" href="#st200_p7s10ss3fo1">7.10.3.1. divide Definition</a></div><pre class="st200_verbatim">function divide (v0 : vector_3i, v1 : vector_3i) : vector_3i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s10ss3pg1" href="#st200_p7s10ss3pg1">1</a></div><div class="st200_paragraph">Return the component-wise division  <span class="st200_term expression">v0 / v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s10ss4" href="#st200_p7s10ss4">7.10.4</a></div><div class="st200_subsection_title">divide_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s10ss4fo1" href="#st200_p7s10ss4fo1">7.10.4.1. divide_scalar Definition</a></div><pre class="st200_verbatim">function divide_scalar (v : vector_3i, x : integer) : vector_3i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s10ss4pg1" href="#st200_p7s10ss4pg1">1</a></div><div class="st200_paragraph">Return the division  <span class="st200_term expression">(v[x] / s, v[y] / s, v[z] / s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s10ss5" href="#st200_p7s10ss5">7.10.5</a></div><div class="st200_subsection_title">dot</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s10ss5fo1" href="#st200_p7s10ss5fo1">7.10.5.1. dot Definition</a></div><pre class="st200_verbatim">function dot (v0 : vector_3i, v1 : vector_3i) : integer</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s10ss5pg1" href="#st200_p7s10ss5pg1">1</a></div><div class="st200_paragraph">Return the dot product <span class="st200_term expression">v0 ⋅ v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s10ss6" href="#st200_p7s10ss6">7.10.6</a></div><div class="st200_subsection_title">interpolate</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s10ss6fo1" href="#st200_p7s10ss6fo1">7.10.6.1. interpolate Definition</a></div><pre class="st200_verbatim">function interpolate (v0 : vector_3i, v1 : vector_3i, t : float) : vector_3i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s10ss6pg1" href="#st200_p7s10ss6pg1">1</a></div><div class="st200_paragraph">Return the linear interpolation <span class="st200_term expression">(v1 ✕ t) + (v0 ✕ (1 - t))</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s10ss7" href="#st200_p7s10ss7">7.10.7</a></div><div class="st200_subsection_title">magnitude</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s10ss7fo1" href="#st200_p7s10ss7fo1">7.10.7.1. magnitude Definition</a></div><pre class="st200_verbatim">function magnitude (v : vector_3i) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s10ss7pg1" href="#st200_p7s10ss7pg1">1</a></div><div class="st200_paragraph">Return the magnitude of <span class="st200_term expression">v</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s10ss8" href="#st200_p7s10ss8">7.10.8</a></div><div class="st200_subsection_title">multiply</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s10ss8fo1" href="#st200_p7s10ss8fo1">7.10.8.1. multiply Definition</a></div><pre class="st200_verbatim">function multiply (v0 : vector_3i, v1 : vector_3i) : vector_3i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s10ss8pg1" href="#st200_p7s10ss8pg1">1</a></div><div class="st200_paragraph">Return the component-wise multiplication <span class="st200_term expression">v0 ✕ v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s10ss9" href="#st200_p7s10ss9">7.10.9</a></div><div class="st200_subsection_title">multiply_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s10ss9fo1" href="#st200_p7s10ss9fo1">7.10.9.1. multiply_scalar Definition</a></div><pre class="st200_verbatim">function multiply_scalar (v0 : vector_3i, x : float) : vector_3i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s10ss9pg1" href="#st200_p7s10ss9pg1">1</a></div><div class="st200_paragraph">Return the multiplication <span class="st200_term expression">(v[x] ✕ s, v[y] ✕ s, v[z] ✕ s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s10ss10" href="#st200_p7s10ss10">7.10.10</a></div><div class="st200_subsection_title">negate</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s10ss10fo1" href="#st200_p7s10ss10fo1">7.10.10.1. negate Definition</a></div><pre class="st200_verbatim">function negate (v : vector_3i) : vector_3i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s10ss10pg1" href="#st200_p7s10ss10pg1">1</a></div><div class="st200_paragraph">Return the component-wise negation <span class="st200_term expression">-v</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s10ss11" href="#st200_p7s10ss11">7.10.11</a></div><div class="st200_subsection_title">normalize</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s10ss11fo1" href="#st200_p7s10ss11fo1">7.10.11.1. normalize Definition</a></div><pre class="st200_verbatim">function normalize (v : vector_3i) : vector_3i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s10ss11pg1" href="#st200_p7s10ss11pg1">1</a></div><div class="st200_paragraph">
          Return a vector pointing in the same direction as <span class="st200_term expression">v</span>
          but with a magnitude of <span class="st200_term constant">1</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s10ss12" href="#st200_p7s10ss12">7.10.12</a></div><div class="st200_subsection_title">reflect</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s10ss12fo1" href="#st200_p7s10ss12fo1">7.10.12.1. reflect Definition</a></div><pre class="st200_verbatim">function reflect (i : vector_3i, n : vector_3i) : vector_3i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s10ss12pg1" href="#st200_p7s10ss12pg1">1</a></div><div class="st200_paragraph"> 
          Return the reflection of the incident vector 
          <span class="st200_term expression">i</span> with respect to the vector <span class="st200_term expression">n</span>,
          as given by <span class="st200_term expression">i - 2.0 ✕ dot(n, i) ✕ n</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s10ss13" href="#st200_p7s10ss13">7.10.13</a></div><div class="st200_subsection_title">refract</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s10ss13fo1" href="#st200_p7s10ss13fo1">7.10.13.1. refract Definition</a></div><pre class="st200_verbatim">function refract (i : vector_3i, n : vector_3i, e : float) : vector_3i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s10ss13pg1" href="#st200_p7s10ss13pg1">1</a></div><div class="st200_paragraph"> 
          Return the refraction vector of the incident vector 
          <span class="st200_term expression">i</span> with respect to the vector <span class="st200_term expression">n</span>,
          with the given ratio of indices of refraction <span class="st200_term expression">e</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s10ss14" href="#st200_p7s10ss14">7.10.14</a></div><div class="st200_subsection_title">subtract</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s10ss14fo1" href="#st200_p7s10ss14fo1">7.10.14.1. subtract Definition</a></div><pre class="st200_verbatim">function subtract (v0 : vector_3i, v1 : vector_3i) : vector_3i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s10ss14pg1" href="#st200_p7s10ss14pg1">1</a></div><div class="st200_paragraph">Return the component-wise subtraction <span class="st200_term expression">v0 - v1</span>.</div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p7s11" href="#st200_p7s11">7.11</a></div><div class="st200_section_title">Module com.io7m.parasol.Vector4f</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s11ss1">7.11.1. add</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s11ss2">7.11.2. add_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s11ss3">7.11.3. divide</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s11ss4">7.11.4. divide_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s11ss5">7.11.5. dot</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s11ss6">7.11.6. interpolate</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s11ss7">7.11.7. magnitude</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s11ss8">7.11.8. multiply</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s11ss9">7.11.9. multiply_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s11ss10">7.11.10. negate</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s11ss11">7.11.11. normalize</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s11ss12">7.11.12. reflect</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s11ss13">7.11.13. refract</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s11ss14">7.11.14. subtract</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s11ss1" href="#st200_p7s11ss1">7.11.1</a></div><div class="st200_subsection_title">add</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s11ss1fo1" href="#st200_p7s11ss1fo1">7.11.1.1. add Definition</a></div><pre class="st200_verbatim">function add (v0 : vector_4f, v1 : vector_4f) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s11ss1pg1" href="#st200_p7s11ss1pg1">1</a></div><div class="st200_paragraph">Return the component-wise addition  <span class="st200_term expression">v0 + v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s11ss2" href="#st200_p7s11ss2">7.11.2</a></div><div class="st200_subsection_title">add_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s11ss2fo1" href="#st200_p7s11ss2fo1">7.11.2.1. add_scalar Definition</a></div><pre class="st200_verbatim">function add_scalar (v : vector_4f, x : integer) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s11ss2pg1" href="#st200_p7s11ss2pg1">1</a></div><div class="st200_paragraph">Return the addition <span class="st200_term expression">(v[x] + s, v[y] + s, v[z] + s, v[w] + s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s11ss3" href="#st200_p7s11ss3">7.11.3</a></div><div class="st200_subsection_title">divide</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s11ss3fo1" href="#st200_p7s11ss3fo1">7.11.3.1. divide Definition</a></div><pre class="st200_verbatim">function divide (v0 : vector_4f, v1 : vector_4f) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s11ss3pg1" href="#st200_p7s11ss3pg1">1</a></div><div class="st200_paragraph">Return the component-wise division  <span class="st200_term expression">v0 / v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s11ss4" href="#st200_p7s11ss4">7.11.4</a></div><div class="st200_subsection_title">divide_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s11ss4fo1" href="#st200_p7s11ss4fo1">7.11.4.1. divide_scalar Definition</a></div><pre class="st200_verbatim">function divide_scalar (v : vector_4f, x : integer) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s11ss4pg1" href="#st200_p7s11ss4pg1">1</a></div><div class="st200_paragraph">Return the division <span class="st200_term expression">(v[x] / s, v[y] / s, v[z] / s, v[w] / s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s11ss5" href="#st200_p7s11ss5">7.11.5</a></div><div class="st200_subsection_title">dot</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s11ss5fo1" href="#st200_p7s11ss5fo1">7.11.5.1. dot Definition</a></div><pre class="st200_verbatim">function dot (v0 : vector_4f, v1 : vector_4f) : integer</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s11ss5pg1" href="#st200_p7s11ss5pg1">1</a></div><div class="st200_paragraph">Return the dot product <span class="st200_term expression">v0 ⋅ v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s11ss6" href="#st200_p7s11ss6">7.11.6</a></div><div class="st200_subsection_title">interpolate</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s11ss6fo1" href="#st200_p7s11ss6fo1">7.11.6.1. interpolate Definition</a></div><pre class="st200_verbatim">function interpolate (v0 : vector_4f, v1 : vector_4f, t : float) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s11ss6pg1" href="#st200_p7s11ss6pg1">1</a></div><div class="st200_paragraph">Return the linear interpolation <span class="st200_term expression">(v1 ✕ t) + (v0 ✕ (1 - t))</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s11ss7" href="#st200_p7s11ss7">7.11.7</a></div><div class="st200_subsection_title">magnitude</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s11ss7fo1" href="#st200_p7s11ss7fo1">7.11.7.1. magnitude Definition</a></div><pre class="st200_verbatim">function magnitude (v : vector_4f) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s11ss7pg1" href="#st200_p7s11ss7pg1">1</a></div><div class="st200_paragraph">Return the magnitude of <span class="st200_term expression">v</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s11ss8" href="#st200_p7s11ss8">7.11.8</a></div><div class="st200_subsection_title">multiply</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s11ss8fo1" href="#st200_p7s11ss8fo1">7.11.8.1. multiply Definition</a></div><pre class="st200_verbatim">function multiply (v0 : vector_4f, v1 : vector_4f) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s11ss8pg1" href="#st200_p7s11ss8pg1">1</a></div><div class="st200_paragraph">Return the component-wise multiplication <span class="st200_term expression">v0 ✕ v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s11ss9" href="#st200_p7s11ss9">7.11.9</a></div><div class="st200_subsection_title">multiply_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s11ss9fo1" href="#st200_p7s11ss9fo1">7.11.9.1. multiply_scalar Definition</a></div><pre class="st200_verbatim">function multiply_scalar (v0 : vector_4f, x : float) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s11ss9pg1" href="#st200_p7s11ss9pg1">1</a></div><div class="st200_paragraph">Return the multiplication <span class="st200_term expression">(v[x] ✕ s, v[y] ✕ s, v[z] ✕ s, v[w] ✕ s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s11ss10" href="#st200_p7s11ss10">7.11.10</a></div><div class="st200_subsection_title">negate</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s11ss10fo1" href="#st200_p7s11ss10fo1">7.11.10.1. negate Definition</a></div><pre class="st200_verbatim">function negate (v : vector_4f) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s11ss10pg1" href="#st200_p7s11ss10pg1">1</a></div><div class="st200_paragraph">Return the component-wise negation <span class="st200_term expression">-v</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s11ss11" href="#st200_p7s11ss11">7.11.11</a></div><div class="st200_subsection_title">normalize</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s11ss11fo1" href="#st200_p7s11ss11fo1">7.11.11.1. normalize Definition</a></div><pre class="st200_verbatim">function normalize (v : vector_4f) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s11ss11pg1" href="#st200_p7s11ss11pg1">1</a></div><div class="st200_paragraph">
          Return a vector pointing in the same direction as <span class="st200_term expression">v</span>
          but with a magnitude of <span class="st200_term constant">1</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s11ss12" href="#st200_p7s11ss12">7.11.12</a></div><div class="st200_subsection_title">reflect</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s11ss12fo1" href="#st200_p7s11ss12fo1">7.11.12.1. reflect Definition</a></div><pre class="st200_verbatim">function reflect (i : vector_4f, n : vector_4f) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s11ss12pg1" href="#st200_p7s11ss12pg1">1</a></div><div class="st200_paragraph"> 
          Return the reflection of the incident vector 
          <span class="st200_term expression">i</span> with respect to the vector <span class="st200_term expression">n</span>,
          as given by <span class="st200_term expression">i - 2.0 ✕ dot(n, i) ✕ n</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s11ss13" href="#st200_p7s11ss13">7.11.13</a></div><div class="st200_subsection_title">refract</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s11ss13fo1" href="#st200_p7s11ss13fo1">7.11.13.1. refract Definition</a></div><pre class="st200_verbatim">function refract (i : vector_4f, n : vector_4f, e : float) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s11ss13pg1" href="#st200_p7s11ss13pg1">1</a></div><div class="st200_paragraph"> 
          Return the refraction vector of the incident vector 
          <span class="st200_term expression">i</span> with respect to the vector <span class="st200_term expression">n</span>,
          with the given ratio of indices of refraction <span class="st200_term expression">e</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s11ss14" href="#st200_p7s11ss14">7.11.14</a></div><div class="st200_subsection_title">subtract</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s11ss14fo1" href="#st200_p7s11ss14fo1">7.11.14.1. subtract Definition</a></div><pre class="st200_verbatim">function subtract (v0 : vector_4f, v1 : vector_4f) : vector_4f</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s11ss14pg1" href="#st200_p7s11ss14pg1">1</a></div><div class="st200_paragraph">Return the component-wise subtraction <span class="st200_term expression">v0 - v1</span>.</div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p7s12" href="#st200_p7s12">7.12</a></div><div class="st200_section_title">Module com.io7m.parasol.Vector4i</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s12ss1">7.12.1. add</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s12ss2">7.12.2. add_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s12ss3">7.12.3. divide</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s12ss4">7.12.4. divide_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s12ss5">7.12.5. dot</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s12ss6">7.12.6. interpolate</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s12ss7">7.12.7. magnitude</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s12ss8">7.12.8. multiply</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s12ss9">7.12.9. multiply_scalar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s12ss10">7.12.10. negate</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s12ss11">7.12.11. normalize</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s12ss12">7.12.12. reflect</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s12ss13">7.12.13. refract</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p7s12ss14">7.12.14. subtract</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s12ss1" href="#st200_p7s12ss1">7.12.1</a></div><div class="st200_subsection_title">add</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s12ss1fo1" href="#st200_p7s12ss1fo1">7.12.1.1. add Definition</a></div><pre class="st200_verbatim">function add (v0 : vector_4i, v1 : vector_4i) : vector_4i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s12ss1pg1" href="#st200_p7s12ss1pg1">1</a></div><div class="st200_paragraph">Return the component-wise addition  <span class="st200_term expression">v0 + v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s12ss2" href="#st200_p7s12ss2">7.12.2</a></div><div class="st200_subsection_title">add_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s12ss2fo1" href="#st200_p7s12ss2fo1">7.12.2.1. add_scalar Definition</a></div><pre class="st200_verbatim">function add_scalar (v : vector_4i, x : integer) : vector_4i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s12ss2pg1" href="#st200_p7s12ss2pg1">1</a></div><div class="st200_paragraph">Return the addition  <span class="st200_term expression">(v[x] + s, v[y] + s, v[z] + s, v[w] + s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s12ss3" href="#st200_p7s12ss3">7.12.3</a></div><div class="st200_subsection_title">divide</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s12ss3fo1" href="#st200_p7s12ss3fo1">7.12.3.1. divide Definition</a></div><pre class="st200_verbatim">function divide (v0 : vector_4i, v1 : vector_4i) : vector_4i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s12ss3pg1" href="#st200_p7s12ss3pg1">1</a></div><div class="st200_paragraph">Return the component-wise division  <span class="st200_term expression">v0 / v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s12ss4" href="#st200_p7s12ss4">7.12.4</a></div><div class="st200_subsection_title">divide_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s12ss4fo1" href="#st200_p7s12ss4fo1">7.12.4.1. divide_scalar Definition</a></div><pre class="st200_verbatim">function divide_scalar (v : vector_4i, x : integer) : vector_4i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s12ss4pg1" href="#st200_p7s12ss4pg1">1</a></div><div class="st200_paragraph">Return the division  <span class="st200_term expression">(v[x] / s, v[y] / s, v[z] / s, v[w] / s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s12ss5" href="#st200_p7s12ss5">7.12.5</a></div><div class="st200_subsection_title">dot</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s12ss5fo1" href="#st200_p7s12ss5fo1">7.12.5.1. dot Definition</a></div><pre class="st200_verbatim">function dot (v0 : vector_4i, v1 : vector_4i) : integer</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s12ss5pg1" href="#st200_p7s12ss5pg1">1</a></div><div class="st200_paragraph">Return the dot product <span class="st200_term expression">v0 ⋅ v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s12ss6" href="#st200_p7s12ss6">7.12.6</a></div><div class="st200_subsection_title">interpolate</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s12ss6fo1" href="#st200_p7s12ss6fo1">7.12.6.1. interpolate Definition</a></div><pre class="st200_verbatim">function interpolate (v0 : vector_4i, v1 : vector_4i, t : float) : vector_4i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s12ss6pg1" href="#st200_p7s12ss6pg1">1</a></div><div class="st200_paragraph">Return the linear interpolation <span class="st200_term expression">(v1 ✕ t) + (v0 ✕ (1 - t))</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s12ss7" href="#st200_p7s12ss7">7.12.7</a></div><div class="st200_subsection_title">magnitude</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s12ss7fo1" href="#st200_p7s12ss7fo1">7.12.7.1. magnitude Definition</a></div><pre class="st200_verbatim">function magnitude (v : vector_4i) : float</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s12ss7pg1" href="#st200_p7s12ss7pg1">1</a></div><div class="st200_paragraph">Return the magnitude of <span class="st200_term expression">v</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s12ss8" href="#st200_p7s12ss8">7.12.8</a></div><div class="st200_subsection_title">multiply</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s12ss8fo1" href="#st200_p7s12ss8fo1">7.12.8.1. multiply Definition</a></div><pre class="st200_verbatim">function multiply (v0 : vector_4i, v1 : vector_4i) : vector_4i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s12ss8pg1" href="#st200_p7s12ss8pg1">1</a></div><div class="st200_paragraph">Return the component-wise multiplication <span class="st200_term expression">v0 ✕ v1</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s12ss9" href="#st200_p7s12ss9">7.12.9</a></div><div class="st200_subsection_title">multiply_scalar</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s12ss9fo1" href="#st200_p7s12ss9fo1">7.12.9.1. multiply_scalar Definition</a></div><pre class="st200_verbatim">function multiply_scalar (v0 : vector_4i, x : float) : vector_4i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s12ss9pg1" href="#st200_p7s12ss9pg1">1</a></div><div class="st200_paragraph">Return the multiplication <span class="st200_term expression">(v[x] ✕ s, v[y] ✕ s, v[z] ✕ s, v[w] ✕ s)</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s12ss10" href="#st200_p7s12ss10">7.12.10</a></div><div class="st200_subsection_title">negate</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s12ss10fo1" href="#st200_p7s12ss10fo1">7.12.10.1. negate Definition</a></div><pre class="st200_verbatim">function negate (v : vector_4i) : vector_4i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s12ss10pg1" href="#st200_p7s12ss10pg1">1</a></div><div class="st200_paragraph">Return the component-wise negation <span class="st200_term expression">-v</span>.</div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s12ss11" href="#st200_p7s12ss11">7.12.11</a></div><div class="st200_subsection_title">normalize</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s12ss11fo1" href="#st200_p7s12ss11fo1">7.12.11.1. normalize Definition</a></div><pre class="st200_verbatim">function normalize (v : vector_4i) : vector_4i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s12ss11pg1" href="#st200_p7s12ss11pg1">1</a></div><div class="st200_paragraph">
          Return a vector pointing in the same direction as <span class="st200_term expression">v</span>
          but with a magnitude of <span class="st200_term constant">1</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s12ss12" href="#st200_p7s12ss12">7.12.12</a></div><div class="st200_subsection_title">reflect</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s12ss12fo1" href="#st200_p7s12ss12fo1">7.12.12.1. reflect Definition</a></div><pre class="st200_verbatim">function reflect (i : vector_4i, n : vector_4i) : vector_4i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s12ss12pg1" href="#st200_p7s12ss12pg1">1</a></div><div class="st200_paragraph"> 
          Return the reflection of the incident vector 
          <span class="st200_term expression">i</span> with respect to the vector <span class="st200_term expression">n</span>,
          as given by <span class="st200_term expression">i - 2.0 ✕ dot(n, i) ✕ n</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s12ss13" href="#st200_p7s12ss13">7.12.13</a></div><div class="st200_subsection_title">refract</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s12ss13fo1" href="#st200_p7s12ss13fo1">7.12.13.1. refract Definition</a></div><pre class="st200_verbatim">function refract (i : vector_4i, n : vector_4i, e : float) : vector_4i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s12ss13pg1" href="#st200_p7s12ss13pg1">1</a></div><div class="st200_paragraph"> 
          Return the refraction vector of the incident vector 
          <span class="st200_term expression">i</span> with respect to the vector <span class="st200_term expression">n</span>,
          with the given ratio of indices of refraction <span class="st200_term expression">e</span>.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p7s12ss14" href="#st200_p7s12ss14">7.12.14</a></div><div class="st200_subsection_title">subtract</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p7s12ss14fo1" href="#st200_p7s12ss14fo1">7.12.14.1. subtract Definition</a></div><pre class="st200_verbatim">function subtract (v0 : vector_4i, v1 : vector_4i) : vector_4i</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p7s12ss14pg1" href="#st200_p7s12ss14pg1">1</a></div><div class="st200_paragraph">Return the component-wise subtraction <span class="st200_term expression">v0 - v1</span>.</div></div></div></div></div><div class="st200_part_container"><div class="st200_part_title_number"><a id="st200_p8" href="#st200_p8">8</a></div><div class="st200_part_title">Appendices</div><ul class="st200_contents st200_part_contents_outer st200_part_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p8s1">8.1. EBNF Grammar</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p8s2">8.2. Type rules</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p8s3">8.3. Operational semantics</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p8s4">8.4. GLSL identifiers</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p8s5">8.5. Lists</a></li></ul><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p8s1" href="#st200_p8s1">8.1</a></div><div class="st200_section_title">EBNF Grammar</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p8s1pg1" href="#st200_p8s1pg1">1</a></div><div class="st200_paragraph">
        The full EBNF grammar of the language is as follows:
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p8s1fo1" href="#st200_p8s1fo1">8.1.1. EBNF Grammar</a></div><pre class="st200_verbatim">(* Terminals *)

digit_nonzero =
  "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

digit =
  "0" | digit_nonzero ;

letter_lower =
  "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" |
  "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" |
  "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" |
  "y" | "z" ;

letter_upper =
  "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" |
  "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" |
  "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" |
  "Y" | "Z" ;

letter =
  letter_lower | letter_upper ;

name_lower =
  letter_lower , { letter | digit | "-" | "_" } ;

name_upper =
  letter_upper , { letter | digit | "-" | "_" } ;

integer_literal =
  "0" | ( ["-"] , digit_nonzero , { digit } ) ;

real_literal =
  ["-"] , digit , { digit } , "." , digit , { digit } ;

boolean_literal =
  "true" | "false" ;

(* Non-terminals *)

package_path =
  name_lower , { "." , name_lower } ;

package_declaration =
  "package" , package_path ;

import_path =
  package_path , "." , name_upper ;

import_declaration =
  "import" , import_path , [ "as" , name_upper ] ;

import_declarations =
  { import_declaration , ";" } ;

type_path =
    name_lower
  | name_upper , "." , name_lower ;

term_path =
    name_lower
  | name_upper , "." , name_lower ;

shader_path =
    name_lower
  | name_upper , "." , name_lower ;

value_declaration =
  "value" , name_lower , [ ":" , type_path ] , "=" , expression ;

value_declarations =
  { value_declaration , ";" } ;

function_formal_parameter =
  name_lower , ":" , type_path ;

function_formal_parameters =
  "(" , function_formal_parameter, { "," , function_formal_parameter } , ")" ;

function_declaration =
  "function" , name_lower , function_formal_parameters , ":" , type_path , "=" , expression ;

term_declaration =
  value_declaration | function_declaration ;

record_type_field =
  name_lower , ":" , type_path ;

record_type_expression =
  "record" , record_type_field , { "," , record_type_field } , "end" ;

type_declaration =
  "type" , name_lower , "is" , type_expression ;

type_declarations =
  { type_declaration , ";" } ;

type_expression =
  record_type_expression
  ;

variable_or_application_expression =
  term_path [ "(" , expression , { "," , expression } , ")" ]
  ;

new_parameters =
  "(" , expression , { "," , expression } , ")" ;

new_expression =
  "new" , type_path , new_parameters ;

record_expression_fields =
  "{" , name_lower , "=" , expression , { "," name_lower , "=" , expression } , "}" ;

record_expression =
  "record" , type_path , record_expression_fields ;

local_declaration =
  "value" , name_lower , [ ":" , type_path ] , "=" , expression ;

local_declarations =
  local_declaration , ";" , { local_declarations } ;

let_expression =
  "let" , local_declarations , "in" , expression , "end" ;

conditional_expression =
  "if" , expression , "then" , expression , "else" , expression , "end" ;

matrix_column_access_expression =
  "column" , expression , integer_literal ;

expression_pre =
    integer_literal
  | real_literal
  | boolean_literal
  | variable_or_application_expression
  | conditional_expression
  | matrix_column_access_expression
  | let_expression
  | new_expression
  | record_expression
  ;

expression_projection =
  "." , name_lower ;

expression_swizzle_names =
  "[" , name_lower , { "," , name_lower } , "]" ;

expression =
  expression_pre , { expression_swizzle | expression_projection } ;

shader_parameter_declaration =
  "parameter" , name_lower , ":" , type_path ;

shader_vertex_input_declaration =
  "in" , name_lower , ":" , type_path ;

shader_vertex_output_declaration =
  "out" , name_lower , ":" , type_path ;

shader_vertex_output_main_declaration =
  "out" , "vertex" , name_lower , ":" , type_path ;

shader_vertex_parameter =
    shader_parameter_declaration
  | shader_vertex_input_declaration
  | shader_vertex_output_declaration
  | shader_vertex_output_main_declaration ;

shader_vertex_parameters =
  { shader_vertex_parameter , ";" } ;

shader_vertex_output_assignment =
  "out" , name_lower , "=" , term_path ;

shader_vertex_output_assignments =
  shader_vertex_output_assignment , ";" , { shader_vertex_output_assignments } ;

shader_vertex_declaration =
  "vertex" , name_lower , "is" ,
  shader_vertex_parameters ,
  [ "with" , local_declarations ] ,
  "as" ,
  shader_vertex_output_assignments ,
  "end" ;

shader_fragment_input_declaration =
  "in" , name_lower , ":" , type_path ;

shader_fragment_output_declaration =
  "out" , name_lower , ":" , type_path , "as" , integer_literal ;

shader_fragment_output_depth_declaration =
  "out" , "depth", name_lower , ":" , type_path ;

shader_fragment_parameter =
    shader_parameter_declaration
  | shader_fragment_input_declaration
  | shader_fragment_output_declaration
  | shader_fragment_output_depth_declaration ;

shader_fragment_parameters =
  { shader_fragment_parameter , ";" } ;

shader_fragment_discard_declaration =
  "discard" , "(" , expression , ")" ;

shader_fragment_local_declaration =
    local_declaration
  | shader_fragment_discard_declaration ;

shader_fragment_local_declarations =
  shader_fragment_local_declaration , ";" , { shader_fragment_local_declarations } ;

shader_fragment_output_assignment =
  "out" , name_lower , "=" , term_path ;

shader_fragment_output_assignments =
  shader_fragment_output_assignment , ";" , { shader_fragment_output_assignments } ;

shader_fragment_declaration =
  "fragment" , name_lower , "is" ,
  shader_fragment_parameters ,
  [ "with" , shader_fragment_local_declarations ] ,
  "as" ,
  shader_fragment_output_assignments ,
  "end" ;

shader_program_declaration =
  "program" , name_lower , "is" ,
  "vertex" , shader_path , ";" ,
  "fragment" , shader_path , ";" ,
  "end" ;

shader_declaration =
  "shader" , ( shader_vertex_declaration | shader_fragment_declaration | shader_program_declaration ) ;

shader_declarations =
  { shader_declaration , ";" } ;

module_level_declarations =
  { value_declarations | function_declarations | type_declarations | shader_declarations } ;

module_declaration =
  "module" , name_upper , "is" ,
  import_declarations ,
  module_level_declarations ,
  "end" ;

module_declarations =
  module_declaration , ";" , { module_declaration , ";" } ;

unit =
  package_declaration , ";" ,
  module_declarations ;

</pre></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p8s2" href="#st200_p8s2">8.2</a></div><div class="st200_section_title">Type rules</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p8s2pg1" href="#st200_p8s2pg1">1</a></div><div class="st200_paragraph">
        The full type rules for the language are as follows:
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p8s2fo1" href="#st200_p8s2fo1">8.2.1. Type rules</a></div><img class="st200_image" alt="Type rules" src="png/typing.png"/></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p8s3" href="#st200_p8s3">8.3</a></div><div class="st200_section_title">Operational semantics</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p8s3pg1" href="#st200_p8s3pg1">1</a></div><div class="st200_paragraph">
        The full operational semantics for the language are as follows:
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p8s3fo1" href="#st200_p8s3fo1">8.3.1. Operational semantics</a></div><img class="st200_image" alt="Operational semantics" src="png/op_semantics.png"/></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p8s4" href="#st200_p8s4">8.4</a></div><div class="st200_section_title">GLSL identifiers</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p8s4pg1" href="#st200_p8s4pg1">1</a></div><div class="st200_paragraph">
        The complete list of reserved words in the OpenGL shading language
        as of version 4.3 are:
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p8s4fo1" href="#st200_p8s4fo1">8.4.1. GLSL identifiers</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><span class="st200_term keyword">active</span></li><li class="st200_list_item"><span class="st200_term keyword">asm</span></li><li class="st200_list_item"><span class="st200_term keyword">atomic_uint</span></li><li class="st200_list_item"><span class="st200_term keyword">attribute</span></li><li class="st200_list_item"><span class="st200_term keyword">bool</span></li><li class="st200_list_item"><span class="st200_term keyword">break</span></li><li class="st200_list_item"><span class="st200_term keyword">buffer</span></li><li class="st200_list_item"><span class="st200_term keyword">bvec2</span></li><li class="st200_list_item"><span class="st200_term keyword">bvec3</span></li><li class="st200_list_item"><span class="st200_term keyword">bvec4</span></li><li class="st200_list_item"><span class="st200_term keyword">case</span></li><li class="st200_list_item"><span class="st200_term keyword">cast</span></li><li class="st200_list_item"><span class="st200_term keyword">centroid</span></li><li class="st200_list_item"><span class="st200_term keyword">class</span></li><li class="st200_list_item"><span class="st200_term keyword">coherent</span></li><li class="st200_list_item"><span class="st200_term keyword">common</span></li><li class="st200_list_item"><span class="st200_term keyword">const</span></li><li class="st200_list_item"><span class="st200_term keyword">continue</span></li><li class="st200_list_item"><span class="st200_term keyword">default</span></li><li class="st200_list_item"><span class="st200_term keyword">discard</span></li><li class="st200_list_item"><span class="st200_term keyword">dmat2</span></li><li class="st200_list_item"><span class="st200_term keyword">dmat2x2</span></li><li class="st200_list_item"><span class="st200_term keyword">dmat2x3</span></li><li class="st200_list_item"><span class="st200_term keyword">dmat2x4</span></li><li class="st200_list_item"><span class="st200_term keyword">dmat3</span></li><li class="st200_list_item"><span class="st200_term keyword">dmat3x2</span></li><li class="st200_list_item"><span class="st200_term keyword">dmat3x3</span></li><li class="st200_list_item"><span class="st200_term keyword">dmat3x4</span></li><li class="st200_list_item"><span class="st200_term keyword">dmat4</span></li><li class="st200_list_item"><span class="st200_term keyword">dmat4x2</span></li><li class="st200_list_item"><span class="st200_term keyword">dmat4x3</span></li><li class="st200_list_item"><span class="st200_term keyword">dmat4x4</span></li><li class="st200_list_item"><span class="st200_term keyword">do</span></li><li class="st200_list_item"><span class="st200_term keyword">double</span></li><li class="st200_list_item"><span class="st200_term keyword">dvec2</span></li><li class="st200_list_item"><span class="st200_term keyword">dvec3</span></li><li class="st200_list_item"><span class="st200_term keyword">dvec4</span></li><li class="st200_list_item"><span class="st200_term keyword">else</span></li><li class="st200_list_item"><span class="st200_term keyword">enum</span></li><li class="st200_list_item"><span class="st200_term keyword">extern</span></li><li class="st200_list_item"><span class="st200_term keyword">external</span></li><li class="st200_list_item"><span class="st200_term keyword">false</span></li><li class="st200_list_item"><span class="st200_term keyword">filter</span></li><li class="st200_list_item"><span class="st200_term keyword">fixed</span></li><li class="st200_list_item"><span class="st200_term keyword">flat</span></li><li class="st200_list_item"><span class="st200_term keyword">float</span></li><li class="st200_list_item"><span class="st200_term keyword">for</span></li><li class="st200_list_item"><span class="st200_term keyword">fvec2</span></li><li class="st200_list_item"><span class="st200_term keyword">fvec3</span></li><li class="st200_list_item"><span class="st200_term keyword">fvec4</span></li><li class="st200_list_item"><span class="st200_term keyword">goto</span></li><li class="st200_list_item"><span class="st200_term keyword">half</span></li><li class="st200_list_item"><span class="st200_term keyword">highp</span></li><li class="st200_list_item"><span class="st200_term keyword">hvec2</span></li><li class="st200_list_item"><span class="st200_term keyword">hvec3</span></li><li class="st200_list_item"><span class="st200_term keyword">hvec4</span></li><li class="st200_list_item"><span class="st200_term keyword">if</span></li><li class="st200_list_item"><span class="st200_term keyword">iimage1D</span></li><li class="st200_list_item"><span class="st200_term keyword">iimage1DArray</span></li><li class="st200_list_item"><span class="st200_term keyword">iimage2D</span></li><li class="st200_list_item"><span class="st200_term keyword">iimage2DArray</span></li><li class="st200_list_item"><span class="st200_term keyword">iimage2DMS</span></li><li class="st200_list_item"><span class="st200_term keyword">iimage2DMSArray</span></li><li class="st200_list_item"><span class="st200_term keyword">iimage2DRect</span></li><li class="st200_list_item"><span class="st200_term keyword">iimage3D</span></li><li class="st200_list_item"><span class="st200_term keyword">iimageBuffer</span></li><li class="st200_list_item"><span class="st200_term keyword">iimageCube</span></li><li class="st200_list_item"><span class="st200_term keyword">iimageCubeArray</span></li><li class="st200_list_item"><span class="st200_term keyword">image1D</span></li><li class="st200_list_item"><span class="st200_term keyword">image1DArray</span></li><li class="st200_list_item"><span class="st200_term keyword">image2D</span></li><li class="st200_list_item"><span class="st200_term keyword">image2DArray</span></li><li class="st200_list_item"><span class="st200_term keyword">image2DMS</span></li><li class="st200_list_item"><span class="st200_term keyword">image2DMSArray</span></li><li class="st200_list_item"><span class="st200_term keyword">image2DRect</span></li><li class="st200_list_item"><span class="st200_term keyword">image3D</span></li><li class="st200_list_item"><span class="st200_term keyword">imageBuffer</span></li><li class="st200_list_item"><span class="st200_term keyword">imageCube</span></li><li class="st200_list_item"><span class="st200_term keyword">imageCubeArray</span></li><li class="st200_list_item"><span class="st200_term keyword">in</span></li><li class="st200_list_item"><span class="st200_term keyword">inline</span></li><li class="st200_list_item"><span class="st200_term keyword">inout</span></li><li class="st200_list_item"><span class="st200_term keyword">input</span></li><li class="st200_list_item"><span class="st200_term keyword">int</span></li><li class="st200_list_item"><span class="st200_term keyword">interface</span></li><li class="st200_list_item"><span class="st200_term keyword">invariant</span></li><li class="st200_list_item"><span class="st200_term keyword">isampler1D</span></li><li class="st200_list_item"><span class="st200_term keyword">isampler1DArray</span></li><li class="st200_list_item"><span class="st200_term keyword">isampler2D</span></li><li class="st200_list_item"><span class="st200_term keyword">isampler2DArray</span></li><li class="st200_list_item"><span class="st200_term keyword">isampler2DMS</span></li><li class="st200_list_item"><span class="st200_term keyword">isampler2DMSArray</span></li><li class="st200_list_item"><span class="st200_term keyword">isampler2DRect</span></li><li class="st200_list_item"><span class="st200_term keyword">isampler3D</span></li><li class="st200_list_item"><span class="st200_term keyword">isamplerBuffer</span></li><li class="st200_list_item"><span class="st200_term keyword">isamplerCube</span></li><li class="st200_list_item"><span class="st200_term keyword">isamplerCubeArray</span></li><li class="st200_list_item"><span class="st200_term keyword">ivec2</span></li><li class="st200_list_item"><span class="st200_term keyword">ivec3</span></li><li class="st200_list_item"><span class="st200_term keyword">ivec4</span></li><li class="st200_list_item"><span class="st200_term keyword">layout</span></li><li class="st200_list_item"><span class="st200_term keyword">long</span></li><li class="st200_list_item"><span class="st200_term keyword">lowp</span></li><li class="st200_list_item"><span class="st200_term keyword">mat2</span></li><li class="st200_list_item"><span class="st200_term keyword">mat2x2</span></li><li class="st200_list_item"><span class="st200_term keyword">mat2x3</span></li><li class="st200_list_item"><span class="st200_term keyword">mat2x4</span></li><li class="st200_list_item"><span class="st200_term keyword">mat3</span></li><li class="st200_list_item"><span class="st200_term keyword">mat3x2</span></li><li class="st200_list_item"><span class="st200_term keyword">mat3x3</span></li><li class="st200_list_item"><span class="st200_term keyword">mat3x4</span></li><li class="st200_list_item"><span class="st200_term keyword">mat4</span></li><li class="st200_list_item"><span class="st200_term keyword">mat4x2</span></li><li class="st200_list_item"><span class="st200_term keyword">mat4x3</span></li><li class="st200_list_item"><span class="st200_term keyword">mat4x4</span></li><li class="st200_list_item"><span class="st200_term keyword">mediump</span></li><li class="st200_list_item"><span class="st200_term keyword">namespace</span></li><li class="st200_list_item"><span class="st200_term keyword">noinline</span></li><li class="st200_list_item"><span class="st200_term keyword">noperspective</span></li><li class="st200_list_item"><span class="st200_term keyword">out</span></li><li class="st200_list_item"><span class="st200_term keyword">output</span></li><li class="st200_list_item"><span class="st200_term keyword">packed</span></li><li class="st200_list_item"><span class="st200_term keyword">partition</span></li><li class="st200_list_item"><span class="st200_term keyword">patch</span></li><li class="st200_list_item"><span class="st200_term keyword">precision</span></li><li class="st200_list_item"><span class="st200_term keyword">public</span></li><li class="st200_list_item"><span class="st200_term keyword">readonly</span></li><li class="st200_list_item"><span class="st200_term keyword">resource</span></li><li class="st200_list_item"><span class="st200_term keyword">restrict</span></li><li class="st200_list_item"><span class="st200_term keyword">return</span></li><li class="st200_list_item"><span class="st200_term keyword">row_major</span></li><li class="st200_list_item"><span class="st200_term keyword">sample</span></li><li class="st200_list_item"><span class="st200_term keyword">sampler1D</span></li><li class="st200_list_item"><span class="st200_term keyword">sampler1DArray</span></li><li class="st200_list_item"><span class="st200_term keyword">sampler1DArrayShadow</span></li><li class="st200_list_item"><span class="st200_term keyword">sampler1DShadow</span></li><li class="st200_list_item"><span class="st200_term keyword">sampler2D</span></li><li class="st200_list_item"><span class="st200_term keyword">sampler2DArray</span></li><li class="st200_list_item"><span class="st200_term keyword">sampler2DArrayShadow</span></li><li class="st200_list_item"><span class="st200_term keyword">sampler2DMS</span></li><li class="st200_list_item"><span class="st200_term keyword">sampler2DMSArray</span></li><li class="st200_list_item"><span class="st200_term keyword">sampler2DRect</span></li><li class="st200_list_item"><span class="st200_term keyword">sampler2DRectShadow</span></li><li class="st200_list_item"><span class="st200_term keyword">sampler2DShadow</span></li><li class="st200_list_item"><span class="st200_term keyword">sampler3D</span></li><li class="st200_list_item"><span class="st200_term keyword">sampler3DRect</span></li><li class="st200_list_item"><span class="st200_term keyword">samplerBuffer</span></li><li class="st200_list_item"><span class="st200_term keyword">samplerCube</span></li><li class="st200_list_item"><span class="st200_term keyword">samplerCubeArray</span></li><li class="st200_list_item"><span class="st200_term keyword">samplerCubeArrayShadow</span></li><li class="st200_list_item"><span class="st200_term keyword">samplerCubeShadow</span></li><li class="st200_list_item"><span class="st200_term keyword">shared</span></li><li class="st200_list_item"><span class="st200_term keyword">short</span></li><li class="st200_list_item"><span class="st200_term keyword">sizeof</span></li><li class="st200_list_item"><span class="st200_term keyword">smooth</span></li><li class="st200_list_item"><span class="st200_term keyword">static</span></li><li class="st200_list_item"><span class="st200_term keyword">struct</span></li><li class="st200_list_item"><span class="st200_term keyword">subroutine</span></li><li class="st200_list_item"><span class="st200_term keyword">superp</span></li><li class="st200_list_item"><span class="st200_term keyword">switch</span></li><li class="st200_list_item"><span class="st200_term keyword">template</span></li><li class="st200_list_item"><span class="st200_term keyword">this</span></li><li class="st200_list_item"><span class="st200_term keyword">true</span></li><li class="st200_list_item"><span class="st200_term keyword">typedef</span></li><li class="st200_list_item"><span class="st200_term keyword">uimage1D</span></li><li class="st200_list_item"><span class="st200_term keyword">uimage1DArray</span></li><li class="st200_list_item"><span class="st200_term keyword">uimage2D</span></li><li class="st200_list_item"><span class="st200_term keyword">uimage2DArray</span></li><li class="st200_list_item"><span class="st200_term keyword">uimage2DMS</span></li><li class="st200_list_item"><span class="st200_term keyword">uimage2DMSArray</span></li><li class="st200_list_item"><span class="st200_term keyword">uimage2DRect</span></li><li class="st200_list_item"><span class="st200_term keyword">uimage3D</span></li><li class="st200_list_item"><span class="st200_term keyword">uimageBuffer</span></li><li class="st200_list_item"><span class="st200_term keyword">uimageCube</span></li><li class="st200_list_item"><span class="st200_term keyword">uimageCubeArray</span></li><li class="st200_list_item"><span class="st200_term keyword">uint</span></li><li class="st200_list_item"><span class="st200_term keyword">uniform</span></li><li class="st200_list_item"><span class="st200_term keyword">union</span></li><li class="st200_list_item"><span class="st200_term keyword">unsigned</span></li><li class="st200_list_item"><span class="st200_term keyword">usampler1D</span></li><li class="st200_list_item"><span class="st200_term keyword">usampler1DArray</span></li><li class="st200_list_item"><span class="st200_term keyword">usampler2D</span></li><li class="st200_list_item"><span class="st200_term keyword">usampler2DArray</span></li><li class="st200_list_item"><span class="st200_term keyword">usampler2DMS</span></li><li class="st200_list_item"><span class="st200_term keyword">usampler2DMSArray</span></li><li class="st200_list_item"><span class="st200_term keyword">usampler2DRect</span></li><li class="st200_list_item"><span class="st200_term keyword">usampler3D</span></li><li class="st200_list_item"><span class="st200_term keyword">usamplerBuffer</span></li><li class="st200_list_item"><span class="st200_term keyword">usamplerCube</span></li><li class="st200_list_item"><span class="st200_term keyword">usamplerCubeArray</span></li><li class="st200_list_item"><span class="st200_term keyword">using</span></li><li class="st200_list_item"><span class="st200_term keyword">uvec2</span></li><li class="st200_list_item"><span class="st200_term keyword">uvec3</span></li><li class="st200_list_item"><span class="st200_term keyword">uvec4</span></li><li class="st200_list_item"><span class="st200_term keyword">varying</span></li><li class="st200_list_item"><span class="st200_term keyword">vec2</span></li><li class="st200_list_item"><span class="st200_term keyword">vec3</span></li><li class="st200_list_item"><span class="st200_term keyword">vec4</span></li><li class="st200_list_item"><span class="st200_term keyword">void</span></li><li class="st200_list_item"><span class="st200_term keyword">volatile</span></li><li class="st200_list_item"><span class="st200_term keyword">while</span></li><li class="st200_list_item"><span class="st200_term keyword">writeonly</span></li></ul></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p8s5" href="#st200_p8s5">8.5</a></div><div class="st200_section_title">Lists</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p8s5fo1" href="#st200_p8s5fo1">8.5.1. List of specifications</a></div><div class="st200_formal_item_list"><ul><li class="st200_formal_item_list_item"><a href="#st200_p1s5fo1">1.5.1. Tuples</a></li><li class="st200_formal_item_list_item"><a href="#st200_p1s8fo2">1.8.2. Evaluation characteristics</a></li><li class="st200_formal_item_list_item"><a href="#st200_p2s3fo1">2.3.1. Whitespace</a></li><li class="st200_formal_item_list_item"><a href="#st200_p2s3fo2">2.3.2. Line separators</a></li><li class="st200_formal_item_list_item"><a href="#st200_p2s5ss1fo1">2.5.1.1. Integer literals</a></li><li class="st200_formal_item_list_item"><a href="#st200_p2s5ss2fo1">2.5.2.1. Real literals</a></li><li class="st200_formal_item_list_item"><a href="#st200_p2s5ss3fo1">2.5.3.1. Boolean literals</a></li><li class="st200_formal_item_list_item"><a href="#st200_p2s5ss4fo1">2.5.4.1. Identifiers</a></li><li class="st200_formal_item_list_item"><a href="#st200_p2s5ss5fo1">2.5.5.1. Keywords</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s2ss3fo1">3.2.3.1. Name restrictions</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s2ss4fo1">3.2.4.1. Recursion conditions</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s2ss8fo1">3.2.8.1. Value declaration type rule (value_declaration)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s2ss8fo2">3.2.8.2. Value declaration (ascribed) type rule (value_declaration_ascribed)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s2ss8fo3">3.2.8.3. Function declaration type rule (function_declaration)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s2ss9fo1">3.2.9.1. Top level evaluation (top_level)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s2ss10fo1">3.2.10.1. Term declaration syntax</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s3ss2fo1">3.3.2.1. Name restrictions</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s3ss3fo1">3.3.3.1. Recursion conditions</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s3ss6fo1">3.3.6.1. Type declaration syntax</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s4ss3fo1">3.4.3.1. Name restrictions</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s4ss4fo1">3.4.4.1. Name restrictions</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s4ss5fo1">3.4.5.1. Input/Output types</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s4ss6fo1">3.4.6.1. Shader declaration syntax</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s5ss3fo1">3.5.3.1. Vertex shader inputs/parameters (shader_vertex_inputs_parameters)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s5ss3fo2">3.5.3.2. Vertex shader values (shader_vertex_values)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s5ss3fo3">3.5.3.3. Vertex shader output assignments (shader_vertex_output)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s5ss4fo1">3.5.4.1. Vertex shader local declarations (shader_vertex_values)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s6ss4fo1">3.6.4.1. Fragment shader inputs/parameters (shader_fragment_inputs_parameters)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s6ss4fo2">3.6.4.2. Fragment shader values (shader_fragment_values)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s6ss4fo3">3.6.4.3. Fragment shader output assignments (shader_fragment_output)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s6ss4fo4">3.6.4.4. Fragment shader discard (shader_fragment_discard)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s6ss5fo1">3.6.5.1. Fragment shader local declarations (shader_fragment_values)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s7ss3fo1">3.7.3.1. Input/output compatibility</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s7ss3fo2">3.7.3.2. Input/output compatibility</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s8ss3fo1">3.8.3.1. Name restrictions</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s8ss5fo1">3.8.5.1. Recursion conditions</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s8ss6fo1">3.8.6.1. Module declaration syntax</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s9ss3fo1">3.9.3.1. Package declaration syntax</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s1ss1fo1">4.1.1.1. Expression forms</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s1ss2fo1">4.1.2.1. Values (values)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s2fo1">4.2.1. Expression syntax</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s3ss2fo1">4.3.2.1. Integer literal type rule (integer_constant)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s4ss2fo1">4.4.2.1. Real literal type rule (float_constant)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s5ss2fo1">4.5.2.1. Boolean true literal type rule (true_constant)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s5ss2fo2">4.5.2.2. Boolean false literal type rule (false_constant)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s6ss2fo1">4.6.2.1. Variable type rule (variable)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s7ss2fo1">4.7.2.1. Function application type rule (function_application)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s7ss3fo1">4.7.3.1. Function application semantics (function_application)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s8ss2fo1">4.8.2.1. Conditional type rule (conditional)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s8ss3fo1">4.8.3.1. Conditional semantics (condition)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s9ss2fo1">4.9.2.1. Let type rule (let)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s9ss3fo1">4.9.3.1. Let semantics (let)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s10ss2fo1">4.10.2.1. Record projection type rule (record_projection)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s10ss3fo1">4.10.3.1. Record projection semantics (record_projection)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s11ss2fo1">4.11.2.1. Record expression type rule (record_expression)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s11ss3fo1">4.11.3.1. Record expression semantics (record_expression)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s12ss3fo1">4.12.3.1. Swizzle semantics (swizzle)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s13ss3fo1">4.13.3.1. Matrix Column Access semantics (matrix_column_access)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p4s14ss3fo1">4.14.3.1. New semantics (new)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s1fo1">5.1.1. Basic types</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s3ss2fo1">5.3.2.1. Constructors</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s3ss2fo2">5.3.2.2. Scalar new type rule (new_scalar)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s4ss2fo1">5.4.2.1. Constructors</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s4ss2fo2">5.4.2.2. Scalar new type rule (new_scalar)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s5ss2fo1">5.5.2.1. Constructors</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s5ss2fo2">5.5.2.2. Scalar new type rule (new_scalar)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s6ss1fo1">5.6.1.1. Swizzle vector type rule (vector_swizzle)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s6ss1fo2">5.6.1.2. Swizzle scalar type rule (vector_swizzle_single)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s6ss2fo1">5.6.2.1. Vector primary constructors</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s6ss2fo2">5.6.2.2. Vector new type rule (vector_new)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s6ss2fo3">5.6.2.3. Vector auxiliary constructors</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s7ss1fo1">5.7.1.1. Matrix Column Access type rule (matrix_column_access)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s7ss2fo1">5.7.2.1. Matrix constructors</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s7ss2fo2">5.7.2.2. Matrix new type rule (matrix_new)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s9ss1fo1">5.9.1.1. Record field types</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s1ss1fo1">7.1.1.1. or Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss1fo1">7.2.1.1. absolute Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss2fo1">7.2.2.1. add Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss3fo1">7.2.3.1. arc_cosine Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss4fo1">7.2.4.1. arc_sine Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss5fo1">7.2.5.1. arc_tangent Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss6fo1">7.2.6.1. ceiling Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss7fo1">7.2.7.1. clamp Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss8fo1">7.2.8.1. cosine Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss9fo1">7.2.9.1. divide Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss10fo1">7.2.10.1. equals Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss11fo1">7.2.11.1. floor Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss12fo1">7.2.12.1. greater Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss13fo1">7.2.13.1. greater_or_equal Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss14fo1">7.2.14.1. interpolate Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss15fo1">7.2.15.1. is_infinite Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss16fo1">7.2.16.1. is_nan Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss17fo1">7.2.17.1. lesser Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss18fo1">7.2.18.1. lesser_or_equal Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss19fo1">7.2.19.1. log2 Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss20fo1">7.2.20.1. maximum Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss21fo1">7.2.21.1. minimum Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss22fo1">7.2.22.1. modulo Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss23fo1">7.2.23.1. multiply Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss24fo1">7.2.24.1. negate Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss25fo1">7.2.25.1. power Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss26fo1">7.2.26.1. round Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss27fo1">7.2.27.1. sign Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss28fo1">7.2.28.1. sine Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss29fo1">7.2.29.1. square_root Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss30fo1">7.2.30.1. subtract Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss31fo1">7.2.31.1. tangent Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s2ss32fo1">7.2.32.1. truncate Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s3ss1fo1">7.3.1.1. add Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s3ss2fo1">7.3.2.1. divide Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s3ss3fo1">7.3.3.1. multiply Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s3ss4fo1">7.3.4.1. subtract Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s4ss1fo1">7.4.1.1. multiply Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s4ss2fo1">7.4.2.1. multiply_vector Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s5ss1fo1">7.5.1.1. multiply Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s5ss2fo1">7.5.2.1. multiply_vector Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s6ss1fo1">7.6.1.1. texture Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s6ss2fo1">7.6.2.1. texture_with_offset Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s6ss3fo1">7.6.3.1. texture_with_lod Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s7ss1fo1">7.7.1.1. add Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s7ss2fo1">7.7.2.1. add_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s7ss3fo1">7.7.3.1. divide Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s7ss4fo1">7.7.4.1. divide_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s7ss5fo1">7.7.5.1. dot Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s7ss6fo1">7.7.6.1. interpolate Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s7ss7fo1">7.7.7.1. magnitude Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s7ss8fo1">7.7.8.1. multiply Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s7ss9fo1">7.7.9.1. multiply_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s7ss10fo1">7.7.10.1. negate Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s7ss11fo1">7.7.11.1. normalize Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s7ss12fo1">7.7.12.1. reflect Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s7ss13fo1">7.7.13.1. refract Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s7ss14fo1">7.7.14.1. subtract Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s8ss1fo1">7.8.1.1. add Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s8ss2fo1">7.8.2.1. add_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s8ss3fo1">7.8.3.1. divide Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s8ss4fo1">7.8.4.1. divide_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s8ss5fo1">7.8.5.1. dot Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s8ss6fo1">7.8.6.1. interpolate Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s8ss7fo1">7.8.7.1. magnitude Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s8ss8fo1">7.8.8.1. multiply Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s8ss9fo1">7.8.9.1. multiply_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s8ss10fo1">7.8.10.1. negate Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s8ss11fo1">7.8.11.1. normalize Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s8ss12fo1">7.8.12.1. reflect Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s8ss13fo1">7.8.13.1. refract Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s8ss14fo1">7.8.14.1. subtract Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s9ss1fo1">7.9.1.1. add Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s9ss2fo1">7.9.2.1. add_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s9ss3fo1">7.9.3.1. divide Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s9ss4fo1">7.9.4.1. divide_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s9ss5fo1">7.9.5.1. cross Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s9ss6fo1">7.9.6.1. dot Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s9ss7fo1">7.9.7.1. interpolate Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s9ss8fo1">7.9.8.1. magnitude Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s9ss9fo1">7.9.9.1. multiply Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s9ss10fo1">7.9.10.1. multiply_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s9ss11fo1">7.9.11.1. negate Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s9ss12fo1">7.9.12.1. normalize Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s9ss13fo1">7.9.13.1. reflect Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s9ss14fo1">7.9.14.1. refract Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s9ss15fo1">7.9.15.1. subtract Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s10ss1fo1">7.10.1.1. add Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s10ss2fo1">7.10.2.1. add_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s10ss3fo1">7.10.3.1. divide Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s10ss4fo1">7.10.4.1. divide_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s10ss5fo1">7.10.5.1. dot Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s10ss6fo1">7.10.6.1. interpolate Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s10ss7fo1">7.10.7.1. magnitude Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s10ss8fo1">7.10.8.1. multiply Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s10ss9fo1">7.10.9.1. multiply_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s10ss10fo1">7.10.10.1. negate Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s10ss11fo1">7.10.11.1. normalize Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s10ss12fo1">7.10.12.1. reflect Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s10ss13fo1">7.10.13.1. refract Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s10ss14fo1">7.10.14.1. subtract Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s11ss1fo1">7.11.1.1. add Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s11ss2fo1">7.11.2.1. add_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s11ss3fo1">7.11.3.1. divide Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s11ss4fo1">7.11.4.1. divide_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s11ss5fo1">7.11.5.1. dot Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s11ss6fo1">7.11.6.1. interpolate Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s11ss7fo1">7.11.7.1. magnitude Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s11ss8fo1">7.11.8.1. multiply Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s11ss9fo1">7.11.9.1. multiply_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s11ss10fo1">7.11.10.1. negate Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s11ss11fo1">7.11.11.1. normalize Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s11ss12fo1">7.11.12.1. reflect Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s11ss13fo1">7.11.13.1. refract Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s11ss14fo1">7.11.14.1. subtract Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s12ss1fo1">7.12.1.1. add Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s12ss2fo1">7.12.2.1. add_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s12ss3fo1">7.12.3.1. divide Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s12ss4fo1">7.12.4.1. divide_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s12ss5fo1">7.12.5.1. dot Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s12ss6fo1">7.12.6.1. interpolate Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s12ss7fo1">7.12.7.1. magnitude Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s12ss8fo1">7.12.8.1. multiply Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s12ss9fo1">7.12.9.1. multiply_scalar Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s12ss10fo1">7.12.10.1. negate Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s12ss11fo1">7.12.11.1. normalize Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s12ss12fo1">7.12.12.1. reflect Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s12ss13fo1">7.12.13.1. refract Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p7s12ss14fo1">7.12.14.1. subtract Definition</a></li><li class="st200_formal_item_list_item"><a href="#st200_p8s1fo1">8.1.1. EBNF Grammar</a></li><li class="st200_formal_item_list_item"><a href="#st200_p8s2fo1">8.2.1. Type rules</a></li><li class="st200_formal_item_list_item"><a href="#st200_p8s3fo1">8.3.1. Operational semantics</a></li><li class="st200_formal_item_list_item"><a href="#st200_p8s4fo1">8.4.1. GLSL identifiers</a></li></ul></div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p8s5fo2" href="#st200_p8s5fo2">8.5.2. List of examples</a></div><div class="st200_formal_item_list"><ul><li class="st200_formal_item_list_item"><a href="#st200_p1s5fo2">1.5.2. Example n-tuple sets</a></li><li class="st200_formal_item_list_item"><a href="#st200_p1s7fo2">1.7.2. Natural number addition typing</a></li><li class="st200_formal_item_list_item"><a href="#st200_p1s7fo3">1.7.3. Natural number addition derivation</a></li><li class="st200_formal_item_list_item"><a href="#st200_p1s8fo1">1.8.1. Conditionals example</a></li><li class="st200_formal_item_list_item"><a href="#st200_p1s8fo3">1.8.3. Conditional semantics</a></li><li class="st200_formal_item_list_item"><a href="#st200_p1s8fo4">1.8.4. Conditionals example evaluation</a></li><li class="st200_formal_item_list_item"><a href="#st200_p1s8fo5">1.8.5. Function semantics</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s2ss11fo1">3.2.11.1. Examples</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s3ss4fo1">3.3.4.1. Valid type declarations</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s3ss4fo2">3.3.4.2. Invalid type declarations (duplicate field)</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s3ss7fo1">3.3.7.1. Examples</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s5ss5fo1">3.5.5.1. Examples</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s6ss6fo1">3.6.6.1. Examples</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s7ss4fo1">3.7.4.1. Examples</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s8ss4fo1">3.8.4.1. Module import example</a></li><li class="st200_formal_item_list_item"><a href="#st200_p3s8ss4fo2">3.8.4.2. Module import renaming</a></li><li class="st200_formal_item_list_item"><a href="#st200_p5s6ss1fo3">5.6.1.3. Swizzle matrix example</a></li><li class="st200_formal_item_list_item"><a href="#st200_p6s2fo1">6.2.1. Compilation</a></li><li class="st200_formal_item_list_item"><a href="#st200_p6s2fo2">6.2.2. Execution</a></li></ul></div></div></div></div><div class="st200_footnotes"><hr/><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_0" href="#st200_fn_0_ref">0</a>]</div><div class="st200_footnote_body">
          <a class="st200_link_external" href="http://en.wikipedia.org/wiki/Propositional_logic">http://en.wikipedia.org/wiki/Propositional_logic</a>
        </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_1" href="#st200_fn_1_ref">1</a>]</div><div class="st200_footnote_body">
          <a class="st200_link_external" href="http://en.wikipedia.org/wiki/Zermelo-Fraenkel_set_theory">http://en.wikipedia.org/wiki/Zermelo-Fraenkel_set_theory</a>
        </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_2" href="#st200_fn_2_ref">2</a>]</div><div class="st200_footnote_body">
          <a class="st200_link_external" href="http://en.wikipedia.org/wiki/Type_theory">https://en.wikipedia.org/wiki/Type_theory</a>
        </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_3" href="#st200_fn_3_ref">3</a>]</div><div class="st200_footnote_body">
                  Usually accompanied with a side condition that
                  <span class="st200_term variable">x</span> does not appear in
                  <span class="st200_term expression">dom(Γ)</span>)
                </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_4" href="#st200_fn_4_ref">4</a>]</div><div class="st200_footnote_body">
            Notably, <span class="st200_term term">parameters</span> are the
            <span class="st200_term emphasis">only</span> means by which values
            of the <a class="st200_link" href="#st200_p5s8">sampler</a>
            types can be introduced into a program.
          </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_5" href="#st200_fn_5_ref">5</a>]</div><div class="st200_footnote_body">
            The <span class="st200_term term">shader_fragment_discard_declaration</span> is described
            as having type <a class="st200_link" href="#st200_p5s5">boolean</a>, but
            the result of the expression is effectively consumed by the
            <span class="st200_term package">parasol</span> language runtime and so this is
            not observable in practice.
          </div></div></div></div></body></html>
