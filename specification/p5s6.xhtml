<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>Parasol Language 0.11.3 Specification: 5.6. Vectors</title><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-layout.css"/><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-colour.css"/><link rel="stylesheet" type="text/css" href="specification.css"/></head><body><div class="st200_body"><div class="brand">
  <div class="brand_left">
    <a href="http://io7m.com/">io7m</a>
  </div>
  <div class="brand_right">
    <a href="http://io7m.github.io/jparasol/">io7m-jparasol</a> 0.11.3
  </div>
</div><div class="st200_navbar st200_navbar_top"><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_title_cell">5.5. Boolean</td><td class="st200_navbar_up_title_cell">5. Types</td><td class="st200_navbar_next_title_cell">5.7. Matrices</td></tr><tr><td class="st200_navbar_prev_file_cell"><a href="p5s5.xhtml#st200_p5s5">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p5.xhtml#st200_p5">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p5s7.xhtml#st200_p5s7">Next</a></td></tr></table><hr class="st200_hr"/></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p5s6" href="#st200_p5s6">5.6</a></div><div class="st200_section_title">Vectors</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s6ss1" href="#st200_p5s6ss1">5.6.1</a></div><div class="st200_subsection_title">Description</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss1pg1" href="#st200_p5s6ss1pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term type">vector_NT</span> types represent
          fixed-length vectors, where <span class="st200_term expression">N ∈ [2, 4]</span>
          and represents the number of components in the vector,
          and <span class="st200_term expression">T ∈ {f, i}</span>
          where <span class="st200_term constant">f</span> indicates that the components
          of the vector are of type
          <a class="st200_link" href="p5s4.xhtml#st200_p5s4">float</a>
          and <span class="st200_term constant">i</span>
          indicates that the components of the vector are of type
          <a class="st200_link" href="p5s3.xhtml#st200_p5s3">integer</a>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss1pg2" href="#st200_p5s6ss1pg2">2</a></div><div class="st200_paragraph">
          The components of the <span class="st200_term type">vector_NT</span> types
          are labelled, in order, from the n-tuple of labels
          <span class="st200_term expression">K = (x, y, z, w)</span>.
          At most <span class="st200_term expression">N</span> labels are used for each type,
          so the first, second, third, and fourth elements of the
          <span class="st200_term type">vector_4T</span> types are labelled
          <span class="st200_term constant">x</span>, <span class="st200_term constant">y</span>,
          <span class="st200_term constant">z</span>, and <span class="st200_term constant">w</span>,
          respectively. The <span class="st200_term type">vector_3T</span> types lack a
          <span class="st200_term constant">w</span> component, and the
          <span class="st200_term type">vector_2T</span> types lack both
          <span class="st200_term constant">z</span> and <span class="st200_term constant">w</span>
          components.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss1pg3" href="#st200_p5s6ss1pg3">3</a></div><div class="st200_paragraph">
          The values of the components of the <span class="st200_term type">vector_NT</span> types
          are extracted via <span class="st200_term term">swizzle</span> expressions. A
          <span class="st200_term term">swizzle</span> expression consists of an n-tuple
          <span class="st200_term expression">Sₚ</span>
          of labels taken from the set <span class="st200_term expression">S = tuples(L, M)</span> of
          n-tuples, where
          <span class="st200_term expression">M &lt;= N</span>,
          <span class="st200_term expression">L</span> is the first
          <span class="st200_term expression">M - 1</span> elements of <span class="st200_term expression">K</span>,
          and <span class="st200_term expression">0 &lt;= P &lt;= |S|</span>,
          and evaluates to
          a value of type <span class="st200_term type">vector_MT</span>
          or, in the case that <span class="st200_term expression">M = 1</span>,
          a scalar value of type <span class="st200_term type">T</span>,
          consisting of the values of the components named in <span class="st200_term expression">Sₚ</span>:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s6ss1fo1" href="#st200_p5s6ss1fo1">5.6.1.1. Swizzle vector type rule (vector_swizzle)</a></div><img class="st200_image" alt="Swizzle vector type rule (vector_swizzle)" src="png/ty_vector_swizzle.png"/></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s6ss1fo2" href="#st200_p5s6ss1fo2">5.6.1.2. Swizzle scalar type rule (vector_swizzle_single)</a></div><img class="st200_image" alt="Swizzle scalar type rule (vector_swizzle_single)" src="png/ty_vector_swizzle_single.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss1pg4" href="#st200_p5s6ss1pg4">4</a></div><div class="st200_paragraph">
          Algebraically, <span class="st200_term term">swizzling</span> is analogous to
          multiplication of a vector <span class="st200_term variable">v</span> of size
          <span class="st200_term expression">N</span>
          by an <span class="st200_term expression">NxN</span> matrix
          <span class="st200_term variable">p</span>, where each row of
          <span class="st200_term variable">p</span> consists of
          <span class="st200_term expression">N - 1</span> zeroes and exactly one
          <span class="st200_term expression">1</span>:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p5s6ss1fo3" href="#st200_p5s6ss1fo3">5.6.1.3. Swizzle matrix example</a></div><img class="st200_image" alt="Swizzle matrix example" src="png/ex_matrix_swizzle_example.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p5s6ss2" href="#st200_p5s6ss2">5.6.2</a></div><div class="st200_subsection_title">Constructors</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss2pg1" href="#st200_p5s6ss2pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term term">constructors</span> of the
          <span class="st200_term type">vector_NT</span> types
          can be conceptually divided into <span class="st200_term term">primary</span>
          and <span class="st200_term term">auxiliary constructors</span>. Each
          <span class="st200_term type">vector_NT</span> type has exactly one
          <span class="st200_term term">primary constructor</span> which initializes
          the components of the resulting <span class="st200_term type">vector_NT</span>
          value to the values of the expressions in the exact order given.
          There is no practical or visible difference between a
          <span class="st200_term term">primary</span> and
          <span class="st200_term term">auxiliary constructor</span>; the distinction
          is simply made for the purposes of describing the typing rules.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss2pg2" href="#st200_p5s6ss2pg2">2</a></div><div class="st200_paragraph">
          The types of the <span class="st200_term term">primary constructors</span> for
          each type are:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s6ss2fo1" href="#st200_p5s6ss2fo1">5.6.2.1. Vector primary constructors</a></div><table class="st200_table" summary="Vector primary constructors"><thead class="st200_table_head"><tr><th class="st200_table_column_name">Type</th><th class="st200_table_column_name">Constructor type</th></tr></thead><tbody class="st200_table_body"><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_2i</span></td><td class="st200_table_cell"><span class="st200_term type">(integer, integer) → vector_2i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3i</span></td><td class="st200_table_cell"><span class="st200_term type">(integer, integer, integer) → vector_3i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">(integer, integer, integer, integer) → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_2f</span></td><td class="st200_table_cell"><span class="st200_term type">(float, float) → vector_2f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3f</span></td><td class="st200_table_cell"><span class="st200_term type">(float, float, float) → vector_3f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">(float, float, float, float) → vector_4f</span></td></tr></tbody></table></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss2pg3" href="#st200_p5s6ss2pg3">3</a></div><div class="st200_paragraph">
          Given the presence of <span class="st200_term term">primary constructors</span>,
          the type rule for the construction of a vector using the
          <span class="st200_term keyword">new</span> keyword is:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s6ss2fo2" href="#st200_p5s6ss2fo2">5.6.2.2. Vector new type rule (vector_new)</a></div><img class="st200_image" alt="Vector new type rule (vector_new)" src="png/ty_vector_new.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss2pg4" href="#st200_p5s6ss2pg4">4</a></div><div class="st200_paragraph">
          The <span class="st200_term term">auxiliary constructors</span> for the
          <span class="st200_term type">vector_NT</span> types are:
        </div></div><div class="st200_formal_item specifications"><div class="st200_formal_item_title specifications"><a id="st200_p5s6ss2fo3" href="#st200_p5s6ss2fo3">5.6.2.3. Vector auxiliary constructors</a></div><table class="st200_table" summary="Vector auxiliary constructors"><thead class="st200_table_head"><tr><th class="st200_table_column_name">Type</th><th class="st200_table_column_name">Constructor type</th></tr></thead><tbody class="st200_table_body"><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_2i</span></td><td class="st200_table_cell"><span class="st200_term type">vector_2i → vector_2i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3i</span></td><td class="st200_table_cell"><span class="st200_term type">(integer, vector_2i) → vector_3i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3i</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_2i, integer) → vector_3i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3i</span></td><td class="st200_table_cell"><span class="st200_term type">vector_3i → vector_3i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_2i, integer, integer) → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">(integer, vector_2i, integer) → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_2i, vector_2i) → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">(integer, integer, vector_2i) → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_3i, integer) → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">(integer, vector_3i) → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4i</span></td><td class="st200_table_cell"><span class="st200_term type">vector_4i → vector_4i</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_2f</span></td><td class="st200_table_cell"><span class="st200_term type">vector_2f → vector_2f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3f</span></td><td class="st200_table_cell"><span class="st200_term type">(float, vector_2f) → vector_3f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3f</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_2f, float) → vector_3f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_3f</span></td><td class="st200_table_cell"><span class="st200_term type">vector_3f → vector_3f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_2f, float, float) → vector_4f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">(float, vector_2f, float) → vector_4f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_2f, vector_2f) → vector_4f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">(float, float, vector_2f) → vector_4f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">(vector_3f, float) → vector_4f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">(float, vector_3f) → vector_4f</span></td></tr><tr class="st200_table_row"><td class="st200_table_cell"><span class="st200_term type">vector_4f</span></td><td class="st200_table_cell"><span class="st200_term type">vector_4f → vector_4f</span></td></tr></tbody></table></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p5s6ss2pg5" href="#st200_p5s6ss2pg5">5</a></div><div class="st200_paragraph">
          For each <span class="st200_term term">auxiliary constructor</span> for a given
          <span class="st200_term type">vector_NT</span> type, the values of the scalars (if any),
          and the values of the components of the given vectors (if any), are concatenated
          together in the order given to produce an n-tuple of length
          <span class="st200_term variable">N</span>
          which is then passed directly to the
          <span class="st200_term term">primary constructor</span> for the given type.
        </div></div></div></div><div class="st200_navbar st200_navbar_bottom"><hr class="st200_hr"/><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_file_cell"><a href="p5s5.xhtml#st200_p5s5">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p5.xhtml#st200_p5">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p5s7.xhtml#st200_p5s7">Next</a></td></tr><tr><td class="st200_navbar_prev_title_cell">5.5. Boolean</td><td class="st200_navbar_up_title_cell">5. Types</td><td class="st200_navbar_next_title_cell">5.7. Matrices</td></tr></table></div></div></body></html>
